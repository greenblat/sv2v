module zeroriscy_register_file #( parameter RV32E = 0,DATA_WIDTH = 32) (
    input  clk
    ,input [4:0] raddr_a_i
    ,input [4:0] raddr_b_i
    ,output [(DATA_WIDTH - 1):0] rdata_a_o
    ,output [(DATA_WIDTH - 1):0] rdata_b_o
    ,input  rst_n
    ,input  test_en_i
    ,input [4:0] waddr_a_i
    ,input [(DATA_WIDTH - 1):0] wdata_a_i
    ,input  we_a_i
);
localparam ADDR_WIDTH = RV32E ? 4 : 5;
localparam NUM_WORDS = (2 ** ADDR_WIDTH);
reg [(NUM_WORDS - 1):1] waddr_onehot_a;
wire [31:0] j;
wire [(ADDR_WIDTH - 1):0] raddr_a_int;
reg [(DATA_WIDTH - 1):0] [(NUM_WORDS - 1):0] mem;
reg [31:0] k;
wire [(ADDR_WIDTH - 1):0] raddr_b_int;
reg [31:0] i;
wire [(ADDR_WIDTH - 1):0] waddr_a_int;
wire  clk_int;
wire [(NUM_WORDS - 1):1] mem_clocks;
reg [(DATA_WIDTH - 1):0] wdata_a_q;
genvar x;
assign   raddr_a_int = raddr_a_i[(ADDR_WIDTH - 1):0];
assign   raddr_b_int = raddr_b_i[(ADDR_WIDTH - 1):0];
assign   waddr_a_int = waddr_a_i[(ADDR_WIDTH - 1):0];
assign   rdata_a_o = mem[raddr_a_int];
assign   rdata_b_o = mem[raddr_b_int];
cluster_clock_gating  CG_WE_GLOBAL (.clk_i(clk), .clk_o(clk_int), .en_i(we_a_i), .test_en_i(test_en_i));
generate
    for(x=1;x < NUM_WORDS;x=x + 1)begin
        begin :CG_CELL_WORD_ITER
cluster_clock_gating  CG_Inst(.clk_i(clk_int)
 ,.en_i(waddr_onehot_a[x])
 ,.test_en_i(test_en_i)
 ,.clk_o(mem_clocks[x]));
        end
    end

endgenerate
always @(posedge clk_int or negedge rst_n) begin
    begin :sample_waddr
        if(~rst_n) begin
            wdata_a_q <= 32'd0;
        end else begin
            if(we_a_i) begin
                wdata_a_q <= wdata_a_i;
            end
        end
    end
end
always @(*) begin
    begin :p_WADa
        for(i=1;i < NUM_WORDS;i=i + 1)begin
            begin :p_WordItera
                if(we_a_i && (waddr_a_int == i)) begin
                    waddr_onehot_a[i] = 1'b1;
                end else begin
                    waddr_onehot_a[i] = 1'b0;
                end
            end
        end
    end
end
always @(*) begin
    begin :latch_wdata
        mem[0] = 32'd0;
        for(k=1;k < NUM_WORDS;k=k + 1)begin
            begin :w_WordIter
                if(mem_clocks[k]) begin
                    mem[k] = wdata_a_q;
                end
            end
        end
    end
end
endmodule

