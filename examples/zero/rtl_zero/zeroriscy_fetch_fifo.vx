module zeroriscy_fetch_fifo(
    input  clear_i
    ,input  clk
    ,input [31:0] in_addr_i
    ,input [31:0] in_rdata_i
    ,output  in_ready_o
    ,input  in_valid_i
    ,output [31:0] out_addr_o
    ,output reg [31:0] out_rdata_o
    ,input  out_ready_i
    ,output reg  out_valid_o
    ,output reg  out_valid_stored_o
    ,input  rst_n
);
localparam DEPTH = 3;
reg [31:0] j;
wire [31:0] rdata;
wire  unaligned_is_compressed;
wire [31:0] addr_next;
reg [(DEPTH - 1):0] [31:0] addr_n;
reg [(DEPTH - 1):0] valid_int;
reg [(DEPTH - 1):0] [31:0] addr_Q;
wire  aligned_is_compressed;
wire  valid;
reg [(DEPTH - 1):0] [31:0] rdata_int;
wire  aligned_is_compressed_st;
reg [(DEPTH - 1):0] [31:0] rdata_n;
reg [(DEPTH - 1):0] [31:0] addr_int;
reg [(DEPTH - 1):0] valid_n;
wire [31:0] rdata_unaligned;
reg [(DEPTH - 1):0] valid_Q;
wire  valid_unaligned;
reg [(DEPTH - 1):0] [31:0] rdata_Q;
wire  unaligned_is_compressed_st;
assign   rdata = valid_Q[0] ? rdata_Q[0] : in_rdata_i;
assign   valid = valid_Q[0] || in_valid_i;
assign   rdata_unaligned = valid_Q[1] ? {rdata_Q[1][15:0], rdata[31:16]} : {in_rdata_i[15:0], rdata[31:16]};
assign   valid_unaligned = valid_Q[1] || (valid_Q[0] && in_valid_i);
assign   unaligned_is_compressed = rdata[17:16] != 2'b11;
assign   aligned_is_compressed = rdata[1:0] != 2'b11;
assign   unaligned_is_compressed_st = rdata_Q[0][17:16] != 2'b11;
assign   aligned_is_compressed_st = rdata_Q[0][1:0] != 2'b11;
assign   out_addr_o = valid_Q[0] ? addr_Q[0] : in_addr_i;
assign   in_ready_o = ~valid_Q[(DEPTH - 2)];
assign   addr_next = {addr_int[0][31:2], 2'b00} + 32'h4;
always @(*) begin
    if(out_addr_o[1]) begin
        out_rdata_o = rdata_unaligned;
        if(unaligned_is_compressed) begin
            out_valid_o = valid;
        end else begin
            out_valid_o = valid_unaligned;
        end
    end else begin
        out_rdata_o = rdata;
        out_valid_o = valid;
    end
end
always @(*) begin
    out_valid_stored_o = 1'b1;
    if(out_addr_o[1]) begin
        if(unaligned_is_compressed_st) begin
            out_valid_stored_o = 1'b1;
        end else begin
            out_valid_stored_o = valid_Q[1];
        end
    end else begin
        out_valid_stored_o = valid_Q[0];
    end
end
always @(*) begin
    addr_int = addr_Q;
    rdata_int = rdata_Q;
    valid_int = valid_Q;
    if(in_valid_i) begin
        for(j=0;j < DEPTH;j=j + 1)begin
            if(~valid_Q[j]) begin
                addr_int[j] = in_addr_i;
                rdata_int[j] = in_rdata_i;
                valid_int[j] = 1'b1;
            end
        end
    end
end
always @(*) begin
    addr_n = addr_int;
    rdata_n = rdata_int;
    valid_n = valid_int;
    if(out_ready_i && out_valid_o) begin
        if(addr_int[0][1]) begin
            if(unaligned_is_compressed) begin
                addr_n[0] = {addr_next[31:2], 2'b00};
            end else begin
                addr_n[0] = {addr_next[31:2], 2'b10};
            end
            rdata_n = {32'b0, rdata_int[(DEPTH - 1):1]};
            valid_n = {1'b0, valid_int[(DEPTH - 1):1]};
        end else begin
            if(aligned_is_compressed) begin
                addr_n[0] = {addr_int[0][31:2], 2'b10};
            end else begin
                addr_n[0] = {addr_next[31:2], 2'b00};
                rdata_n = {32'b0, rdata_int[(DEPTH - 1):1]};
                valid_n = {1'b0, valid_int[(DEPTH - 1):1]};
            end
        end
    end
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        addr_Q <= 32'd0;
        rdata_Q <= 32'd0;
        valid_Q <= 32'd0;
    end else begin
        if(clear_i) begin
            valid_Q <= 32'd0;
        end else begin
            addr_Q <= addr_n;
            rdata_Q <= rdata_n;
            valid_Q <= valid_n;
        end
    end
end
endmodule

