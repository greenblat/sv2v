module zeroriscy_load_store_unit(
    input [31:0] adder_result_ex_i
    ,output  busy_o
    ,input  clk
    ,output [31:0] data_addr_o
    ,output [3:0] data_be_o
    ,input  data_err_i
    ,input  data_gnt_i
    ,output reg  data_misaligned_o
    ,output [31:0] data_rdata_ex_o
    ,input [31:0] data_rdata_i
    ,input [1:0] data_reg_offset_ex_i
    ,input  data_req_ex_i
    ,output reg  data_req_o
    ,input  data_rvalid_i
    ,input  data_sign_ext_ex_i
    ,input [1:0] data_type_ex_i
    ,output reg  data_valid_o
    ,input [31:0] data_wdata_ex_i
    ,output [31:0] data_wdata_o
    ,input  data_we_ex_i
    ,output  data_we_o
    ,output  load_err_o
    ,output reg  lsu_update_addr_o
    ,output reg [31:0] misaligned_addr_o
    ,input  rst_n
    ,output  store_err_o
);
localparam WAIT_RVALID_MIS = 2;
localparam IDLE = 0;
localparam WAIT_GNT = 3;
localparam WAIT_RVALID = 4;
localparam WAIT_GNT_MIS = 1;
reg  data_misaligned_q;
reg [31:0] rdata_h_ext;
reg [3:0] data_be;
wire [1:0] wdata_offset;
reg [31:0] data_wdata;
reg [1:0] rdata_offset_q;
reg [31:0] rdata_b_ext;
reg  data_we_q;
reg [1:0] data_type_q;
reg  increase_address;
reg [31:0] rdata_w_ext;
reg [2:0] NS;
wire  misaligned_st;
reg [31:0] rdata_q;
reg  data_misaligned;
reg [2:0] CS;
reg [31:0] data_rdata_ext;
reg  data_sign_ext_q;
wire [31:0] data_addr_int;
assign   wdata_offset = data_addr_int[1:0] - data_reg_offset_ex_i[1:0];
assign   data_rdata_ex_o = data_rvalid_i ? data_rdata_ext : rdata_q;
assign   data_addr_o = data_addr_int;
assign   data_wdata_o = data_wdata;
assign   data_we_o = data_we_ex_i;
assign   data_be_o = data_be;
assign   misaligned_st = data_misaligned_q;
assign   load_err_o = 1'b0;
assign   store_err_o = 1'b0;
assign   data_addr_int = adder_result_ex_i;
assign   busy_o = (CS == WAIT_RVALID) || data_req_o;
always @(*) begin
    case (data_type_ex_i)
        2'b00: if(~misaligned_st) begin
            case (data_addr_int[1:0])
                2'b00: data_be = 4'b1111;
                2'b01: data_be = 4'b1110;
                2'b10: data_be = 4'b1100;
                2'b11: data_be = 4'b1000;
            endcase
        end else begin
            case (data_addr_int[1:0])
                2'b00: data_be = 4'b0000;
                2'b01: data_be = 4'b0001;
                2'b10: data_be = 4'b0011;
                2'b11: data_be = 4'b0111;
            endcase
        end
        2'b01: if(~misaligned_st) begin
            case (data_addr_int[1:0])
                2'b00: data_be = 4'b0011;
                2'b01: data_be = 4'b0110;
                2'b10: data_be = 4'b1100;
                2'b11: data_be = 4'b1000;
            endcase
        end else begin
            data_be = 4'b0001;
        end
        2'b10,2'b11: case (data_addr_int[1:0])
            2'b00: data_be = 4'b0001;
            2'b01: data_be = 4'b0010;
            2'b10: data_be = 4'b0100;
            2'b11: data_be = 4'b1000;
        endcase
    endcase
end
always @(*) begin
    case (wdata_offset)
        2'b00: data_wdata = data_wdata_ex_i[31:0];
        2'b01: data_wdata = {data_wdata_ex_i[23:0], data_wdata_ex_i[31:24]};
        2'b10: data_wdata = {data_wdata_ex_i[15:0], data_wdata_ex_i[31:16]};
        2'b11: data_wdata = {data_wdata_ex_i[7:0], data_wdata_ex_i[31:8]};
    endcase
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        data_type_q <= 32'd0;
        rdata_offset_q <= 32'd0;
        data_sign_ext_q <= 32'd0;
        data_we_q <= 1'b0;
    end else if(data_gnt_i) begin
        data_type_q <= data_type_ex_i;
        rdata_offset_q <= data_addr_int[1:0];
        data_sign_ext_q <= data_sign_ext_ex_i;
        data_we_q <= data_we_ex_i;
    end
end
always @(*) begin
    case (rdata_offset_q)
        2'b00: rdata_w_ext = data_rdata_i[31:0];
        2'b01: rdata_w_ext = {data_rdata_i[7:0], rdata_q[31:8]};
        2'b10: rdata_w_ext = {data_rdata_i[15:0], rdata_q[31:16]};
        2'b11: rdata_w_ext = {data_rdata_i[23:0], rdata_q[31:24]};
    endcase
end
always @(*) begin
    case (rdata_offset_q)
        2'b00: if(~data_sign_ext_q) begin
            rdata_h_ext = {16'h0000, data_rdata_i[15:0]};
        end else begin
            rdata_h_ext = {{ 16 { data_rdata_i[15:15] }}, data_rdata_i[15:0]};
        end
        2'b01: if(~data_sign_ext_q) begin
            rdata_h_ext = {16'h0000, data_rdata_i[23:8]};
        end else begin
            rdata_h_ext = {{ 16 { data_rdata_i[23:23] }}, data_rdata_i[23:8]};
        end
        2'b10: if(~data_sign_ext_q) begin
            rdata_h_ext = {16'h0000, data_rdata_i[31:16]};
        end else begin
            rdata_h_ext = {{ 16 { data_rdata_i[31:31] }}, data_rdata_i[31:16]};
        end
        2'b11: if(~data_sign_ext_q) begin
            rdata_h_ext = {16'h0000, data_rdata_i[7:0], rdata_q[31:24]};
        end else begin
            rdata_h_ext = {{ 16 { data_rdata_i[7:7] }}, data_rdata_i[7:0], rdata_q[31:24]};
        end
    endcase
end
always @(*) begin
    case (rdata_offset_q)
        2'b00: if(~data_sign_ext_q) begin
            rdata_b_ext = {24'h00_0000, data_rdata_i[7:0]};
        end else begin
            rdata_b_ext = {{ 24 { data_rdata_i[7:7] }}, data_rdata_i[7:0]};
        end
        2'b01: if(~data_sign_ext_q) begin
            rdata_b_ext = {24'h00_0000, data_rdata_i[15:8]};
        end else begin
            rdata_b_ext = {{ 24 { data_rdata_i[15:15] }}, data_rdata_i[15:8]};
        end
        2'b10: if(~data_sign_ext_q) begin
            rdata_b_ext = {24'h00_0000, data_rdata_i[23:16]};
        end else begin
            rdata_b_ext = {{ 24 { data_rdata_i[23:23] }}, data_rdata_i[23:16]};
        end
        2'b11: if(~data_sign_ext_q) begin
            rdata_b_ext = {24'h00_0000, data_rdata_i[31:24]};
        end else begin
            rdata_b_ext = {{ 24 { data_rdata_i[31:31] }}, data_rdata_i[31:24]};
        end
    endcase
end
always @(*) begin
    case (data_type_q)
        2'b00: data_rdata_ext = rdata_w_ext;
        2'b01: data_rdata_ext = rdata_h_ext;
        2'b10,2'b11: data_rdata_ext = rdata_b_ext;
    endcase
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        CS <= IDLE;
        rdata_q <= 32'd0;
        data_misaligned_q <= 32'd0;
        misaligned_addr_o <= 32'b0;
    end else begin
        CS <= NS;
        if(lsu_update_addr_o) begin
            data_misaligned_q <= data_misaligned;
            if(increase_address) begin
                misaligned_addr_o <= data_addr_int;
            end
        end
        if(data_rvalid_i && (~data_we_q)) begin
            if(data_misaligned_q || data_misaligned) begin
                rdata_q <= data_rdata_i;
            end else begin
                rdata_q <= data_rdata_ext;
            end
        end
    end
end
always @(*) begin
    NS = CS;
    data_req_o = 1'b0;
    lsu_update_addr_o = 1'b0;
    data_valid_o = 1'b0;
    increase_address = 1'b0;
    data_misaligned_o = 1'b0;
    case (CS)
        IDLE: if(data_req_ex_i) begin
            data_req_o = data_req_ex_i;
            if(data_gnt_i) begin
                lsu_update_addr_o = 1'b1;
                increase_address = data_misaligned;
                NS = data_misaligned ? WAIT_RVALID_MIS : WAIT_RVALID;
            end else begin
                NS = data_misaligned ? WAIT_GNT_MIS : WAIT_GNT;
            end
        end
        WAIT_GNT_MIS: begin
            data_req_o = 1'b1;
            if(data_gnt_i) begin
                lsu_update_addr_o = 1'b1;
                increase_address = data_misaligned;
                NS = WAIT_RVALID_MIS;
            end
        end
        WAIT_RVALID_MIS: begin
            increase_address = 1'b0;
            data_misaligned_o = 1'b1;
            data_req_o = 1'b0;
            lsu_update_addr_o = data_gnt_i;
            if(data_rvalid_i) begin
                data_req_o = 1'b1;
                if(data_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end else begin
                NS = WAIT_RVALID_MIS;
            end
        end
        WAIT_GNT: begin
            data_misaligned_o = data_misaligned_q;
            data_req_o = 1'b1;
            if(data_gnt_i) begin
                lsu_update_addr_o = 1'b1;
                NS = WAIT_RVALID;
            end
        end
        WAIT_RVALID: begin
            data_req_o = 1'b0;
            if(data_rvalid_i) begin
                data_valid_o = 1'b1;
                NS = IDLE;
            end else begin
                NS = WAIT_RVALID;
            end
        end
        default: NS = IDLE;
    endcase
end
always @(*) begin
    data_misaligned = 1'b0;
    if(data_req_ex_i && (~data_misaligned_q)) begin
        case (data_type_ex_i)
            2'b00: if(data_addr_int[1:0] != 2'b00) begin
                data_misaligned = 1'b1;
            end
            2'b01: if(data_addr_int[1:0] == 2'b11) begin
                data_misaligned = 1'b1;
            end
            default: ;        endcase
    end
end
endmodule

