module zeroriscy_id_stage #( parameter RV32M = 1,RV32E = 0) (
    output [31:0] alu_operand_a_ex_o
    ,output [31:0] alu_operand_b_ex_o
    ,output [(ALU_OP_WIDTH - 1):0] alu_operator_ex_o
    ,input  branch_decision_i
    ,output  branch_in_ex_o
    ,output  clear_instr_valid_o
    ,input  clk
    ,output  core_ctrl_firstfetch_o
    ,output  csr_access_ex_o
    ,output [5:0] csr_cause_o
    ,output [1:0] csr_op_ex_o
    ,input [31:0] csr_rdata_i
    ,output  csr_restore_mret_id_o
    ,output  csr_save_cause_o
    ,output  csr_save_id_o
    ,output  csr_save_if_o
    ,output  ctrl_busy_o
    ,output  data_load_event_ex_o
    ,input  data_misaligned_i
    ,output [1:0] data_reg_offset_ex_o
    ,output  data_req_ex_o
    ,output  data_sign_ext_ex_o
    ,output [1:0] data_type_ex_o
    ,output [31:0] data_wdata_ex_o
    ,output  data_we_ex_o
    ,output  dbg_ack_o
    ,input  dbg_jump_req_i
    ,input [4:0] dbg_reg_raddr_i
    ,output [31:0] dbg_reg_rdata_o
    ,input  dbg_reg_rreq_i
    ,input [4:0] dbg_reg_waddr_i
    ,input [31:0] dbg_reg_wdata_i
    ,input  dbg_reg_wreq_i
    ,input  dbg_req_i
    ,input [(DBG_SETS_W - 1):0] dbg_settings_i
    ,input  dbg_stall_i
    ,output  dbg_trap_o
    ,output  div_en_ex_o
    ,input  ex_ready_i
    ,output [5:0] exc_cause_o
    ,output [1:0] exc_pc_mux_o
    ,input  fetch_enable_i
    ,output  halt_if_o
    ,output  id_ready_o
    ,output  id_valid_o
    ,input  illegal_c_insn_i
    ,input [31:0] instr_rdata_i
    ,output  instr_req_o
    ,input  instr_valid_i
    ,output  irq_ack_o
    ,input  irq_i
    ,input [4:0] irq_id_i
    ,output [4:0] irq_id_o
    ,input  is_compressed_i
    ,output  is_decoding_o
    ,input  lsu_load_err_i
    ,input  lsu_store_err_i
    ,input  m_irq_enable_i
    ,input [31:0] misaligned_addr_i
    ,output  mult_en_ex_o
    ,output [31:0] multdiv_operand_a_ex_o
    ,output [31:0] multdiv_operand_b_ex_o
    ,output [1:0] multdiv_operator_ex_o
    ,output [1:0] multdiv_signed_mode_ex_o
    ,input [31:0] pc_id_i
    ,output [2:0] pc_mux_o
    ,output  pc_set_o
    ,output reg  perf_branch_o
    ,output  perf_jump_o
    ,output  perf_tbranch_o
    ,input [31:0] regfile_wdata_ex_i
    ,input [31:0] regfile_wdata_lsu_i
    ,input  rst_n
    ,input  test_en_i
);
localparam OP_B_IMM = 3'b010;
localparam WAIT_MULTICYCLE = 1;
localparam OP_A_REGA_OR_FWD = 3'b000;
localparam OP_B_REGB_OR_FWD = 3'b000;
localparam IMMB_S2 = 4'b0100;
localparam IMMB_S3 = 4'b0101;
localparam IMMB_S = 4'b0001;
localparam IMMB_U = 4'b0010;
localparam SEL_MISALIGNED = 2'b11;
localparam IMMB_VU = 4'b0111;
localparam IMMB_VS = 4'b0110;
localparam ALU_OP_WIDTH = 6;
localparam IMMB_I = 4'b0000;
localparam SEL_REGFILE = 2'b00;
localparam IMMA_ZERO = 1'b1;
localparam RF_LSU = 0;
localparam DBG_SETS_W = 6;
localparam IMMA_Z = 1'b0;
localparam IMMB_PCINCR = 4'b0011;
localparam IMMB_BI = 4'b1011;
localparam OP_A_IMM = 3'b010;
localparam OP_A_CURRPC = 3'b001;
localparam IMMB_UJ = 4'b1100;
localparam RF_EX = 1;
localparam IMMB_SB = 4'b1101;
localparam IDLE = 0;
wire  data_sign_ext_id;
wire  data_req_id;
reg  id_wb_fsm_cs;
wire [31:0] imm_z_type;
reg [31:0] regfile_wdata_mux;
reg  multdiv_stall;
wire  regfile_we_id;
wire  exc_kill;
wire [31:0] instr;
wire  jump_in_id;
wire  illegal_reg_rv32e;
reg [31:0] operand_a_fw_id;
wire [31:0] imm_u_type;
wire [31:0] regfile_data_rb_id;
wire [31:0] imm_bi_type;
wire  exc_ack;
reg  jump_stall;
wire [31:0] imm_uj_type;
wire [(ALU_OP_WIDTH - 1):0] alu_operator;
wire  data_load_event_id;
reg  select_data_rf;
reg  regfile_we;
wire  mult_int_en;
wire [1:0] multdiv_operator;
wire  deassert_we;
wire [1:0] data_type_id;
wire [1:0] data_reg_offset_id;
wire [31:0] imm_i_type;
reg  jump_mux_dec;
reg  branch_set_n;
reg  branch_set_q;
wire [31:0] imm_vu_type;
wire  div_int_en;
wire  csr_access;
wire [1:0] csr_op;
wire [4:0] irq_id_ctrl;
reg [31:0] imm_b;
reg [31:0] imm_a;
wire [4:0] regfile_alu_waddr_id;
wire [31:0] imm_s_type;
reg  regfile_we_mux;
reg  branch_stall;
reg  branch_mux_dec;
wire  branch_in_id;
reg  load_stall;
wire  multdiv_int_en;
wire [31:0] operand_b_fw_id;
wire [1:0] operand_a_fw_mux_sel;
wire  ebrk_insn;
reg [4:0] regfile_waddr_mux;
wire  data_we_id;
wire [31:0] imm_s3_type;
wire  mret_insn_dec;
reg  instr_multicyle;
wire [4:0] regfile_addr_rb_id;
wire [31:0] imm_s2_type;
wire  pipe_flush_dec;
reg  id_wb_fsm_ns;
wire [4:0] regfile_addr_ra_id;
wire [31:0] imm_sb_type;
wire [0:0] imm_a_mux_sel;
wire  irq_req_ctrl;
wire [1:0] multdiv_signed_mode;
wire [3:0] imm_b_mux_sel;
wire [2:0] alu_op_b_mux_sel;
wire [2:0] alu_op_a_mux_sel;
reg [31:0] operand_b;
reg  jump_set;
wire  branch_taken_ex;
wire [31:0] regfile_data_ra_id;
wire [31:0] alu_operand_b;
wire  illegal_insn_dec;
reg [31:0] alu_operand_a;
wire  halt_id;
wire [31:0] imm_vs_type;
wire [31:0] imm_iz_type;
wire  csr_status;
wire  ecall_insn_dec;
assign   instr = instr_rdata_i;
assign   imm_i_type = {{ 20 { instr[31:31] }}, instr[31:20]};
assign   imm_iz_type = {20'b0, instr[31:20]};
assign   imm_s_type = {{ 20 { instr[31:31] }}, instr[31:25], instr[11:7]};
assign   imm_sb_type = {{ 19 { instr[31:31] }}, instr[31], instr[7], instr[30:25], instr[11:8], 1'b0};
assign   imm_u_type = {instr[31:12], 12'b0};
assign   imm_uj_type = {{ 12 { instr[31:31] }}, instr[19:12], instr[20], instr[30:21], 1'b0};
assign   imm_z_type = {27'b0, instr[19:15]};
assign   imm_s2_type = {27'b0, instr[24:20]};
assign   imm_bi_type = {{ 27 { instr[24:24] }}, instr[24:20]};
assign   imm_s3_type = {27'b0, instr[29:25]};
assign   imm_vs_type = {{ 26 { instr[24:24] }}, instr[24:20], instr[25]};
assign   imm_vu_type = {26'b0, instr[24:20], instr[25]};
assign   regfile_addr_ra_id = instr[19:15];
assign   regfile_addr_rb_id = instr[24:20];
assign   regfile_alu_waddr_id = instr[11:7];
assign   illegal_reg_rv32e = 1'b0;
assign   clear_instr_valid_o = id_ready_o | halt_id;
assign   branch_taken_ex = branch_in_id & branch_decision_i;
assign   alu_operand_b = operand_b;
assign   operand_b_fw_id = regfile_data_rb_id;
assign   dbg_reg_rdata_o = regfile_data_rb_id;
assign   multdiv_int_en = mult_int_en | div_int_en;
assign   data_we_ex_o = data_we_id;
assign   data_type_ex_o = data_type_id;
assign   data_sign_ext_ex_o = data_sign_ext_id;
assign   data_wdata_ex_o = regfile_data_rb_id;
assign   data_req_ex_o = data_req_id;
assign   data_reg_offset_ex_o = data_reg_offset_id;
assign   data_load_event_ex_o = data_load_event_id;
assign   alu_operator_ex_o = alu_operator;
assign   alu_operand_a_ex_o = alu_operand_a;
assign   alu_operand_b_ex_o = alu_operand_b;
assign   csr_access_ex_o = csr_access;
assign   csr_op_ex_o = csr_op;
assign   branch_in_ex_o = branch_in_id;
assign   mult_en_ex_o = mult_int_en;
assign   div_en_ex_o = div_int_en;
assign   multdiv_operator_ex_o = multdiv_operator;
assign   multdiv_signed_mode_ex_o = multdiv_signed_mode;
assign   multdiv_operand_a_ex_o = regfile_data_ra_id;
assign   multdiv_operand_b_ex_o = regfile_data_rb_id;
assign   id_ready_o = (((~load_stall) & (~branch_stall)) & (~jump_stall)) & (~multdiv_stall);
assign   id_valid_o = (~halt_id) & id_ready_o;
zeroriscy_controller  controller_i (.branch_in_id_i(branch_in_id)
 ,.branch_set_i(branch_set_q)
 ,.branch_taken_ex_i(branch_taken_ex)
 ,.clk(clk)
 ,.csr_cause_o(csr_cause_o)
 ,.csr_restore_mret_id_o(csr_restore_mret_id_o)
 ,.csr_save_cause_o(csr_save_cause_o)
 ,.csr_save_id_o(csr_save_id_o)
 ,.csr_save_if_o(csr_save_if_o)
 ,.csr_status_i(csr_status)
 ,.ctrl_busy_o(ctrl_busy_o)
 ,.data_misaligned_i(data_misaligned_i)
 ,.dbg_ack_o(dbg_ack_o)
 ,.dbg_jump_req_i(dbg_jump_req_i)
 ,.dbg_req_i(dbg_req_i)
 ,.dbg_settings_i(dbg_settings_i)
 ,.dbg_stall_i(dbg_stall_i)
 ,.dbg_trap_o(dbg_trap_o)
 ,.deassert_we_o(deassert_we)
 ,.ebrk_insn_i(ebrk_insn)
 ,.ecall_insn_i(ecall_insn_dec)
 ,.exc_ack_o(exc_ack)
 ,.exc_cause_o(exc_cause_o)
 ,.exc_kill_o(exc_kill)
 ,.exc_pc_mux_o(exc_pc_mux_o)
 ,.fetch_enable_i(fetch_enable_i)
 ,.first_fetch_o(core_ctrl_firstfetch_o)
 ,.halt_id_o(halt_id)
 ,.halt_if_o(halt_if_o)
 ,.id_ready_i(id_ready_o)
 ,.illegal_insn_i((illegal_insn_dec | illegal_reg_rv32e))
 ,.instr_multicyle_i(instr_multicyle)
 ,.instr_req_o(instr_req_o)
 ,.instr_valid_i(instr_valid_i)
 ,.irq_ack_o(irq_ack_o)
 ,.irq_id_ctrl_i(irq_id_ctrl)
 ,.irq_id_o(irq_id_o)
 ,.irq_req_ctrl_i(irq_req_ctrl)
 ,.is_decoding_o(is_decoding_o)
 ,.jump_set_i(jump_set)
 ,.m_IE_i(m_irq_enable_i)
 ,.mret_insn_i(mret_insn_dec)
 ,.operand_a_fw_mux_sel_o(operand_a_fw_mux_sel)
 ,.pc_mux_o(pc_mux_o)
 ,.pc_set_o(pc_set_o)
 ,.perf_jump_o(perf_jump_o)
 ,.perf_tbranch_o(perf_tbranch_o)
 ,.pipe_flush_i(pipe_flush_dec)
 ,.rst_n(rst_n));
zeroriscy_register_file #(.RV32E(RV32E)) registers_i (.clk(clk)
 ,.raddr_a_i(regfile_addr_ra_id)
 ,.raddr_b_i((dbg_reg_rreq_i == 1'b0) ? regfile_addr_rb_id : dbg_reg_raddr_i)
 ,.rdata_a_o(regfile_data_ra_id)
 ,.rdata_b_o(regfile_data_rb_id)
 ,.rst_n(rst_n)
 ,.test_en_i(test_en_i)
 ,.waddr_a_i(regfile_waddr_mux)
 ,.wdata_a_i(regfile_wdata_mux)
 ,.we_a_i(regfile_we_mux));
zeroriscy_decoder #(.RV32M(RV32M)) decoder_i (.alu_op_a_mux_sel_o(alu_op_a_mux_sel)
 ,.alu_op_b_mux_sel_o(alu_op_b_mux_sel)
 ,.alu_operator_o(alu_operator)
 ,.branch_in_id_o(branch_in_id)
 ,.branch_mux_i(branch_mux_dec)
 ,.csr_access_o(csr_access)
 ,.csr_op_o(csr_op)
 ,.csr_status_o(csr_status)
 ,.data_load_event_o(data_load_event_id)
 ,.data_misaligned_i(data_misaligned_i)
 ,.data_reg_offset_o(data_reg_offset_id)
 ,.data_req_o(data_req_id)
 ,.data_sign_extension_o(data_sign_ext_id)
 ,.data_type_o(data_type_id)
 ,.data_we_o(data_we_id)
 ,.deassert_we_i(deassert_we)
 ,.div_int_en_o(div_int_en)
 ,.ebrk_insn_o(ebrk_insn)
 ,.ecall_insn_o(ecall_insn_dec)
 ,.illegal_c_insn_i(illegal_c_insn_i)
 ,.illegal_insn_o(illegal_insn_dec)
 ,.imm_a_mux_sel_o(imm_a_mux_sel)
 ,.imm_b_mux_sel_o(imm_b_mux_sel)
 ,.instr_rdata_i(instr)
 ,.jump_in_id_o(jump_in_id)
 ,.jump_mux_i(jump_mux_dec)
 ,.mret_insn_o(mret_insn_dec)
 ,.mult_int_en_o(mult_int_en)
 ,.multdiv_operator_o(multdiv_operator)
 ,.multdiv_signed_mode_o(multdiv_signed_mode)
 ,.pipe_flush_o(pipe_flush_dec)
 ,.regfile_we_o(regfile_we_id));
zeroriscy_int_controller  int_controller_i (.clk(clk)
 ,.ctrl_ack_i(exc_ack)
 ,.ctrl_kill_i(exc_kill)
 ,.irq_i(irq_i)
 ,.irq_id_ctrl_o(irq_id_ctrl)
 ,.irq_id_i(irq_id_i)
 ,.irq_req_ctrl_o(irq_req_ctrl)
 ,.m_IE_i(m_irq_enable_i)
 ,.rst_n(rst_n));
always @(*) begin
    begin :alu_operand_a_mux
        case (alu_op_a_mux_sel)
            OP_A_REGA_OR_FWD: alu_operand_a = operand_a_fw_id;
            OP_A_CURRPC: alu_operand_a = pc_id_i;
            OP_A_IMM: alu_operand_a = imm_a;
            default: alu_operand_a = operand_a_fw_id;
        endcase
    end
end
always @(*) begin
    begin :immediate_a_mux
        case (imm_a_mux_sel)
            IMMA_Z: imm_a = imm_z_type;
            IMMA_ZERO: imm_a = 32'd0;
            default: imm_a = 32'd0;
        endcase
    end
end
always @(*) begin
    begin :operand_a_fw_mux
        case (operand_a_fw_mux_sel)
            SEL_MISALIGNED: operand_a_fw_id = misaligned_addr_i;
            SEL_REGFILE: operand_a_fw_id = regfile_data_ra_id;
            default: operand_a_fw_id = regfile_data_ra_id;
        endcase
    end
end
always @(*) begin
    begin :immediate_b_mux
        case (imm_b_mux_sel)
            IMMB_I: imm_b = imm_i_type;
            IMMB_S: imm_b = imm_s_type;
            IMMB_U: imm_b = imm_u_type;
            IMMB_PCINCR: imm_b = (is_compressed_i && (~data_misaligned_i)) ? 32'h2 : 32'h4;
            IMMB_S2: imm_b = imm_s2_type;
            IMMB_BI: imm_b = imm_bi_type;
            IMMB_S3: imm_b = imm_s3_type;
            IMMB_VS: imm_b = imm_vs_type;
            IMMB_VU: imm_b = imm_vu_type;
            IMMB_UJ: imm_b = imm_uj_type;
            IMMB_SB: imm_b = imm_sb_type;
            default: imm_b = imm_i_type;
        endcase
    end
end
always @(*) begin
    begin :alu_operand_b_mux
        case (alu_op_b_mux_sel)
            OP_B_REGB_OR_FWD: operand_b = regfile_data_rb_id;
            OP_B_IMM: operand_b = imm_b;
            default: operand_b = regfile_data_rb_id;
        endcase
    end
end
always @(*) begin
    if(dbg_reg_wreq_i) begin
        regfile_wdata_mux = dbg_reg_wdata_i;
        regfile_waddr_mux = dbg_reg_waddr_i;
        regfile_we_mux = 1'b1;
    end else begin
        regfile_we_mux = regfile_we;
        regfile_waddr_mux = regfile_alu_waddr_id;
        if(select_data_rf == RF_LSU) begin
            regfile_wdata_mux = regfile_wdata_lsu_i;
        end else if(csr_access) begin
            regfile_wdata_mux = csr_rdata_i;
        end else begin
            regfile_wdata_mux = regfile_wdata_ex_i;
        end
    end
end
always @(posedge clk or negedge rst_n) begin
    begin :EX_WB_Pipeline_Register
        if(~rst_n) begin
            id_wb_fsm_cs <= IDLE;
            branch_set_q <= 1'b0;
        end else begin
            id_wb_fsm_cs <= id_wb_fsm_ns;
            branch_set_q <= branch_set_n;
        end
    end
end
always @(*) begin
    id_wb_fsm_ns = id_wb_fsm_cs;
    regfile_we = regfile_we_id;
    load_stall = 1'b0;
    multdiv_stall = 1'b0;
    jump_stall = 1'b0;
    branch_stall = 1'b0;
    select_data_rf = RF_EX;
    instr_multicyle = 1'b0;
    branch_set_n = 1'b0;
    branch_mux_dec = 1'b0;
    jump_set = 1'b0;
    jump_mux_dec = 1'b0;
    perf_branch_o = 1'b0;
    case (id_wb_fsm_cs)
        IDLE: begin
            jump_mux_dec = 1'b1;
            branch_mux_dec = 1'b1;
            case (1'b1)
                data_req_id: begin
                    regfile_we = 1'b0;
                    id_wb_fsm_ns = WAIT_MULTICYCLE;
                    load_stall = 1'b1;
                    instr_multicyle = 1'b1;
                end
                branch_in_id: begin
                    id_wb_fsm_ns = branch_decision_i ? WAIT_MULTICYCLE : IDLE;
                    branch_stall = branch_decision_i;
                    instr_multicyle = branch_decision_i;
                    branch_set_n = branch_decision_i;
                    perf_branch_o = 1'b1;
                end
                multdiv_int_en: begin
                    regfile_we = 1'b0;
                    id_wb_fsm_ns = WAIT_MULTICYCLE;
                    multdiv_stall = 1'b1;
                    instr_multicyle = 1'b1;
                end
                jump_in_id: begin
                    regfile_we = 1'b0;
                    id_wb_fsm_ns = WAIT_MULTICYCLE;
                    jump_stall = 1'b1;
                    instr_multicyle = 1'b1;
                    jump_set = 1'b1;
                end
                default: ;            endcase
        end
        WAIT_MULTICYCLE: if(ex_ready_i) begin
            regfile_we = regfile_we_id;
            id_wb_fsm_ns = IDLE;
            load_stall = 1'b0;
            multdiv_stall = 1'b0;
            select_data_rf = data_req_id ? RF_LSU : RF_EX;
        end else begin
            regfile_we = 1'b0;
            instr_multicyle = 1'b1;
            case (1'b1)
                data_req_id: load_stall = 1'b1;
                multdiv_int_en: multdiv_stall = 1'b1;
                default: ;            endcase
        end
        default: ;    endcase
end
endmodule

