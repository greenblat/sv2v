module zeroriscy_cs_registers #( parameter N_EXT_CNT = 0) (
    input [23:0] boot_addr_i
    ,input  branch_i
    ,input  branch_taken_i
    ,input  clk
    ,input [5:0] cluster_id_i
    ,input [3:0] core_id_i
    ,input  csr_access_i
    ,input [11:0] csr_addr_i
    ,input [5:0] csr_cause_i
    ,input [1:0] csr_op_i
    ,output reg [31:0] csr_rdata_o
    ,input  csr_restore_mret_i
    ,input  csr_save_cause_i
    ,input  csr_save_id_i
    ,input  csr_save_if_i
    ,input [31:0] csr_wdata_i
    ,input [(N_EXT_CNT - 1):0] ext_counters_i
    ,input  id_valid_i
    ,input  if_valid_i
    ,input  imiss_i
    ,input  is_compressed_i
    ,input  is_decoding_i
    ,input  jump_i
    ,output  m_irq_enable_o
    ,input  mem_load_i
    ,input  mem_store_i
    ,output [31:0] mepc_o
    ,input [31:0] pc_id_i
    ,input [31:0] pc_if_i
    ,input  pc_set_i
    ,input  rst_n
);
localparam CSR_OP_CLEAR = 2'b11;
localparam N_PERF_REGS = 1;
localparam CSR_OP_WRITE = 2'b01;
localparam N_PERF_COUNTERS = (11 + N_EXT_CNT);
localparam CSR_OP_SET = 2'b10;
localparam PRIV_LVL_M = 2'b11;
localparam CSR_OP_NONE = 2'b00;
reg [1:0] PCMR_q;
wire [(N_PERF_COUNTERS - 1):0] PCCR_inc;
reg [4:0] pccr_index;
reg [31:0] mepc_q;
reg [1:0] PCMR_n;
reg [31:0] perf_rdata;
reg  is_pccr;
reg [5:0] mcause_n;
reg [3:0] mstatus_q;
reg [31:0] mepc_n;
reg [(N_PERF_COUNTERS - 1):0] PCCR_inc_q;
reg [31:0] csr_rdata_int;
reg [(N_PERF_REGS - 1):0] [31:0] PCCR_n;
reg [3:0] mstatus_n;
reg  pccr_all_sel;
reg [(N_PERF_COUNTERS - 1):0] PCER_n;
reg [(N_PERF_REGS - 1):0] [31:0] PCCR_q;
reg [5:0] mcause_q;
reg  csr_we_int;
reg [(N_PERF_COUNTERS - 1):0] PCER_q;
reg [31:0] i;
reg  is_pcmr;
wire [(N_PERF_COUNTERS - 1):0] PCCR_in;
reg  id_valid_q;
reg  is_pcer;
reg [31:0] csr_wdata_int;
assign   m_irq_enable_o = mstatus_q[3:3];
assign   mepc_o = mepc_q;
assign   PCCR_in[0] = 1'b1;
assign   PCCR_in[1] = if_valid_i;
assign   PCCR_in[2] = 1'b0;
assign   PCCR_in[3] = 1'b0;
assign   PCCR_in[4] = imiss_i & (~pc_set_i);
assign   PCCR_in[5] = mem_load_i;
assign   PCCR_in[6] = mem_store_i;
assign   PCCR_in[7] = jump_i;
assign   PCCR_in[8] = branch_i;
assign   PCCR_in[9] = branch_taken_i;
assign   PCCR_in[10] = (id_valid_i & is_decoding_i) & is_compressed_i;
assign   PCCR_inc[0] = (|(PCCR_in & PCER_q)) & PCMR_q[0];
generate
    genvar gi ;

    for(gi=0;gi < N_EXT_CNT;gi=gi + 1)begin
        begin :g_extcounters
assign PCCR_in[((N_PERF_COUNTERS - N_EXT_CNT) + gi)] = ext_counters_i[gi];
        end
    end

endgenerate
always @(*) begin
    csr_rdata_int = 32'd0;
    case (csr_addr_i)
        12'h300: csr_rdata_int = {19'b0, mstatus_q[1:0], 3'b0, mstatus_q[2:2], 3'h0, mstatus_q[3:3], 3'h0};
        12'h305: csr_rdata_int = {boot_addr_i, 8'h0};
        12'h341: csr_rdata_int = mepc_q;
        12'h342: csr_rdata_int = {mcause_q[5], 26'b0, mcause_q[4:0]};
        12'hF14: csr_rdata_int = {21'b0, cluster_id_i[5:0], 1'b0, core_id_i[3:0]};
        default: ;    endcase
end
always @(*) begin
    mepc_n = mepc_q;
    mstatus_n = mstatus_q;
    mcause_n = mcause_q;
    case (csr_addr_i)
        12'h300: if(csr_we_int) begin
            mstatus_n = {csr_wdata_int[3], csr_wdata_int[7], PRIV_LVL_M};
        end
        12'h341: if(csr_we_int) begin
            mepc_n = csr_wdata_int;
        end
        12'h342: if(csr_we_int) begin
            mcause_n = {csr_wdata_int[31], csr_wdata_int[4:0]};
        end
        default: ;    endcase
    case (1'b1)
        csr_save_cause_i: begin
            case (1'b1)
                csr_save_if_i: mepc_n = pc_if_i;
                csr_save_id_i: mepc_n = pc_id_i;
                default: ;            endcase
            mstatus_n[2:2] = mstatus_q[3:3];
            mstatus_n[3:3] = 1'b0;
            mcause_n = csr_cause_i;
        end
        csr_restore_mret_i: begin
            mstatus_n[3:3] = mstatus_q[2:2];
            mstatus_n[2:2] = 1'b1;
        end
        default: ;    endcase
end
always @(*) begin
    csr_wdata_int = csr_wdata_i;
    csr_we_int = 1'b1;
    case (csr_op_i)
        CSR_OP_WRITE: csr_wdata_int = csr_wdata_i;
        CSR_OP_SET: csr_wdata_int = csr_wdata_i | csr_rdata_o;
        CSR_OP_CLEAR: csr_wdata_int = (~csr_wdata_i) & csr_rdata_o;
        CSR_OP_NONE: begin
            csr_wdata_int = csr_wdata_i;
            csr_we_int = 1'b0;
        end
        default: ;    endcase
end
always @(*) begin
    csr_rdata_o = csr_rdata_int;
    if((is_pccr || is_pcer) || is_pcmr) begin
        csr_rdata_o = perf_rdata;
    end
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        mstatus_q <= {1'b0, 1'b0, PRIV_LVL_M};
        mepc_q <= 32'd0;
        mcause_q <= 32'd0;
    end else begin
        mstatus_q <= {mstatus_n[3:3], mstatus_n[2:2], PRIV_LVL_M};
        mepc_q <= mepc_n;
        mcause_q <= mcause_n;
    end
end
always @(*) begin
    is_pccr = 1'b0;
    is_pcmr = 1'b0;
    is_pcer = 1'b0;
    pccr_all_sel = 1'b0;
    pccr_index = 32'd0;
    perf_rdata = 32'd0;
    if(csr_access_i) begin
        case (csr_addr_i)
            12'h7A0: begin
                is_pcer = 1'b1;
                perf_rdata[15:0] = PCER_q;
            end
            12'h7A1: begin
                is_pcmr = 1'b1;
                perf_rdata[1:0] = PCMR_q;
            end
            12'h79F: begin
                is_pccr = 1'b1;
                pccr_all_sel = 1'b1;
            end
            default: ;        endcase
        if(csr_addr_i[11:5] == 7'b0111100) begin
            is_pccr = 1'b1;
            pccr_index = csr_addr_i[4:0];
            perf_rdata = PCCR_q[0];
        end
    end
end
always @(*) begin
    PCCR_n[0] = PCCR_q[0];
    if(PCCR_inc_q[0] && ((PCCR_q[0] != 32'hFFFFFFFF) || (~PCMR_q[1]))) begin
        PCCR_n[0] = PCCR_q[0] + 1;
    end
    if(is_pccr) begin
        case (csr_op_i)
            CSR_OP_WRITE: PCCR_n[0] = csr_wdata_i;
            CSR_OP_SET: PCCR_n[0] = csr_wdata_i | PCCR_q[0];
            CSR_OP_CLEAR: PCCR_n[0] = csr_wdata_i & (~PCCR_q[0]);
        endcase
    end
end
always @(*) begin
    PCMR_n = PCMR_q;
    PCER_n = PCER_q;
    if(is_pcmr) begin
        case (csr_op_i)
            CSR_OP_WRITE: PCMR_n = csr_wdata_i[1:0];
            CSR_OP_SET: PCMR_n = csr_wdata_i[1:0] | PCMR_q;
            CSR_OP_CLEAR: PCMR_n = csr_wdata_i[1:0] & (~PCMR_q);
        endcase
    end
    if(is_pcer) begin
        case (csr_op_i)
            CSR_OP_WRITE: PCER_n = csr_wdata_i[(N_PERF_COUNTERS - 1):0];
            CSR_OP_SET: PCER_n = csr_wdata_i[(N_PERF_COUNTERS - 1):0] | PCER_q;
            CSR_OP_CLEAR: PCER_n = csr_wdata_i[(N_PERF_COUNTERS - 1):0] & (~PCER_q);
        endcase
    end
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        id_valid_q <= 1'b0;
        PCER_q <= 32'd0;
        PCMR_q <= 2'h3;
        for(i=0;i < N_PERF_REGS;i=i + 1)begin
            PCCR_q[i] <= 32'd0;
            PCCR_inc_q[i] <= 32'd0;
        end
    end else begin
        id_valid_q <= id_valid_i;
        PCER_q <= PCER_n;
        PCMR_q <= PCMR_n;
        for(i=0;i < N_PERF_REGS;i=i + 1)begin
            PCCR_q[i] <= PCCR_n[i];
            PCCR_inc_q[i] <= PCCR_inc[i];
        end
    end
end
endmodule

