module zeroriscy_compressed_decoder(
    output reg  illegal_instr_o
    ,input [31:0] instr_i
    ,output reg [31:0] instr_o
    ,output  is_compressed_o
);
localparam OPCODE_JAL = 7'h6f;
localparam OPCODE_OP = 7'h33;
localparam OPCODE_STORE = 7'h23;
localparam OPCODE_LOAD = 7'h03;
localparam OPCODE_LUI = 7'h37;
localparam OPCODE_JALR = 7'h67;
localparam OPCODE_BRANCH = 7'h63;
localparam OPCODE_OPIMM = 7'h13;
assign   is_compressed_o = instr_i[1:0] != 2'b11;
always @(*) begin
    illegal_instr_o = 1'b0;
    instr_o = 32'd0;
    case (instr_i[1:0])
        2'b00: case (instr_i[15:13])
            3'b000: begin
                instr_o = {2'b0, instr_i[10:7], instr_i[12:11], instr_i[5], instr_i[6], 2'b00, 5'h02, 3'b000, 2'b01, instr_i[4:2], OPCODE_OPIMM};
                if(instr_i[12:5] == 8'b0) begin
                    illegal_instr_o = 1'b1;
                end
            end
            3'b010: instr_o = {5'b0, instr_i[5], instr_i[12:10], instr_i[6], 2'b00, 2'b01, instr_i[9:7], 3'b010, 2'b01, instr_i[4:2], OPCODE_LOAD};
            3'b110: instr_o = {5'b0, instr_i[5], instr_i[12], 2'b01, instr_i[4:2], 2'b01, instr_i[9:7], 3'b010, instr_i[11:10], instr_i[6], 2'b00, OPCODE_STORE};
            default: illegal_instr_o = 1'b1;
        endcase
        2'b01: case (instr_i[15:13])
            3'b000: instr_o = {{ 6 { instr_i[12:12] }}, instr_i[12], instr_i[6:2], instr_i[11:7], 3'b0, instr_i[11:7], OPCODE_OPIMM};
            3'b001,3'b101: instr_o = {instr_i[12], instr_i[8], instr_i[10:9], instr_i[6], instr_i[7], instr_i[2], instr_i[11], instr_i[5:3], { 9 { instr_i[12:12] }}, 4'b0, (~instr_i[15]), OPCODE_JAL};
            3'b010: begin
                instr_o = {{ 6 { instr_i[12:12] }}, instr_i[12], instr_i[6:2], 5'b0, 3'b0, instr_i[11:7], OPCODE_OPIMM};
                if(instr_i[11:7] == 5'b0) begin
                    illegal_instr_o = 1'b1;
                end
            end
            3'b011: begin
                instr_o = {{ 15 { instr_i[12:12] }}, instr_i[6:2], instr_i[11:7], OPCODE_LUI};
                if(instr_i[11:7] == 5'h02) begin
                    instr_o = {{ 3 { instr_i[12:12] }}, instr_i[4:3], instr_i[5], instr_i[2], instr_i[6], 4'b0, 5'h02, 3'b000, 5'h02, OPCODE_OPIMM};
                end else if(instr_i[11:7] == 5'b0) begin
                    illegal_instr_o = 1'b1;
                end
                if({instr_i[12], instr_i[6:2]} == 6'b0) begin
                    illegal_instr_o = 1'b1;
                end
            end
            3'b100: case (instr_i[11:10])
                2'b00,2'b01: begin
                    instr_o = {1'b0, instr_i[10], 5'b0, instr_i[6:2], 2'b01, instr_i[9:7], 3'b101, 2'b01, instr_i[9:7], OPCODE_OPIMM};
                    if(instr_i[12]) begin
                        illegal_instr_o = 1'b1;
                    end
                    if(instr_i[6:2] == 5'b0) begin
                        illegal_instr_o = 1'b1;
                    end
                end
                2'b10: instr_o = {{ 6 { instr_i[12:12] }}, instr_i[12], instr_i[6:2], 2'b01, instr_i[9:7], 3'b111, 2'b01, instr_i[9:7], OPCODE_OPIMM};
                2'b11: case ({instr_i[12], instr_i[6:5]})
                    3'b000: instr_o = {2'b01, 5'b0, 2'b01, instr_i[4:2], 2'b01, instr_i[9:7], 3'b000, 2'b01, instr_i[9:7], OPCODE_OP};
                    3'b001: instr_o = {7'b0, 2'b01, instr_i[4:2], 2'b01, instr_i[9:7], 3'b100, 2'b01, instr_i[9:7], OPCODE_OP};
                    3'b010: instr_o = {7'b0, 2'b01, instr_i[4:2], 2'b01, instr_i[9:7], 3'b110, 2'b01, instr_i[9:7], OPCODE_OP};
                    3'b011: instr_o = {7'b0, 2'b01, instr_i[4:2], 2'b01, instr_i[9:7], 3'b111, 2'b01, instr_i[9:7], OPCODE_OP};
                    3'b100,3'b101,3'b110,3'b111: illegal_instr_o = 1'b1;
                endcase
            endcase
            3'b110,3'b111: instr_o = {{ 4 { instr_i[12:12] }}, instr_i[6:5], instr_i[2], 5'b0, 2'b01, instr_i[9:7], 2'b00, instr_i[13], instr_i[11:10], instr_i[4:3], instr_i[12], OPCODE_BRANCH};
            default: illegal_instr_o = 1'b1;
        endcase
        2'b10: case (instr_i[15:13])
            3'b000: begin
                instr_o = {7'b0, instr_i[6:2], instr_i[11:7], 3'b001, instr_i[11:7], OPCODE_OPIMM};
                if(instr_i[11:7] == 5'b0) begin
                    illegal_instr_o = 1'b1;
                end
                if(instr_i[12] || (instr_i[6:2] == 5'b0)) begin
                    illegal_instr_o = 1'b1;
                end
            end
            3'b010: begin
                instr_o = {4'b0, instr_i[3:2], instr_i[12], instr_i[6:4], 2'b00, 5'h02, 3'b010, instr_i[11:7], OPCODE_LOAD};
                if(instr_i[11:7] == 5'b0) begin
                    illegal_instr_o = 1'b1;
                end
            end
            3'b100: if(~instr_i[12]) begin
                instr_o = {7'b0, instr_i[6:2], 5'b0, 3'b0, instr_i[11:7], OPCODE_OP};
                if(instr_i[6:2] == 5'b0) begin
                    instr_o = {12'b0, instr_i[11:7], 3'b0, 5'b0, OPCODE_JALR};
                end
            end else begin
                instr_o = {7'b0, instr_i[6:2], instr_i[11:7], 3'b0, instr_i[11:7], OPCODE_OP};
                if(instr_i[11:7] == 5'b0) begin
                    instr_o = {32'h00_10_00_73};
                    if(instr_i[6:2] != 5'b0) begin
                        illegal_instr_o = 1'b1;
                    end
                end else if(instr_i[6:2] == 5'b0) begin
                    instr_o = {12'b0, instr_i[11:7], 3'b000, 5'b00001, OPCODE_JALR};
                end
            end
            3'b110: instr_o = {4'b0, instr_i[8:7], instr_i[12], instr_i[6:2], 5'h02, 3'b010, instr_i[11:9], 2'b00, OPCODE_STORE};
            default: illegal_instr_o = 1'b1;
        endcase
        default: instr_o = instr_i;
    endcase
end
endmodule

