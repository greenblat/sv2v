module zeroriscy_multdiv_slow(
    input [33:0] alu_adder_ext_i
    ,input [31:0] alu_adder_i
    ,output reg [32:0] alu_operand_a_o
    ,output reg [32:0] alu_operand_b_o
    ,input  clk
    ,input  div_en_i
    ,input  equal_to_zero
    ,input  mult_en_i
    ,output reg [31:0] multdiv_result_o
    ,input [31:0] op_a_i
    ,input [31:0] op_b_i
    ,input [1:0] operator_i
    ,output  ready_o
    ,input  rst_n
    ,input [1:0] signed_mode_i
);
localparam MD_LAST = 4;
localparam MD_FINISH = 6;
localparam MD_COMP = 3;
localparam MD_OP_MULH = 2'b01;
localparam MD_IDLE = 0;
localparam MD_CHANGE_SIGN = 5;
localparam MD_OP_MULL = 2'b00;
localparam MD_ABS_B = 2;
localparam MD_ABS_A = 1;
localparam MD_OP_DIV = 2'b10;
reg [32:0] accum_window_q;
wire [32:0] res_adder_h;
wire  rem_change_sign;
wire  div_change_sign;
wire [32:0] res_adder_l;
wire [32:0] one_shift;
wire [32:0] op_remainder;
wire [32:0] op_b_ext;
reg  is_greater_equal;
wire [31:0] b_0;
wire [32:0] op_a_ext;
wire [32:0] next_reminder;
reg [32:0] op_b_shift_q;
wire [32:0] next_quotient;
reg [31:0] op_numerator_q;
wire  sign_a;
wire  sign_b;
wire [32:0] op_a_bw_last_pp;
reg [32:0] op_a_shift_q;
wire [4:0] multdiv_state_n;
wire [32:0] op_a_bw_pp;
reg [4:0] multdiv_state_q;
reg [2:0] curr_state_q;
assign   res_adder_l = alu_adder_ext_i[32:0];
assign   res_adder_h = alu_adder_ext_i[33:1];
assign   one_shift = {32'b0, 1'b1} << multdiv_state_q;
assign   next_reminder = is_greater_equal ? res_adder_h : op_remainder;
assign   next_quotient = is_greater_equal ? (op_a_shift_q | one_shift) : op_a_shift_q;
assign   b_0 = { 32 { op_b_shift_q[0:0] }};
assign   op_a_bw_pp = {(~(op_a_shift_q[32] & op_b_shift_q[0])), (op_a_shift_q[31:0] & b_0)};
assign   op_a_bw_last_pp = {(op_a_shift_q[32] & op_b_shift_q[0]), (~(op_a_shift_q[31:0] & b_0))};
assign   sign_a = op_a_i[31] & signed_mode_i[0];
assign   sign_b = op_b_i[31] & signed_mode_i[1];
assign   op_a_ext = {sign_a, op_a_i};
assign   op_b_ext = {sign_b, op_b_i};
assign   op_remainder = accum_window_q[32:0];
assign   multdiv_state_n = multdiv_state_q - 1;
assign   div_change_sign = sign_a ^ sign_b;
assign   rem_change_sign = sign_a;
assign   ready_o = (curr_state_q == MD_FINISH) | ((curr_state_q == MD_LAST) & ((operator_i == MD_OP_MULL) | (operator_i == MD_OP_MULH)));
always @(*) begin
    alu_operand_a_o = accum_window_q;
    multdiv_result_o = div_en_i ? accum_window_q[31:0] : res_adder_l;
    case (operator_i)
        MD_OP_MULL: alu_operand_b_o = op_a_bw_pp;
        MD_OP_MULH: if(curr_state_q == MD_LAST) begin
            alu_operand_b_o = op_a_bw_last_pp;
        end else begin
            alu_operand_b_o = op_a_bw_pp;
        end
        default: case (curr_state_q)
            MD_IDLE: begin
                alu_operand_a_o = {32'h0, 1'b1};
                alu_operand_b_o = {(~op_b_i), 1'b1};
            end
            MD_ABS_A: begin
                alu_operand_a_o = {32'h0, 1'b1};
                alu_operand_b_o = {(~op_a_i), 1'b1};
            end
            MD_ABS_B: begin
                alu_operand_a_o = {32'h0, 1'b1};
                alu_operand_b_o = {(~op_b_i), 1'b1};
            end
            MD_CHANGE_SIGN: begin
                alu_operand_a_o = {32'h0, 1'b1};
                alu_operand_b_o = {(~accum_window_q[31:0]), 1'b1};
            end
            default: begin
                alu_operand_a_o = {accum_window_q[31:0], 1'b1};
                alu_operand_b_o = {(~op_b_shift_q[31:0]), 1'b1};
            end
        endcase
    endcase
end
always @(*) begin
    if(~(accum_window_q[31] ^ op_b_shift_q[31])) begin
        is_greater_equal = ~res_adder_h[31];
    end else begin
        is_greater_equal = accum_window_q[31];
    end
end
always @(posedge clk or negedge rst_n) begin
    begin :proc_multdiv_state_q
        if(~rst_n) begin
            multdiv_state_q <= 32'd0;
            accum_window_q <= 32'd0;
            op_b_shift_q <= 32'd0;
            op_a_shift_q <= 32'd0;
            curr_state_q <= MD_IDLE;
            op_numerator_q <= 32'd0;
        end else begin
            if(mult_en_i | div_en_i) begin
                case (curr_state_q)
                    MD_IDLE: begin
                        case (operator_i)
                            MD_OP_MULL: begin
                                op_a_shift_q <= op_a_ext << 1;
                                accum_window_q <= {(~(op_a_ext[32] & op_b_i[0])), (op_a_ext[31:0] & { 32 { op_b_i[0:0] }})};
                                op_b_shift_q <= op_b_ext >> 1;
                                curr_state_q <= MD_COMP;
                            end
                            MD_OP_MULH: begin
                                op_a_shift_q <= op_a_ext;
                                accum_window_q <= {1'b1, (~(op_a_ext[32] & op_b_i[0])), (op_a_ext[31:1] & { 31 { op_b_i[0:0] }})};
                                op_b_shift_q <= op_b_ext >> 1;
                                curr_state_q <= MD_COMP;
                            end
                            MD_OP_DIV: begin
                                accum_window_q <= 32'd1;
                                curr_state_q <= equal_to_zero ? MD_FINISH : MD_ABS_A;
                            end
                            default: begin
                                accum_window_q <= op_a_ext;
                                curr_state_q <= equal_to_zero ? MD_FINISH : MD_ABS_A;
                            end
                        endcase
                        multdiv_state_q <= 5'd31;
                    end
                    MD_ABS_A: begin
                        op_a_shift_q <= 32'd0;
                        op_numerator_q <= sign_a ? alu_adder_i : op_a_i;
                        curr_state_q <= MD_ABS_B;
                    end
                    MD_ABS_B: begin
                        accum_window_q <= {32'h0, op_numerator_q[31]};
                        op_b_shift_q <= sign_b ? alu_adder_i : op_b_i;
                        curr_state_q <= MD_COMP;
                    end
                    MD_COMP: begin
                        multdiv_state_q <= multdiv_state_n;
                        case (operator_i)
                            MD_OP_MULL: begin
                                accum_window_q <= res_adder_l;
                                op_a_shift_q <= op_a_shift_q << 1;
                                op_b_shift_q <= op_b_shift_q >> 1;
                            end
                            MD_OP_MULH: begin
                                accum_window_q <= res_adder_h;
                                op_a_shift_q <= op_a_shift_q;
                                op_b_shift_q <= op_b_shift_q >> 1;
                            end
                            default: begin
                                accum_window_q <= {next_reminder[31:0], op_numerator_q[multdiv_state_n]};
                                op_a_shift_q <= next_quotient;
                            end
                        endcase
                        if(multdiv_state_q == 5'd1) begin
                            curr_state_q <= MD_LAST;
                        end else begin
                            curr_state_q <= MD_COMP;
                        end
                    end
                    MD_LAST: case (operator_i)
                        MD_OP_MULL: begin
                            accum_window_q <= res_adder_l;
                            curr_state_q <= MD_IDLE;
                        end
                        MD_OP_MULH: begin
                            accum_window_q <= res_adder_l;
                            curr_state_q <= MD_IDLE;
                        end
                        MD_OP_DIV: begin
                            accum_window_q <= next_quotient;
                            curr_state_q <= MD_CHANGE_SIGN;
                        end
                        default: begin
                            accum_window_q <= {1'b0, next_reminder[31:0]};
                            curr_state_q <= MD_CHANGE_SIGN;
                        end
                    endcase
                    MD_CHANGE_SIGN: begin
                        curr_state_q <= MD_FINISH;
                        case (operator_i)
                            MD_OP_DIV: accum_window_q <= div_change_sign ? alu_adder_i : accum_window_q;
                            default: accum_window_q <= rem_change_sign ? alu_adder_i : accum_window_q;
                        endcase
                    end
                    MD_FINISH: curr_state_q <= MD_IDLE;
                    default: ;                endcase
            end
        end
    end
end
endmodule

