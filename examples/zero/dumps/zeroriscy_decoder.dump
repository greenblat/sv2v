module zeroriscy_decoder
    parameter RV32M 1
    net data_req_o ('output', 0)
    net csr_access_o ('output reg', 0)
    net div_int_en_o ('output', 0)
    net csr_status_o ('output reg', 0)
    net data_reg_offset_o ('output reg', (1, 0))
    net regfile_we ('reg', 0)
    net data_sign_extension_o ('output reg', 0)
    net csr_illegal ('reg', 0)
    net illegal_insn_o ('output reg', 0)
    net jump_in_id_o ('output', 0)
    net regfile_we_o ('output', 0)
    net pipe_flush_o ('output reg', 0)
    net jump_in_id ('reg', 0)
    net imm_b_mux_sel_o ('output reg', (3, 0))
    net ecall_insn_o ('output reg', 0)
    net data_type_o ('output reg', (1, 0))
    net data_we_o ('output reg', 0)
    net div_int_en ('reg', 0)
    net mult_int_en ('reg', 0)
    net csr_op ('reg', (1, 0))
    net deassert_we_i ('input', 0)
    net alu_operator_o ('output reg', (['-', 'ALU_OP_WIDTH', 1], 0))
    net branch_in_id_o ('output', 0)
    net data_load_event_o ('output reg', 0)
    net mult_int_en_o ('output', 0)
    net jump_mux_i ('input', 0)
    net multdiv_signed_mode_o ('output reg', (1, 0))
    net ebrk_insn_o ('output reg', 0)
    net data_misaligned_i ('input', 0)
    net branch_mux_i ('input', 0)
    net instr_rdata_i ('input', (31, 0))
    net illegal_c_insn_i ('input', 0)
    net alu_op_b_mux_sel_o ('output reg', (2, 0))
    net mret_insn_o ('output reg', 0)
    net branch_in_id ('reg', 0)
    net imm_a_mux_sel_o ('output reg', (0, 0))
    net csr_op_o ('output', (1, 0))
    net data_req ('reg', 0)
    net alu_op_a_mux_sel_o ('output reg', (2, 0))
    net multdiv_operator_o ('output reg', (1, 0))
    assign ('regfile_we_o', ['question', 'deassert_we_i', ['bin', '1', '0'], 'regfile_we'], '', '')
    assign ('mult_int_en_o', ['question', 'RV32M', ['question', 'deassert_we_i', ['bin', '1', '0'], 'mult_int_en'], ['bin', '1', '0']], '', '')
    assign ('div_int_en_o', ['question', 'RV32M', ['question', 'deassert_we_i', ['bin', '1', '0'], 'div_int_en'], ['bin', '1', '0']], '', '')
    assign ('data_req_o', ['question', 'deassert_we_i', ['bin', '1', '0'], 'data_req'], '', '')
    assign ('csr_op_o', ['question', 'deassert_we_i', 'CSR_OP_NONE', 'csr_op'], '', '')
    assign ('jump_in_id_o', ['question', 'deassert_we_i', ['bin', '1', '0'], 'jump_in_id'], '', '')
    assign ('branch_in_id_o', ['question', 'deassert_we_i', ['bin', '1', '0'], 'branch_in_id'], '', '')
    always ['*', ['list', ['=', 'jump_in_id', ['bin', '1', '0']], ['=', 'branch_in_id', ['bin', '1', '0']], ['=', 'alu_operator_o', 'ALU_SLTU'], ['=', 'alu_op_a_mux_sel_o', 'OP_A_REGA_OR_FWD'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_REGB_OR_FWD'], ['=', 'imm_a_mux_sel_o', 'IMMA_ZERO'], ['=', 'imm_b_mux_sel_o', 'IMMB_I'], ['=', 'mult_int_en', ['bin', '1', '0']], ['=', 'div_int_en', ['bin', '1', '0']], ['=', 'multdiv_operator_o', 'MD_OP_MULL'], ['=', 'multdiv_signed_mode_o', ['bin', '2', '00']], ['=', 'regfile_we', ['bin', '1', '0']], ['=', 'csr_access_o', ['bin', '1', '0']], ['=', 'csr_status_o', ['bin', '1', '0']], ['=', 'csr_illegal', ['bin', '1', '0']], ['=', 'csr_op', 'CSR_OP_NONE'], ['=', 'data_we_o', ['bin', '1', '0']], ['=', 'data_type_o', ['bin', '2', '00']], ['=', 'data_sign_extension_o', ['bin', '1', '0']], ['=', 'data_reg_offset_o', ['bin', '2', '00']], ['=', 'data_req', ['bin', '1', '0']], ['=', 'data_load_event_o', ['bin', '1', '0']], ['=', 'illegal_insn_o', ['bin', '1', '0']], ['=', 'ebrk_insn_o', ['bin', '1', '0']], ['=', 'mret_insn_o', ['bin', '1', '0']], ['=', 'ecall_insn_o', ['bin', '1', '0']], ['=', 'pipe_flush_o', ['bin', '1', '0']], ['case', ['subbus', 'instr_rdata_i', (6, 0)], [[['OPCODE_JAL'], ['list', ['=', 'jump_in_id', ['bin', '1', '1']], ['ifelse', 'jump_mux_i', ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_CURRPC'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_UJ'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '0']]], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_CURRPC'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_PCINCR'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '1']]]]]], [['OPCODE_JALR'], ['list', ['=', 'jump_in_id', ['bin', '1', '1']], ['ifelse', 'jump_mux_i', ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_REGA_OR_FWD'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_I'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '0']]], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_CURRPC'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_PCINCR'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '1']]]], ['if', ['!=', ['subbus', 'instr_rdata_i', [14, 12]], ['bin', '3', '0']], ['list', ['=', 'jump_in_id', ['bin', '1', '0']], ['=', 'regfile_we', ['bin', '1', '0']], ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]], [['OPCODE_BRANCH'], ['list', ['=', 'branch_in_id', ['bin', '1', '1']], ['ifelse', 'branch_mux_i', ['list', ['case', ['subbus', 'instr_rdata_i', (14, 12)], [[[['bin', '3', '000']], ['=', 'alu_operator_o', 'ALU_EQ']], [[['bin', '3', '001']], ['=', 'alu_operator_o', 'ALU_NE']], [[['bin', '3', '100']], ['=', 'alu_operator_o', 'ALU_LTS']], [[['bin', '3', '101']], ['=', 'alu_operator_o', 'ALU_GES']], [[['bin', '3', '110']], ['=', 'alu_operator_o', 'ALU_LTU']], [[['bin', '3', '111']], ['=', 'alu_operator_o', 'ALU_GEU']], ['default', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_CURRPC'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_SB'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '0']]]]]], [['OPCODE_STORE'], ['list', ['=', 'data_req', ['bin', '1', '1']], ['=', 'data_we_o', ['bin', '1', '1']], ['=', 'alu_operator_o', 'ALU_ADD'], ['ifelse', ['~', ['subbit', 'instr_rdata_i', 14]], ['list', ['=', 'imm_b_mux_sel_o', 'IMMB_S'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM']], ['list', ['=', 'data_req', ['bin', '1', '0']], ['=', 'data_we_o', ['bin', '1', '0']], ['=', 'illegal_insn_o', ['bin', '1', '1']]]], ['case', ['subbus', 'instr_rdata_i', (13, 12)], [[[['bin', '2', '00']], ['=', 'data_type_o', ['bin', '2', '10']]], [[['bin', '2', '01']], ['=', 'data_type_o', ['bin', '2', '01']]], [[['bin', '2', '10']], ['=', 'data_type_o', ['bin', '2', '00']]], ['default', ['list', ['=', 'data_req', ['bin', '1', '0']], ['=', 'data_we_o', ['bin', '1', '0']], ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]]], [['OPCODE_LOAD'], ['list', ['=', 'data_req', ['bin', '1', '1']], ['=', 'regfile_we', ['bin', '1', '1']], ['=', 'data_type_o', ['bin', '2', '00']], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_I'], ['=', 'data_sign_extension_o', ['~', ['subbit', 'instr_rdata_i', 14]]], ['case', ['subbus', 'instr_rdata_i', (13, 12)], [[[['bin', '2', '00']], ['=', 'data_type_o', ['bin', '2', '10']]], [[['bin', '2', '01']], ['=', 'data_type_o', ['bin', '2', '01']]], [[['bin', '2', '10']], ['=', 'data_type_o', ['bin', '2', '00']]], ['default', ['=', 'data_type_o', ['bin', '2', '00']]]]], ['if', ['==', ['subbus', 'instr_rdata_i', [14, 12]], ['bin', '3', '111']], ['list', ['=', 'alu_op_b_mux_sel_o', 'OP_B_REGB_OR_FWD'], ['=', 'data_sign_extension_o', ['~', ['subbit', 'instr_rdata_i', 30]]], ['case', ['subbus', 'instr_rdata_i', (31, 25)], [[[['bin', '7', '0000_000'], ['bin', '7', '0100_000']], ['=', 'data_type_o', ['bin', '2', '10']]], [[['bin', '7', '0001_000'], ['bin', '7', '0101_000']], ['=', 'data_type_o', ['bin', '2', '01']]], [[['bin', '7', '0010_000']], ['=', 'data_type_o', ['bin', '2', '00']]], ['default', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]]], ['if', ['==', ['subbus', 'instr_rdata_i', [14, 12]], ['bin', '3', '110']], ['=', 'data_load_event_o', ['bin', '1', '1']]], ['if', ['==', ['subbus', 'instr_rdata_i', [14, 12]], ['bin', '3', '011']], ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]], [['OPCODE_LUI'], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_IMM'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_a_mux_sel_o', 'IMMA_ZERO'], ['=', 'imm_b_mux_sel_o', 'IMMB_U'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '1']]]], [['OPCODE_AUIPC'], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_CURRPC'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_U'], ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'regfile_we', ['bin', '1', '1']]]], [['OPCODE_OPIMM'], ['list', ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_I'], ['=', 'regfile_we', ['bin', '1', '1']], ['case', ['subbus', 'instr_rdata_i', (14, 12)], [[[['bin', '3', '000']], ['=', 'alu_operator_o', 'ALU_ADD']], [[['bin', '3', '010']], ['=', 'alu_operator_o', 'ALU_SLTS']], [[['bin', '3', '011']], ['=', 'alu_operator_o', 'ALU_SLTU']], [[['bin', '3', '100']], ['=', 'alu_operator_o', 'ALU_XOR']], [[['bin', '3', '110']], ['=', 'alu_operator_o', 'ALU_OR']], [[['bin', '3', '111']], ['=', 'alu_operator_o', 'ALU_AND']], [[['bin', '3', '001']], ['list', ['=', 'alu_operator_o', 'ALU_SLL'], ['if', ['!=', ['subbus', 'instr_rdata_i', [31, 25]], ['bin', '7', '0']], ['=', 'illegal_insn_o', ['bin', '1', '1']]]]], [[['bin', '3', '101']], ['list', ['ifelse', ['==', ['subbus', 'instr_rdata_i', [31, 25]], ['bin', '7', '0']], ['=', 'alu_operator_o', 'ALU_SRL'], ['ifelse', ['==', ['subbus', 'instr_rdata_i', [31, 25]], ['bin', '7', '010_0000']], ['=', 'alu_operator_o', 'ALU_SRA'], ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]], ['default', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]], [['OPCODE_OP'], ['list', ['=', 'regfile_we', ['bin', '1', '1']], ['ifelse', ['subbit', 'instr_rdata_i', 31], ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]], ['list', ['if', ['~', ['subbit', 'instr_rdata_i', 28]], ['case', ['curly', ['subbus', 'instr_rdata_i', (30, 25)], ['subbus', 'instr_rdata_i', (14, 12)]], [[[['curly', ['bin', '6', '00_0000'], ['bin', '3', '000']]], ['=', 'alu_operator_o', 'ALU_ADD']], [[['curly', ['bin', '6', '10_0000'], ['bin', '3', '000']]], ['=', 'alu_operator_o', 'ALU_SUB']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '010']]], ['=', 'alu_operator_o', 'ALU_SLTS']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '011']]], ['=', 'alu_operator_o', 'ALU_SLTU']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '100']]], ['=', 'alu_operator_o', 'ALU_XOR']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '110']]], ['=', 'alu_operator_o', 'ALU_OR']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '111']]], ['=', 'alu_operator_o', 'ALU_AND']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '001']]], ['=', 'alu_operator_o', 'ALU_SLL']], [[['curly', ['bin', '6', '00_0000'], ['bin', '3', '101']]], ['=', 'alu_operator_o', 'ALU_SRL']], [[['curly', ['bin', '6', '10_0000'], ['bin', '3', '101']]], ['=', 'alu_operator_o', 'ALU_SRA']], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '000']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_MULL'], ['=', 'mult_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '00']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '001']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_MULH'], ['=', 'mult_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '11']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '010']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_MULH'], ['=', 'mult_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '01']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '011']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_MULH'], ['=', 'mult_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '00']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '100']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_DIV'], ['=', 'div_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '11']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '101']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_DIV'], ['=', 'div_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '00']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '110']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_REM'], ['=', 'div_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '11']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], [[['curly', ['bin', '6', '00_0001'], ['bin', '3', '111']]], ['list', ['=', 'alu_operator_o', 'ALU_ADD'], ['=', 'multdiv_operator_o', 'MD_OP_REM'], ['=', 'div_int_en', ['bin', '1', '1']], ['=', 'multdiv_signed_mode_o', ['bin', '2', '00']], ['=', 'illegal_insn_o', ['question', 'RV32M', ['bin', '1', '0'], ['bin', '1', '1']]]]], ['default', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]]]]]], [['OPCODE_SYSTEM'], ['list', ['ifelse', ['==', ['subbus', 'instr_rdata_i', [14, 12]], ['bin', '3', '000']], ['list', ['case', ['subbus', 'instr_rdata_i', (31, 20)], [[[['hex', '12', '000']], ['list', ['=', 'ecall_insn_o', ['bin', '1', '1']]]], [[['hex', '12', '001']], ['list', ['=', 'ebrk_insn_o', ['bin', '1', '1']]]], [[['hex', '12', '302']], ['list', ['=', 'mret_insn_o', ['bin', '1', '1']]]], [[['hex', '12', '105']], ['list', ['=', 'pipe_flush_o', ['bin', '1', '1']]]], ['default', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]]], ['list', ['=', 'csr_access_o', ['bin', '1', '1']], ['=', 'regfile_we', ['bin', '1', '1']], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_a_mux_sel_o', 'IMMA_Z'], ['=', 'imm_b_mux_sel_o', 'IMMB_I'], ['ifelse', ['subbit', 'instr_rdata_i', 14], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_IMM']], ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_REGA_OR_FWD']]], ['case', ['subbus', 'instr_rdata_i', (13, 12)], [[[['bin', '2', '01']], ['=', 'csr_op', 'CSR_OP_WRITE']], [[['bin', '2', '10']], ['=', 'csr_op', 'CSR_OP_SET']], [[['bin', '2', '11']], ['=', 'csr_op', 'CSR_OP_CLEAR']], ['default', ['=', 'csr_illegal', ['bin', '1', '1']]]]], ['if', ['~', 'csr_illegal'], ['if', ['==', ['subbus', 'instr_rdata_i', [31, 20]], ['hex', '12', '300']], ['=', 'csr_status_o', ['bin', '1', '1']]]], ['=', 'illegal_insn_o', 'csr_illegal']]]]], ['default', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]]]], ['if', 'illegal_c_insn_i', ['list', ['=', 'illegal_insn_o', ['bin', '1', '1']]]], ['if', 'data_misaligned_i', ['list', ['=', 'alu_op_a_mux_sel_o', 'OP_A_REGA_OR_FWD'], ['=', 'alu_op_b_mux_sel_o', 'OP_B_IMM'], ['=', 'imm_b_mux_sel_o', 'IMMB_PCINCR'], ['=', 'regfile_we', ['bin', '1', '0']]]]], 'always']
endmodule
