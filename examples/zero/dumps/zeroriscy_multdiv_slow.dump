module zeroriscy_multdiv_slow
    net accum_window_q ('reg', (32, 0))
    net res_adder_h ('wire', (32, 0))
    net rem_change_sign ('wire', 0)
    net div_change_sign ('wire', 0)
    net res_adder_l ('wire', (32, 0))
    net one_shift ('wire', (32, 0))
    net op_remainder ('wire', (32, 0))
    net op_b_ext ('wire', (32, 0))
    net is_greater_equal ('reg', 0)
    net b_0 ('wire', (31, 0))
    net op_a_ext ('wire', (32, 0))
    net alu_adder_ext_i ('input', (33, 0))
    net clk ('input', 0)
    net ready_o ('output', 0)
    net next_reminder ('wire', (32, 0))
    net signed_mode_i ('input', (1, 0))
    net equal_to_zero ('input', 0)
    net rst_n ('input', 0)
    net alu_adder_i ('input', (31, 0))
    net op_b_shift_q ('reg', (32, 0))
    net next_quotient ('wire', (32, 0))
    net div_en_i ('input', 0)
    net op_a_i ('input', (31, 0))
    net op_numerator_q ('reg', (31, 0))
    net op_b_i ('input', (31, 0))
    net sign_a ('wire', 0)
    net sign_b ('wire', 0)
    net op_a_bw_last_pp ('wire', (32, 0))
    net multdiv_result_o ('output reg', (31, 0))
    net op_a_shift_q ('reg', (32, 0))
    net multdiv_state_n ('wire', (4, 0))
    net alu_operand_a_o ('output reg', (32, 0))
    net op_a_bw_pp ('wire', (32, 0))
    net operator_i ('input', (1, 0))
    net mult_en_i ('input', 0)
    net alu_operand_b_o ('output reg', (32, 0))
    net multdiv_state_q ('reg', (4, 0))
    net curr_state_q ('reg', (2, 0))
    assign ('res_adder_l', ['subbus', 'alu_adder_ext_i', [32, 0]], '', '')
    assign ('res_adder_h', ['subbus', 'alu_adder_ext_i', [33, 1]], '', '')
    assign ('one_shift', ['<<', ['curly', ['bin', '32', '0'], ['bin', '1', '1']], 'multdiv_state_q'], '', '')
    assign ('next_reminder', ['question', 'is_greater_equal', 'res_adder_h', 'op_remainder'], '', '')
    assign ('next_quotient', ['question', 'is_greater_equal', ['|', 'op_a_shift_q', 'one_shift'], 'op_a_shift_q'], '', '')
    assign ('b_0', ['curly', 'repeat', 32, ['curly', ['subbit', 'op_b_shift_q', 0]]], '', '')
    assign ('op_a_bw_pp', ['curly', ['~', ['&', ['subbit', 'op_a_shift_q', 32], ['subbit', 'op_b_shift_q', 0]]], ['&', ['subbus', 'op_a_shift_q', [31, 0]], 'b_0']], '', '')
    assign ('op_a_bw_last_pp', ['curly', ['&', ['subbit', 'op_a_shift_q', 32], ['subbit', 'op_b_shift_q', 0]], ['~', ['&', ['subbus', 'op_a_shift_q', [31, 0]], 'b_0']]], '', '')
    assign ('sign_a', ['&', ['subbit', 'op_a_i', 31], ['subbit', 'signed_mode_i', 0]], '', '')
    assign ('sign_b', ['&', ['subbit', 'op_b_i', 31], ['subbit', 'signed_mode_i', 1]], '', '')
    assign ('op_a_ext', ['curly', 'sign_a', 'op_a_i'], '', '')
    assign ('op_b_ext', ['curly', 'sign_b', 'op_b_i'], '', '')
    assign ('op_remainder', ['subbus', 'accum_window_q', [32, 0]], '', '')
    assign ('multdiv_state_n', ['-', 'multdiv_state_q', 1], '', '')
    assign ('div_change_sign', ['^', 'sign_a', 'sign_b'], '', '')
    assign ('rem_change_sign', 'sign_a', '', '')
    assign ('ready_o', ['|', ['==', 'curr_state_q', 'MD_FINISH'], ['&', ['==', 'curr_state_q', 'MD_LAST'], ['|', ['==', 'operator_i', 'MD_OP_MULL'], ['==', 'operator_i', 'MD_OP_MULH']]]], '', '')
    always ['*', ['list', ['=', 'alu_operand_a_o', 'accum_window_q'], ['=', 'multdiv_result_o', ['question', 'div_en_i', ['subbus', 'accum_window_q', [31, 0]], 'res_adder_l']], ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['=', 'alu_operand_b_o', 'op_a_bw_pp']]], [['MD_OP_MULH'], ['list', ['ifelse', ['==', 'curr_state_q', 'MD_LAST'], ['=', 'alu_operand_b_o', 'op_a_bw_last_pp'], ['=', 'alu_operand_b_o', 'op_a_bw_pp']]]], ['default', ['list', ['case', 'curr_state_q', [[['MD_IDLE'], ['list', ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_b_i'], ['bin', '1', '1']]]]], [['MD_ABS_A'], ['list', ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_a_i'], ['bin', '1', '1']]]]], [['MD_ABS_B'], ['list', ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_b_i'], ['bin', '1', '1']]]]], [['MD_CHANGE_SIGN'], ['list', ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', ['subbus', 'accum_window_q', [31, 0]]], ['bin', '1', '1']]]]], ['default', ['list', ['=', 'alu_operand_a_o', ['curly', ['subbus', 'accum_window_q', [31, 0]], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', ['subbus', 'op_b_shift_q', [31, 0]]], ['bin', '1', '1']]]]]]]]]]]], 'always']
    always ['*', ['list', ['ifelse', ['~', ['^', ['subbit', 'accum_window_q', 31], ['subbit', 'op_b_shift_q', 31]]], ['=', 'is_greater_equal', ['~', ['subbit', 'res_adder_h', 31]]], ['=', 'is_greater_equal', ['subbit', 'accum_window_q', 31]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'proc_multdiv_state_q', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'multdiv_state_q', ['dig', 32, '0']], ['<=', 'accum_window_q', ['dig', 32, '0']], ['<=', 'op_b_shift_q', ['dig', 32, '0']], ['<=', 'op_a_shift_q', ['dig', 32, '0']], ['<=', 'curr_state_q', 'MD_IDLE'], ['<=', 'op_numerator_q', ['dig', 32, '0']]], ['list', ['if', ['|', 'mult_en_i', 'div_en_i'], ['list', ['case', 'curr_state_q', [[['MD_IDLE'], ['list', ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['<=', 'op_a_shift_q', ['<<', 'op_a_ext', 1]], ['<=', 'accum_window_q', ['curly', ['~', ['&', ['subbit', 'op_a_ext', 32], ['subbit', 'op_b_i', 0]]], ['&', ['subbus', 'op_a_ext', [31, 0]], ['curly', 'repeat', 32, ['curly', ['subbit', 'op_b_i', 0]]]]]], ['<=', 'op_b_shift_q', ['>>', 'op_b_ext', 1]], ['<=', 'curr_state_q', 'MD_COMP']]], [['MD_OP_MULH'], ['list', ['<=', 'op_a_shift_q', 'op_a_ext'], ['<=', 'accum_window_q', ['curly', ['bin', '1', '1'], ['~', ['&', ['subbit', 'op_a_ext', 32], ['subbit', 'op_b_i', 0]]], ['&', ['subbus', 'op_a_ext', [31, 1]], ['curly', 'repeat', 31, ['curly', ['subbit', 'op_b_i', 0]]]]]], ['<=', 'op_b_shift_q', ['>>', 'op_b_ext', 1]], ['<=', 'curr_state_q', 'MD_COMP']]], [['MD_OP_DIV'], ['list', ['<=', 'accum_window_q', ['dig', 32, '1']], ['<=', 'curr_state_q', ['question', 'equal_to_zero', 'MD_FINISH', 'MD_ABS_A']]]], ['default', ['list', ['<=', 'accum_window_q', 'op_a_ext'], ['<=', 'curr_state_q', ['question', 'equal_to_zero', 'MD_FINISH', 'MD_ABS_A']]]]]], ['<=', 'multdiv_state_q', ['dig', '5', '31']]]], [['MD_ABS_A'], ['list', ['<=', 'op_a_shift_q', ['dig', 32, '0']], ['<=', 'op_numerator_q', ['question', 'sign_a', 'alu_adder_i', 'op_a_i']], ['<=', 'curr_state_q', 'MD_ABS_B']]], [['MD_ABS_B'], ['list', ['<=', 'accum_window_q', ['curly', ['hex', '32', '0'], ['subbit', 'op_numerator_q', 31]]], ['<=', 'op_b_shift_q', ['question', 'sign_b', 'alu_adder_i', 'op_b_i']], ['<=', 'curr_state_q', 'MD_COMP']]], [['MD_COMP'], ['list', ['<=', 'multdiv_state_q', 'multdiv_state_n'], ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['<=', 'accum_window_q', 'res_adder_l'], ['<=', 'op_a_shift_q', ['<<', 'op_a_shift_q', 1]], ['<=', 'op_b_shift_q', ['>>', 'op_b_shift_q', 1]]]], [['MD_OP_MULH'], ['list', ['<=', 'accum_window_q', 'res_adder_h'], ['<=', 'op_a_shift_q', 'op_a_shift_q'], ['<=', 'op_b_shift_q', ['>>', 'op_b_shift_q', 1]]]], ['default', ['list', ['<=', 'accum_window_q', ['curly', ['subbus', 'next_reminder', [31, 0]], ['subbit', 'op_numerator_q', 'multdiv_state_n']]], ['<=', 'op_a_shift_q', 'next_quotient']]]]], ['ifelse', ['==', 'multdiv_state_q', ['dig', '5', '1']], ['<=', 'curr_state_q', 'MD_LAST'], ['<=', 'curr_state_q', 'MD_COMP']]]], [['MD_LAST'], ['list', ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['<=', 'accum_window_q', 'res_adder_l'], ['<=', 'curr_state_q', 'MD_IDLE']]], [['MD_OP_MULH'], ['list', ['<=', 'accum_window_q', 'res_adder_l'], ['<=', 'curr_state_q', 'MD_IDLE']]], [['MD_OP_DIV'], ['list', ['<=', 'accum_window_q', 'next_quotient'], ['<=', 'curr_state_q', 'MD_CHANGE_SIGN']]], ['default', ['list', ['<=', 'accum_window_q', ['curly', ['bin', '1', '0'], ['subbus', 'next_reminder', [31, 0]]]], ['<=', 'curr_state_q', 'MD_CHANGE_SIGN']]]]]]], [['MD_CHANGE_SIGN'], ['list', ['<=', 'curr_state_q', 'MD_FINISH'], ['case', 'operator_i', [[['MD_OP_DIV'], ['<=', 'accum_window_q', ['question', 'div_change_sign', 'alu_adder_i', 'accum_window_q']]], ['default', ['<=', 'accum_window_q', ['question', 'rem_change_sign', 'alu_adder_i', 'accum_window_q']]]]]]], [['MD_FINISH'], ['list', ['<=', 'curr_state_q', 'MD_IDLE']]], ['default', ['empty_begin_end']]]]]]]]]], 'always']
endmodule
