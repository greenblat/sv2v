module zeroriscy_alu
    net adder_result_ext_o ('output', (33, 0))
    net shift_amt ('wire', (31, 0))
    net shift_result ('wire', (31, 0))
    net is_equal ('wire', 0)
    net is_greater_equal ('reg', 0)
    net result_o ('output reg', (31, 0))
    net cmp_result ('reg', 0)
    net is_equal_result_o ('output', 0)
    net multdiv_en_i ('input', 0)
    net adder_in_a ('wire', (32, 0))
    net adder_in_b ('wire', (32, 0))
    net comparison_result_o ('output', 0)
    net multdiv_operand_a_i ('input', (32, 0))
    net multdiv_operand_b_i ('input', (32, 0))
    net operand_a_rev ('wire', (31, 0))
    net operand_b_i ('input', (31, 0))
    net adder_result_o ('output', (31, 0))
    net shift_left ('wire', 0)
    net adder_op_b_negate ('reg', 0)
    net adder_result ('wire', (31, 0))
    net operand_a_i ('input', (31, 0))
    net cmp_signed ('reg', 0)
    net shift_right_result ('wire', (31, 0))
    net shift_op_a ('wire', (31, 0))
    net operand_b_neg ('wire', (32, 0))
    net operator_i ('input', (['-', 'ALU_OP_WIDTH', 1], 0))
    net shift_op_a_32 ('wire', (32, 0))
    net shift_left_result ('wire', (31, 0))
    net shift_arithmetic ('wire', 0)
    assign ('adder_in_a', ['question', 'multdiv_en_i', 'multdiv_operand_a_i', ['curly', 'operand_a_i', ['bin', '1', '1']]], '', '')
    assign ('operand_b_neg', ['^', ['curly', 'operand_b_i', ['bin', '1', '0']], ['curly', 'repeat', 33, ['curly', 'adder_op_b_negate']]], '', '')
    assign ('adder_in_b', ['question', 'multdiv_en_i', 'multdiv_operand_b_i', 'operand_b_neg'], '', '')
    assign ('adder_result_ext_o', ['+', ['functioncall', '$unsigned', ['adder_in_a']], ['functioncall', '$unsigned', ['adder_in_b']]], '', '')
    assign ('adder_result', ['subbus', 'adder_result_ext_o', [32, 1]], '', '')
    assign ('adder_result_o', 'adder_result', '', '')
    assign ('shift_amt', 'operand_b_i', '', '')
    assign ('shift_left', ['==', 'operator_i', 'ALU_SLL'], '', '')
    assign ('shift_arithmetic', ['==', 'operator_i', 'ALU_SRA'], '', '')
    assign ('shift_op_a', ['question', 'shift_left', 'operand_a_rev', 'operand_a_i'], '', '')
    assign ('shift_op_a_32', ['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 31]], 'shift_op_a'], '', '')
    assign ('shift_right_result', ['>>>', ['functioncall', '$signed', ['shift_op_a_32']], ['subbus', 'shift_amt', [4, 0]]], '', '')
    assign ('shift_result', ['question', 'shift_left', 'shift_left_result', 'shift_right_result'], '', '')
    assign ('is_equal', ['==', 'adder_result', ['bin', '32', '0']], '', '')
    assign ('is_equal_result_o', 'is_equal', '', '')
    assign ('comparison_result_o', 'cmp_result', '', '')
    always ['*', ['list', ['=', 'adder_op_b_negate', ['bin', '1', '0']], ['case', 'operator_i', [[['ALU_SUB', 'ALU_EQ', 'ALU_NE', 'ALU_GTU', 'ALU_GEU', 'ALU_LTU', 'ALU_LEU', 'ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES', 'ALU_SLTS', 'ALU_SLTU', 'ALU_SLETS', 'ALU_SLETU'], ['=', 'adder_op_b_negate', ['bin', '1', '1']]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'cmp_signed', ['bin', '1', '0']], ['case', 'operator_i', [[['ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES', 'ALU_SLTS', 'ALU_SLETS'], ['list', ['=', 'cmp_signed', ['bin', '1', '1']]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['ifelse', ['~', ['^', ['subbit', 'operand_a_i', 31], ['subbit', 'operand_b_i', 31]]], ['=', 'is_greater_equal', ['~', ['subbit', 'adder_result', 31]]], ['=', 'is_greater_equal', ['^', ['subbit', 'operand_a_i', 31], 'cmp_signed']]]], 'always']
    always ['*', ['list', ['=', 'cmp_result', 'is_equal'], ['case', 'operator_i', [[['ALU_EQ'], ['=', 'cmp_result', 'is_equal']], [['ALU_NE'], ['=', 'cmp_result', ['~', 'is_equal']]], [['ALU_GTS', 'ALU_GTU'], ['=', 'cmp_result', ['&&', 'is_greater_equal', ['~', 'is_equal']]]], [['ALU_GES', 'ALU_GEU'], ['=', 'cmp_result', 'is_greater_equal']], [['ALU_LTS', 'ALU_SLTS', 'ALU_LTU', 'ALU_SLTU'], ['=', 'cmp_result', ['~', 'is_greater_equal']]], [['ALU_SLETS', 'ALU_SLETU', 'ALU_LES', 'ALU_LEU'], ['=', 'cmp_result', ['||', ['~', 'is_greater_equal'], 'is_equal']]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'result_o', ['dig', 32, '0']], ['case', 'operator_i', [[['ALU_AND'], ['=', 'result_o', ['&', 'operand_a_i', 'operand_b_i']]], [['ALU_OR'], ['=', 'result_o', ['|', 'operand_a_i', 'operand_b_i']]], [['ALU_XOR'], ['=', 'result_o', ['^', 'operand_a_i', 'operand_b_i']]], [['ALU_ADD', 'ALU_SUB'], ['=', 'result_o', 'adder_result']], [['ALU_SLL', 'ALU_SRL', 'ALU_SRA'], ['=', 'result_o', 'shift_result']], [['ALU_EQ', 'ALU_NE', 'ALU_GTU', 'ALU_GEU', 'ALU_LTU', 'ALU_LEU', 'ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES', 'ALU_SLTS', 'ALU_SLTU', 'ALU_SLETS', 'ALU_SLETU'], ['=', 'result_o', 'cmp_result']], ['default', ['empty_begin_end']]]]], 'always']
    generate [['genvar', 'k'], ['for', ['list', ['=', 'k', 0]], ['<', 'k', 32], ['list', ['=', 'k', ['+', 'k', 1]]], ['named_begin', 'g_revloop', ['list', ['assigns', ['=', ['subbit', 'operand_a_rev', 'k'], ['subbit', 'operand_a_i', ['-', 31, 'k']]]]]]]]
    generate ['for', ['list', ['=', 'j', 0]], ['<', 'j', 32], ['list', ['=', 'j', ['+', 'j', 1]]], ['named_begin', 'g_resrevloop', ['list', ['assigns', ['=', ['subbit', 'shift_left_result', 'j'], ['subbit', 'shift_right_result', ['-', 31, 'j']]]]]]]
endmodule
