module zeroriscy_controller
    parameter REG_ADDR_WIDTH 5
    net csr_status_i ('input', 0)
    net fetch_enable_i ('input', 0)
    net is_decoding_o ('output reg', 0)
    net instr_multicyle_i ('input', 0)
    net dbg_req_i ('input', 0)
    net id_ready_i ('input', 0)
    net first_fetch_o ('output reg', 0)
    net pc_mux_o ('output reg', (2, 0))
    net irq_ack_o ('output reg', 0)
    net ctrl_fsm_cs ('reg', (3, 0))
    net operand_a_fw_mux_sel_o ('output', (1, 0))
    net halt_if_o ('output reg', 0)
    net exc_ack_o ('output reg', 0)
    net dbg_ack_o ('output reg', 0)
    net clk ('input', 0)
    net branch_set_i ('input', 0)
    net dbg_jump_req_i ('input', 0)
    net exc_kill_o ('output reg', 0)
    net pipe_flush_i ('input', 0)
    net irq_enable_int ('reg', 0)
    net m_IE_i ('input', 0)
    net csr_cause_o ('output reg', (5, 0))
    net ecall_insn_i ('input', 0)
    net dbg_settings_i ('input', (['-', 'DBG_SETS_W', 1], 0))
    net irq_req_ctrl_i ('input', 0)
    net csr_save_cause_o ('output reg', 0)
    net exc_pc_mux_o ('output reg', (1, 0))
    net rst_n ('input', 0)
    net deassert_we_o ('output reg', 0)
    net exc_cause_o ('output reg', (5, 0))
    net perf_tbranch_o ('output reg', 0)
    net instr_valid_i ('input', 0)
    net branch_in_id_i ('input', 0)
    net csr_save_if_o ('output reg', 0)
    net instr_req_o ('output reg', 0)
    net dbg_stall_i ('input', 0)
    net ebrk_insn_i ('input', 0)
    net irq_id_ctrl_i ('input', (4, 0))
    net halt_id_o ('output reg', 0)
    net branch_taken_ex_i ('input', 0)
    net data_misaligned_i ('input', 0)
    net illegal_insn_i ('input', 0)
    net pc_set_o ('output reg', 0)
    net jump_set_i ('input', 0)
    net perf_jump_o ('output reg', 0)
    net csr_restore_mret_id_o ('output reg', 0)
    net mret_insn_i ('input', 0)
    net csr_save_id_o ('output reg', 0)
    net irq_id_o ('output reg', (4, 0))
    net dbg_trap_o ('output reg', 0)
    net ctrl_fsm_ns ('reg', (3, 0))
    net ctrl_busy_o ('output reg', 0)
    assign ('operand_a_fw_mux_sel_o', ['question', 'data_misaligned_i', 'SEL_MISALIGNED', 'SEL_REGFILE'], '', '')
    always ['*', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'exc_ack_o', ['bin', '1', '0']], ['=', 'exc_kill_o', ['bin', '1', '0']], ['=', 'csr_save_if_o', ['bin', '1', '0']], ['=', 'csr_save_id_o', ['bin', '1', '0']], ['=', 'csr_restore_mret_id_o', ['bin', '1', '0']], ['=', 'csr_save_cause_o', ['bin', '1', '0']], ['=', 'exc_cause_o', ['dig', 32, '0']], ['=', 'exc_pc_mux_o', 'EXC_PC_IRQ'], ['=', 'csr_cause_o', ['dig', 32, '0']], ['=', 'pc_mux_o', 'PC_BOOT'], ['=', 'pc_set_o', ['bin', '1', '0']], ['=', 'ctrl_fsm_ns', 'ctrl_fsm_cs'], ['=', 'ctrl_busy_o', ['bin', '1', '1']], ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'first_fetch_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '0']], ['=', 'halt_id_o', ['bin', '1', '0']], ['=', 'dbg_ack_o', ['bin', '1', '0']], ['=', 'irq_ack_o', ['bin', '1', '0']], ['=', 'irq_id_o', 'irq_id_ctrl_i'], ['=', 'irq_enable_int', 'm_IE_i'], ['=', 'dbg_trap_o', ['bin', '1', '0']], ['=', 'perf_tbranch_o', ['bin', '1', '0']], ['=', 'perf_jump_o', ['bin', '1', '0']], ['case', 'ctrl_fsm_cs', [[['RESET'], ['list', ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['ifelse', 'fetch_enable_i', ['=', 'ctrl_fsm_ns', 'BOOT_SET'], ['if', 'dbg_req_i', ['list', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]]]], [['BOOT_SET'], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'pc_mux_o', 'PC_BOOT'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'FIRST_FETCH']]], [['WAIT_SLEEP'], ['list', ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'SLEEP']]], [['SLEEP'], ['list', ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']], ['ifelse', 'dbg_req_i', ['list', ['ifelse', ['||', 'fetch_enable_i', 'irq_req_ctrl_i'], ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL'], ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL_SLEEP']]], ['list', ['if', ['||', 'fetch_enable_i', 'irq_req_ctrl_i'], ['list', ['=', 'ctrl_fsm_ns', 'FIRST_FETCH']]]]]]], [['FIRST_FETCH'], ['list', ['=', 'first_fetch_o', ['bin', '1', '1']], ['if', ['&&', 'id_ready_i', ['~', 'dbg_stall_i']], ['list', ['=', 'ctrl_fsm_ns', 'DECODE']]], ['if', ['&', 'irq_req_ctrl_i', 'irq_enable_int'], ['list', ['=', 'ctrl_fsm_ns', 'IRQ_TAKEN'], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']]]]]], [['DECODE'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['ifelse', 'instr_valid_i', ['list', ['=', 'is_decoding_o', ['bin', '1', '1']], ['case', ['bin', '1', '1'], [[['branch_set_i'], ['list', ['=', 'pc_mux_o', 'PC_JUMP'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'perf_tbranch_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']], ['if', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]], [['jump_set_i'], ['list', ['=', 'pc_mux_o', 'PC_JUMP'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'perf_jump_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [[['|', ['|', ['|', ['|', ['|', 'mret_insn_i', 'ecall_insn_i'], 'pipe_flush_i'], 'ebrk_insn_i'], 'illegal_insn_i'], 'csr_status_i']], ['list', ['=', 'ctrl_fsm_ns', 'FLUSH'], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']]]], ['default', ['list', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']], ['case', ['bin', '1', '1'], [[[['&', ['&', ['&', 'irq_req_ctrl_i', 'irq_enable_int'], ['~', 'instr_multicyle_i']], ['~', 'branch_in_id_i']]], ['list', ['=', 'ctrl_fsm_ns', 'IRQ_TAKEN'], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']]]], [[['&', 'dbg_req_i', ['~', 'branch_taken_ex_i']]], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'id_ready_i', ['list', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]]], ['default', ['=', 'exc_kill_o', ['question', ['&', ['&', 'irq_req_ctrl_i', ['~', 'instr_multicyle_i']], ['~', 'branch_in_id_i']], ['bin', '1', '1'], ['bin', '1', '0']]]]]]]]]]], ['list', ['if', ['&', 'irq_req_ctrl_i', 'irq_enable_int'], ['list', ['=', 'ctrl_fsm_ns', 'IRQ_TAKEN'], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']]]]]]]], [['DBG_SIGNAL'], ['list', ['=', 'dbg_ack_o', ['bin', '1', '1']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], [['DBG_SIGNAL_SLEEP'], ['list', ['=', 'dbg_ack_o', ['bin', '1', '1']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT_SLEEP']]], [['DBG_WAIT_SLEEP'], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'dbg_jump_req_i', ['list', ['=', 'pc_mux_o', 'PC_DBG_NPC'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], ['if', ['~', 'dbg_stall_i'], ['list', ['=', 'ctrl_fsm_ns', 'SLEEP']]]]], [['DBG_WAIT'], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'dbg_jump_req_i', ['list', ['=', 'pc_mux_o', 'PC_DBG_NPC'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], ['if', ['~', 'dbg_stall_i'], ['list', ['=', 'ctrl_fsm_ns', 'DECODE']]]]], [['IRQ_TAKEN'], ['list', ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'exc_pc_mux_o', 'EXC_PC_IRQ'], ['=', 'exc_cause_o', ['curly', ['bin', '1', '0'], 'irq_id_ctrl_i']], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'csr_cause_o', ['curly', ['bin', '1', '1'], 'irq_id_ctrl_i']], ['=', 'csr_save_if_o', ['bin', '1', '1']], ['=', 'irq_ack_o', ['bin', '1', '1']], ['=', 'exc_ack_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DECODE']]], [['FLUSH'], ['list', ['=', 'halt_if_o', ['question', 'fetch_enable_i', 'dbg_req_i', ['bin', '1', '1']]], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', ['question', 'dbg_req_i', 'DBG_SIGNAL', 'DECODE']], ['case', ['bin', '1', '1'], [[['ecall_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_save_id_o', ['bin', '1', '1']], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'exc_pc_mux_o', 'EXC_PC_ECALL'], ['=', 'exc_cause_o', 'EXC_CAUSE_ECALL_MMODE'], ['=', 'csr_cause_o', 'EXC_CAUSE_ECALL_MMODE'], ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_ECALL'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]]], [['illegal_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_save_id_o', ['bin', '1', '1']], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'exc_pc_mux_o', 'EXC_PC_ILLINSN'], ['=', 'exc_cause_o', 'EXC_CAUSE_ILLEGAL_INSN'], ['=', 'csr_cause_o', 'EXC_CAUSE_ILLEGAL_INSN'], ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_EILL'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]]], [['mret_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_ERET'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_restore_mret_id_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [['ebrk_insn_i'], ['list', ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_EBRK'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]], ['=', 'exc_cause_o', 'EXC_CAUSE_BREAKPOINT']]], [['csr_status_i'], ['list', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [['pipe_flush_i'], ['list', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], ['default', ['empty_begin_end']]]], ['ifelse', 'fetch_enable_i', ['list', ['ifelse', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL'], ['=', 'ctrl_fsm_ns', 'DECODE']]], ['list', ['ifelse', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL_SLEEP'], ['=', 'ctrl_fsm_ns', ['question', ['|', 'mret_insn_i', 'pipe_flush_i'], 'WAIT_SLEEP', 'DECODE']]]]]]], ['default', ['list', ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'ctrl_fsm_ns', 'RESET']]]]]], 'always']
    always ['*', ['list', ['=', 'deassert_we_o', ['bin', '1', '0']], ['if', ['~', 'is_decoding_o'], ['=', 'deassert_we_o', ['bin', '1', '1']]], ['if', 'illegal_insn_i', ['=', 'deassert_we_o', ['bin', '1', '1']]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'UPDATE_REGS', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'ctrl_fsm_cs', 'RESET']], ['list', ['<=', 'ctrl_fsm_cs', 'ctrl_fsm_ns']]]]], 'always']
endmodule
