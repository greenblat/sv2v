module zeroriscy_fetch_fifo
    net j ('reg', (31, 0))
    net out_rdata_o ('output reg', (31, 0))
    net rdata ('wire', (31, 0))
    net unaligned_is_compressed ('wire', 0)
    net addr_next ('wire', (31, 0))
    net clear_i ('input', 0)
    net addr_n ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net in_ready_o ('output', 0)
    net valid_int ('reg', (['-', 'DEPTH', 1], 0))
    net addr_Q ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net clk ('input', 0)
    net aligned_is_compressed ('wire', 0)
    net valid ('wire', 0)
    net in_valid_i ('input', 0)
    net rdata_int ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net in_rdata_i ('input', (31, 0))
    net rst_n ('input', 0)
    net out_addr_o ('output', (31, 0))
    net aligned_is_compressed_st ('wire', 0)
    net rdata_n ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net addr_int ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net valid_n ('reg', (['-', 'DEPTH', 1], 0))
    net rdata_unaligned ('wire', (31, 0))
    net valid_Q ('reg', (['-', 'DEPTH', 1], 0))
    net out_valid_o ('output reg', 0)
    net valid_unaligned ('wire', 0)
    net rdata_Q ('reg', ('packed', (['-', 'DEPTH', 1], 0), (31, 0)))
    net unaligned_is_compressed_st ('wire', 0)
    net in_addr_i ('input', (31, 0))
    net out_ready_i ('input', 0)
    net out_valid_stored_o ('output reg', 0)
    assign ('rdata', ['question', ['subbit', 'valid_Q', 0], ['subbit', 'rdata_Q', 0], 'in_rdata_i'], '', '')
    assign ('valid', ['||', ['subbit', 'valid_Q', 0], 'in_valid_i'], '', '')
    assign ('rdata_unaligned', ['question', ['subbit', 'valid_Q', 1], ['curly', ['sub_slice', 'rdata_Q', 1, (15, 0)], ['subbus', 'rdata', [31, 16]]], ['curly', ['subbus', 'in_rdata_i', [15, 0]], ['subbus', 'rdata', [31, 16]]]], '', '')
    assign ('valid_unaligned', ['||', ['subbit', 'valid_Q', 1], ['&&', ['subbit', 'valid_Q', 0], 'in_valid_i']], '', '')
    assign ('unaligned_is_compressed', ['!=', ['subbus', 'rdata', [17, 16]], ['bin', '2', '11']], '', '')
    assign ('aligned_is_compressed', ['!=', ['subbus', 'rdata', [1, 0]], ['bin', '2', '11']], '', '')
    assign ('unaligned_is_compressed_st', ['!=', ['sub_slice', 'rdata_Q', 0, (17, 16)], ['bin', '2', '11']], '', '')
    assign ('aligned_is_compressed_st', ['!=', ['sub_slice', 'rdata_Q', 0, (1, 0)], ['bin', '2', '11']], '', '')
    assign ('out_addr_o', ['question', ['subbit', 'valid_Q', 0], ['subbit', 'addr_Q', 0], 'in_addr_i'], '', '')
    assign ('in_ready_o', ['~', ['subbit', 'valid_Q', ['-', 'DEPTH', 2]]], '', '')
    assign ('addr_next', ['+', ['curly', ['sub_slice', 'addr_int', 0, (31, 2)], ['bin', '2', '00']], ['hex', '32', '4']], '', '')
    always ['*', ['list', ['ifelse', ['subbit', 'out_addr_o', 1], ['list', ['=', 'out_rdata_o', 'rdata_unaligned'], ['ifelse', 'unaligned_is_compressed', ['=', 'out_valid_o', 'valid'], ['=', 'out_valid_o', 'valid_unaligned']]], ['list', ['=', 'out_rdata_o', 'rdata'], ['=', 'out_valid_o', 'valid']]]], 'always']
    always ['*', ['list', ['=', 'out_valid_stored_o', ['bin', '1', '1']], ['ifelse', ['subbit', 'out_addr_o', 1], ['list', ['ifelse', 'unaligned_is_compressed_st', ['=', 'out_valid_stored_o', ['bin', '1', '1']], ['=', 'out_valid_stored_o', ['subbit', 'valid_Q', 1]]]], ['list', ['=', 'out_valid_stored_o', ['subbit', 'valid_Q', 0]]]]], 'always']
    always ['*', ['list', ['=', 'addr_int', 'addr_Q'], ['=', 'rdata_int', 'rdata_Q'], ['=', 'valid_int', 'valid_Q'], ['if', 'in_valid_i', ['list', ['for', ['list', ['=', 'j', 0]], ['<', 'j', 'DEPTH'], ['list', ['=', 'j', ['+', 'j', 1]]], ['list', ['if', ['~', ['subbit', 'valid_Q', 'j']], ['list', ['=', ['subbit', 'addr_int', 'j'], 'in_addr_i'], ['=', ['subbit', 'rdata_int', 'j'], 'in_rdata_i'], ['=', ['subbit', 'valid_int', 'j'], ['bin', '1', '1']], ['taskcall', 'break']]]]]]]], 'always']
    always ['*', ['list', ['=', 'addr_n', 'addr_int'], ['=', 'rdata_n', 'rdata_int'], ['=', 'valid_n', 'valid_int'], ['if', ['&&', 'out_ready_i', 'out_valid_o'], ['list', ['list', ['ifelse', ['sub_slicebit', 'addr_int', 0, 1], ['list', ['ifelse', 'unaligned_is_compressed', ['list', ['=', ['subbit', 'addr_n', 0], ['curly', ['subbus', 'addr_next', [31, 2]], ['bin', '2', '00']]]], ['list', ['=', ['subbit', 'addr_n', 0], ['curly', ['subbus', 'addr_next', [31, 2]], ['bin', '2', '10']]]]], ['=', 'rdata_n', ['curly', ['bin', '32', '0'], ['subbus', 'rdata_int', [['-', 'DEPTH', 1], 1]]]], ['=', 'valid_n', ['curly', ['bin', '1', '0'], ['subbus', 'valid_int', [['-', 'DEPTH', 1], 1]]]]], ['list', ['ifelse', 'aligned_is_compressed', ['list', ['=', ['subbit', 'addr_n', 0], ['curly', ['sub_slice', 'addr_int', 0, (31, 2)], ['bin', '2', '10']]]], ['list', ['=', ['subbit', 'addr_n', 0], ['curly', ['subbus', 'addr_next', [31, 2]], ['bin', '2', '00']]], ['=', 'rdata_n', ['curly', ['bin', '32', '0'], ['subbus', 'rdata_int', [['-', 'DEPTH', 1], 1]]]], ['=', 'valid_n', ['curly', ['bin', '1', '0'], ['subbus', 'valid_int', [['-', 'DEPTH', 1], 1]]]]]]]]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'addr_Q', ['dig', 32, '0']], ['<=', 'rdata_Q', ['dig', 32, '0']], ['<=', 'valid_Q', ['dig', 32, '0']]], ['list', ['ifelse', 'clear_i', ['list', ['<=', 'valid_Q', ['dig', 32, '0']]], ['list', ['<=', 'addr_Q', 'addr_n'], ['<=', 'rdata_Q', 'rdata_n'], ['<=', 'valid_Q', 'valid_n']]]]]], 'always']
endmodule
