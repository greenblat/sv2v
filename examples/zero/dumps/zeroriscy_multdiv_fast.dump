module zeroriscy_multdiv_fast
    net mult_is_ready ('reg', 0)
    net res_adder_h ('wire', (32, 0))
    net rem_change_sign ('wire', 0)
    net op_numerator_q ('reg', (31, 0))
    net one_shift ('wire', (31, 0))
    net is_greater_equal ('reg', 0)
    net signed_mult ('wire', 0)
    net op_reminder_n ('reg', (33, 0))
    net div_counter_q ('reg', (4, 0))
    net op_denominator_q ('reg', (31, 0))
    net alu_adder_ext_i ('input', (33, 0))
    net divcurr_state_n ('reg', (2, 0))
    net clk ('input', 0)
    net ready_o ('output', 0)
    net next_reminder ('wire', (32, 0))
    net signed_mode_i ('input', (1, 0))
    net divcurr_state_q ('reg', (2, 0))
    net equal_to_zero ('input', 0)
    net op_denominator_n ('reg', (31, 0))
    net accum ('reg', (33, 0))
    net op_quotient_q ('reg', (31, 0))
    net div_counter_n ('reg', (4, 0))
    net rst_n ('input', 0)
    net op_quotient_n ('reg', (31, 0))
    net op_numerator_n ('reg', (31, 0))
    net next_quotient ('wire', (32, 0))
    net div_en_i ('input', 0)
    net op_a_i ('input', (31, 0))
    net div_change_sign ('wire', 0)
    net op_b_i ('input', (31, 0))
    net sign_a ('reg', 0)
    net sign_b ('reg', 0)
    net mac_res_n ('reg', (33, 0))
    net mac_res ('wire', (33, 0))
    net multdiv_result_o ('output', (31, 0))
    net mac_res_ext ('wire', (34, 0))
    net mult_op_a ('reg', (15, 0))
    net alu_operand_a_o ('output reg', (32, 0))
    net mult_state_q ('reg', (1, 0))
    net operator_i ('input', (1, 0))
    net mult_en_i ('input', 0)
    net mult_op_b ('reg', (15, 0))
    net mult_state_n ('reg', (1, 0))
    net alu_operand_b_o ('output reg', (32, 0))
    net alu_adder_i ('input', (31, 0))
    net div_sign_a ('wire', 0)
    net div_sign_b ('wire', 0)
    net mac_res_q ('reg', (33, 0))
    assign ('signed_mult', ['!=', 'signed_mode_i', ['bin', '2', '00']], '', '')
    assign ('multdiv_result_o', ['question', 'div_en_i', ['subbus', 'mac_res_q', [31, 0]], ['subbus', 'mac_res_n', [31, 0]]], '', '')
    assign ('mac_res_ext', ['+', ['*', ['functioncall', '$signed', [['curly', 'sign_a', 'mult_op_a']]], ['functioncall', '$signed', [['curly', 'sign_b', 'mult_op_b']]]], ['functioncall', '$signed', ['accum']]], '', '')
    assign ('mac_res', ['subbus', 'mac_res_ext', [33, 0]], '', '')
    assign ('res_adder_h', ['subbus', 'alu_adder_ext_i', [33, 1]], '', '')
    assign ('next_reminder', ['question', 'is_greater_equal', 'res_adder_h', ['subbus', 'mac_res_q', [32, 0]]], '', '')
    assign ('next_quotient', ['question', 'is_greater_equal', ['|', 'op_quotient_q', 'one_shift'], 'op_quotient_q'], '', '')
    assign ('one_shift', ['<<', ['curly', ['bin', '31', '0'], ['bin', '1', '1']], 'div_counter_q'], '', '')
    assign ('div_sign_a', ['&', ['subbit', 'op_a_i', 31], ['subbit', 'signed_mode_i', 0]], '', '')
    assign ('div_sign_b', ['&', ['subbit', 'op_b_i', 31], ['subbit', 'signed_mode_i', 1]], '', '')
    assign ('div_change_sign', ['^', 'div_sign_a', 'div_sign_b'], '', '')
    assign ('rem_change_sign', 'div_sign_a', '', '')
    assign ('ready_o', ['|', 'mult_is_ready', ['==', 'divcurr_state_q', 'MD_FINISH']], '', '')
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'proc_mult_state_q', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'mult_state_q', 'ALBL'], ['<=', 'mac_res_q', ['dig', 32, '0']], ['<=', 'div_counter_q', ['dig', 32, '0']], ['<=', 'divcurr_state_q', 'MD_IDLE'], ['<=', 'op_denominator_q', ['dig', 32, '0']], ['<=', 'op_numerator_q', ['dig', 32, '0']], ['<=', 'op_quotient_q', ['dig', 32, '0']]], ['list', ['if', 'mult_en_i', ['list', ['<=', 'mult_state_q', 'mult_state_n']]], ['if', 'div_en_i', ['list', ['<=', 'div_counter_q', 'div_counter_n'], ['<=', 'op_denominator_q', 'op_denominator_n'], ['<=', 'op_numerator_q', 'op_numerator_n'], ['<=', 'op_quotient_q', 'op_quotient_n'], ['<=', 'divcurr_state_q', 'divcurr_state_n']]], ['case', ['bin', '1', '1'], [[['mult_en_i'], ['<=', 'mac_res_q', 'mac_res_n']], [['div_en_i'], ['<=', 'mac_res_q', 'op_reminder_n']], ['default', ['<=', 'mac_res_q', 'mac_res_q']]]]]]]], 'always']
    always ['*', ['list', ['ifelse', ['~', ['^', ['subbit', 'mac_res_q', 31], ['subbit', 'op_denominator_q', 31]]], ['=', 'is_greater_equal', ['~', ['subbit', 'res_adder_h', 31]]], ['=', 'is_greater_equal', ['subbit', 'mac_res_q', 31]]]], 'always']
    always ['*', ['named_begin', 'div_fsm', ['list', ['=', 'div_counter_n', ['-', 'div_counter_q', 1]], ['=', 'op_reminder_n', 'mac_res_q'], ['=', 'op_quotient_n', 'op_quotient_q'], ['=', 'divcurr_state_n', 'divcurr_state_q'], ['=', 'op_numerator_n', 'op_numerator_q'], ['=', 'op_denominator_n', 'op_denominator_q'], ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_b_i'], ['bin', '1', '1']]], ['case', 'divcurr_state_q', [[['MD_IDLE'], ['list', ['case', 'operator_i', [[['MD_OP_DIV'], ['list', ['=', 'op_reminder_n', ['dig', 32, '1']], ['=', 'divcurr_state_n', ['question', 'equal_to_zero', 'MD_FINISH', 'MD_ABS_A']]]], ['default', ['list', ['=', 'op_reminder_n', ['curly', ['bin', '2', '0'], 'op_a_i']], ['=', 'divcurr_state_n', ['question', 'equal_to_zero', 'MD_FINISH', 'MD_ABS_A']]]]]], ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_b_i'], ['bin', '1', '1']]], ['=', 'div_counter_n', ['dig', '5', '31']]]], [['MD_ABS_A'], ['list', ['=', 'op_quotient_n', ['dig', 32, '0']], ['=', 'op_numerator_n', ['question', 'div_sign_a', 'alu_adder_i', 'op_a_i']], ['=', 'divcurr_state_n', 'MD_ABS_B'], ['=', 'div_counter_n', ['dig', '5', '31']], ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_a_i'], ['bin', '1', '1']]]]], [['MD_ABS_B'], ['list', ['=', 'op_reminder_n', ['curly', ['hex', '33', '0'], ['subbit', 'op_numerator_q', 31]]], ['=', 'op_denominator_n', ['question', 'div_sign_b', 'alu_adder_i', 'op_b_i']], ['=', 'divcurr_state_n', 'MD_COMP'], ['=', 'div_counter_n', ['dig', '5', '31']], ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', 'op_b_i'], ['bin', '1', '1']]]]], [['MD_COMP'], ['list', ['=', 'op_reminder_n', ['curly', ['bin', '1', '0'], ['subbus', 'next_reminder', [31, 0]], ['subbit', 'op_numerator_q', 'div_counter_n']]], ['=', 'op_quotient_n', 'next_quotient'], ['ifelse', ['==', 'div_counter_q', ['dig', '5', '1']], ['=', 'divcurr_state_n', 'MD_LAST'], ['=', 'divcurr_state_n', 'MD_COMP']], ['=', 'alu_operand_a_o', ['curly', ['subbus', 'mac_res_q', [31, 0]], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', ['subbus', 'op_denominator_q', [31, 0]]], ['bin', '1', '1']]]]], [['MD_LAST'], ['list', ['case', 'operator_i', [[['MD_OP_DIV'], ['=', 'op_reminder_n', ['curly', ['bin', '1', '0'], 'next_quotient']]], ['default', ['=', 'op_reminder_n', ['curly', ['bin', '2', '0'], ['subbus', 'next_reminder', [31, 0]]]]]]], ['=', 'alu_operand_a_o', ['curly', ['subbus', 'mac_res_q', [31, 0]], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', ['subbus', 'op_denominator_q', [31, 0]]], ['bin', '1', '1']]], ['=', 'divcurr_state_n', 'MD_CHANGE_SIGN']]], [['MD_CHANGE_SIGN'], ['list', ['=', 'divcurr_state_n', 'MD_FINISH'], ['case', 'operator_i', [[['MD_OP_DIV'], ['=', 'op_reminder_n', ['question', 'div_change_sign', 'alu_adder_i', 'mac_res_q']]], ['default', ['=', 'op_reminder_n', ['question', 'rem_change_sign', 'alu_adder_i', 'mac_res_q']]]]], ['=', 'alu_operand_a_o', ['curly', ['hex', '32', '0'], ['bin', '1', '1']]], ['=', 'alu_operand_b_o', ['curly', ['~', ['subbus', 'mac_res_q', [31, 0]]], ['bin', '1', '1']]]]], [['MD_FINISH'], ['list', ['=', 'divcurr_state_n', 'MD_IDLE']]], ['default', ['empty_begin_end']]]]]], 'always']
    always ['*', ['named_begin', 'mult_fsm', ['list', ['=', 'mult_op_a', ['subbus', 'op_a_i', [15, 0]]], ['=', 'mult_op_b', ['subbus', 'op_b_i', [15, 0]]], ['=', 'sign_a', ['bin', '1', '0']], ['=', 'sign_b', ['bin', '1', '0']], ['=', 'accum', 'mac_res_q'], ['=', 'mac_res_n', 'mac_res'], ['=', 'mult_state_n', 'mult_state_q'], ['=', 'mult_is_ready', ['bin', '1', '0']], ['case', 'mult_state_q', [[['ALBL'], ['list', ['=', 'mult_op_a', ['subbus', 'op_a_i', [15, 0]]], ['=', 'mult_op_b', ['subbus', 'op_b_i', [15, 0]]], ['=', 'sign_a', ['bin', '1', '0']], ['=', 'sign_b', ['bin', '1', '0']], ['=', 'accum', ['dig', 32, '0']], ['=', 'mac_res_n', 'mac_res'], ['=', 'mult_state_n', 'ALBH']]], [['ALBH'], ['list', ['=', 'mult_op_a', ['subbus', 'op_a_i', [15, 0]]], ['=', 'mult_op_b', ['subbus', 'op_b_i', [31, 16]]], ['=', 'sign_a', ['bin', '1', '0']], ['=', 'sign_b', ['&', ['subbit', 'signed_mode_i', 1], ['subbit', 'op_b_i', 31]]], ['=', 'accum', ['curly', ['bin', '18', '0'], ['subbus', 'mac_res_q', [31, 16]]]], ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['=', 'mac_res_n', ['curly', ['bin', '2', '0'], ['subbus', 'mac_res', [15, 0]], ['subbus', 'mac_res_q', [15, 0]]]]]], ['default', ['list', ['=', 'mac_res_n', 'mac_res']]]]], ['=', 'mult_state_n', 'AHBL']]], [['AHBL'], ['list', ['=', 'mult_op_a', ['subbus', 'op_a_i', [31, 16]]], ['=', 'mult_op_b', ['subbus', 'op_b_i', [15, 0]]], ['=', 'sign_a', ['&', ['subbit', 'signed_mode_i', 0], ['subbit', 'op_a_i', 31]]], ['=', 'sign_b', ['bin', '1', '0']], ['case', 'operator_i', [[['MD_OP_MULL'], ['list', ['=', 'accum', ['curly', ['bin', '18', '0'], ['subbus', 'mac_res_q', [31, 16]]]], ['=', 'mac_res_n', ['curly', ['bin', '2', '0'], ['subbus', 'mac_res', [15, 0]], ['subbus', 'mac_res_q', [15, 0]]]], ['=', 'mult_is_ready', ['bin', '1', '1']], ['=', 'mult_state_n', 'ALBL']]], ['default', ['list', ['=', 'accum', 'mac_res_q'], ['=', 'mac_res_n', 'mac_res'], ['=', 'mult_state_n', 'AHBH']]]]]]], [['AHBH'], ['list', ['=', 'mult_op_a', ['subbus', 'op_a_i', [31, 16]]], ['=', 'mult_op_b', ['subbus', 'op_b_i', [31, 16]]], ['=', 'sign_a', ['&', ['subbit', 'signed_mode_i', 0], ['subbit', 'op_a_i', 31]]], ['=', 'sign_b', ['&', ['subbit', 'signed_mode_i', 1], ['subbit', 'op_b_i', 31]]], ['=', ['subbus', 'accum', (17, 0)], ['subbus', 'mac_res_q', [33, 16]]], ['=', ['subbus', 'accum', (33, 18)], ['curly', 'repeat', 18, ['curly', ['&', 'signed_mult', ['subbit', 'mac_res_q', 33]]]]], ['=', 'mac_res_n', 'mac_res'], ['=', 'mult_state_n', 'ALBL'], ['=', 'mult_is_ready', ['bin', '1', '1']]]], ['default', ['empty_begin_end']]]]]], 'always']
endmodule
