module zeroriscy_cs_registers
    parameter N_EXT_CNT 0
    net is_decoding_i ('input', 0)
    net csr_access_i ('input', 0)
    net jump_i ('input', 0)
    net PCMR_q ('reg', (1, 0))
    net PCCR_inc ('wire', (['-', 'N_PERF_COUNTERS', 1], 0))
    net pccr_index ('reg', (4, 0))
    net mepc_q ('reg', (31, 0))
    net boot_addr_i ('input', (23, 0))
    net core_id_i ('input', (3, 0))
    net PCMR_n ('reg', (1, 0))
    net branch_taken_i ('input', 0)
    net perf_rdata ('reg', (31, 0))
    net is_pccr ('reg', 0)
    net mcause_n ('reg', (5, 0))
    net pc_if_i ('input', (31, 0))
    net mstatus_q ('reg', (3, 0))
    net csr_save_id_i ('input', 0)
    net csr_rdata_o ('output reg', (31, 0))
    net clk ('input', 0)
    net mepc_n ('reg', (31, 0))
    net cluster_id_i ('input', (5, 0))
    net PCCR_inc_q ('reg', (['-', 'N_PERF_COUNTERS', 1], 0))
    net csr_rdata_int ('reg', (31, 0))
    net mem_store_i ('input', 0)
    net PCCR_n ('reg', ('packed', (['-', 'N_PERF_REGS', 1], 0), (31, 0)))
    net csr_save_cause_i ('input', 0)
    net mstatus_n ('reg', (3, 0))
    net pc_set_i ('input', 0)
    net rst_n ('input', 0)
    net csr_cause_i ('input', (5, 0))
    net pccr_all_sel ('reg', 0)
    net csr_save_if_i ('input', 0)
    net branch_i ('input', 0)
    net pc_id_i ('input', (31, 0))
    net PCER_n ('reg', (['-', 'N_PERF_COUNTERS', 1], 0))
    net m_irq_enable_o ('output', 0)
    net PCCR_q ('reg', ('packed', (['-', 'N_PERF_REGS', 1], 0), (31, 0)))
    net mcause_q ('reg', (5, 0))
    net if_valid_i ('input', 0)
    net mepc_o ('output', (31, 0))
    net csr_restore_mret_i ('input', 0)
    net csr_we_int ('reg', 0)
    net csr_addr_i ('input', (11, 0))
    net PCER_q ('reg', (['-', 'N_PERF_COUNTERS', 1], 0))
    net csr_wdata_i ('input', (31, 0))
    net id_valid_i ('input', 0)
    net i ('reg', (31, 0))
    net is_compressed_i ('input', 0)
    net is_pcmr ('reg', 0)
    net ext_counters_i ('input', (['-', 'N_EXT_CNT', 1], 0))
    net PCCR_in ('wire', (['-', 'N_PERF_COUNTERS', 1], 0))
    net csr_op_i ('input', (1, 0))
    net mem_load_i ('input', 0)
    net id_valid_q ('reg', 0)
    net is_pcer ('reg', 0)
    net imiss_i ('input', 0)
    net csr_wdata_int ('reg', (31, 0))
    assign ('m_irq_enable_o', ['subbus', 'mstatus_q', [3, 3]], '', '')
    assign ('mepc_o', 'mepc_q', '', '')
    assign (['subbit', 'PCCR_in', 0], ['bin', '1', '1'], '', '')
    assign (['subbit', 'PCCR_in', 1], 'if_valid_i', '', '')
    assign (['subbit', 'PCCR_in', 2], ['bin', '1', '0'], '', '')
    assign (['subbit', 'PCCR_in', 3], ['bin', '1', '0'], '', '')
    assign (['subbit', 'PCCR_in', 4], ['&', 'imiss_i', ['~', 'pc_set_i']], '', '')
    assign (['subbit', 'PCCR_in', 5], 'mem_load_i', '', '')
    assign (['subbit', 'PCCR_in', 6], 'mem_store_i', '', '')
    assign (['subbit', 'PCCR_in', 7], 'jump_i', '', '')
    assign (['subbit', 'PCCR_in', 8], 'branch_i', '', '')
    assign (['subbit', 'PCCR_in', 9], 'branch_taken_i', '', '')
    assign (['subbit', 'PCCR_in', 10], ['&', ['&', 'id_valid_i', 'is_decoding_i'], 'is_compressed_i'], '', '')
    assign (['subbit', 'PCCR_inc', 0], ['&', ['|', ['&', 'PCCR_in', 'PCER_q']], ['subbit', 'PCMR_q', 0]], '', '')
    always ['*', ['list', ['=', 'csr_rdata_int', ['dig', 32, '0']], ['case', 'csr_addr_i', [[[['hex', '12', '300']], ['=', 'csr_rdata_int', ['curly', ['bin', '19', '0'], ['subbus', 'mstatus_q', [1, 0]], ['bin', '3', '0'], ['subbus', 'mstatus_q', [2, 2]], ['hex', '3', '0'], ['subbus', 'mstatus_q', [3, 3]], ['hex', '3', '0']]]], [[['hex', '12', '305']], ['=', 'csr_rdata_int', ['curly', 'boot_addr_i', ['hex', '8', '0']]]], [[['hex', '12', '341']], ['=', 'csr_rdata_int', 'mepc_q']], [[['hex', '12', '342']], ['=', 'csr_rdata_int', ['curly', ['subbit', 'mcause_q', 5], ['bin', '26', '0'], ['subbus', 'mcause_q', [4, 0]]]]], [[['hex', '12', 'F14']], ['=', 'csr_rdata_int', ['curly', ['bin', '21', '0'], ['subbus', 'cluster_id_i', [5, 0]], ['bin', '1', '0'], ['subbus', 'core_id_i', [3, 0]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'mepc_n', 'mepc_q'], ['=', 'mstatus_n', 'mstatus_q'], ['=', 'mcause_n', 'mcause_q'], ['case', 'csr_addr_i', [[[['hex', '12', '300']], ['if', 'csr_we_int', ['list', ['=', 'mstatus_n', ['curly', ['subbit', 'csr_wdata_int', 3], ['subbit', 'csr_wdata_int', 7], 'PRIV_LVL_M']]]]], [[['hex', '12', '341']], ['if', 'csr_we_int', ['=', 'mepc_n', 'csr_wdata_int']]], [[['hex', '12', '342']], ['if', 'csr_we_int', ['=', 'mcause_n', ['curly', ['subbit', 'csr_wdata_int', 31], ['subbus', 'csr_wdata_int', [4, 0]]]]]], ['default', ['empty_begin_end']]]], ['case', ['bin', '1', '1'], [[['csr_save_cause_i'], ['list', ['case', ['bin', '1', '1'], [[['csr_save_if_i'], ['=', 'mepc_n', 'pc_if_i']], [['csr_save_id_i'], ['=', 'mepc_n', 'pc_id_i']], ['default', ['empty_begin_end']]]], ['=', ['subbus', 'mstatus_n', (2, 2)], ['subbus', 'mstatus_q', [3, 3]]], ['=', ['subbus', 'mstatus_n', (3, 3)], ['bin', '1', '0']], ['=', 'mcause_n', 'csr_cause_i']]], [['csr_restore_mret_i'], ['list', ['=', ['subbus', 'mstatus_n', (3, 3)], ['subbus', 'mstatus_q', [2, 2]]], ['=', ['subbus', 'mstatus_n', (2, 2)], ['bin', '1', '1']]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'csr_wdata_int', 'csr_wdata_i'], ['=', 'csr_we_int', ['bin', '1', '1']], ['case', 'csr_op_i', [[['CSR_OP_WRITE'], ['=', 'csr_wdata_int', 'csr_wdata_i']], [['CSR_OP_SET'], ['=', 'csr_wdata_int', ['|', 'csr_wdata_i', 'csr_rdata_o']]], [['CSR_OP_CLEAR'], ['=', 'csr_wdata_int', ['&', ['~', 'csr_wdata_i'], 'csr_rdata_o']]], [['CSR_OP_NONE'], ['list', ['=', 'csr_wdata_int', 'csr_wdata_i'], ['=', 'csr_we_int', ['bin', '1', '0']]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'csr_rdata_o', 'csr_rdata_int'], ['if', ['||', ['||', 'is_pccr', 'is_pcer'], 'is_pcmr'], ['=', 'csr_rdata_o', 'perf_rdata']]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'mstatus_q', ['curly', ['bin', '1', '0'], ['bin', '1', '0'], 'PRIV_LVL_M']], ['<=', 'mepc_q', ['dig', 32, '0']], ['<=', 'mcause_q', ['dig', 32, '0']]], ['list', ['<=', 'mstatus_q', ['curly', ['subbus', 'mstatus_n', [3, 3]], ['subbus', 'mstatus_n', [2, 2]], 'PRIV_LVL_M']], ['<=', 'mepc_q', 'mepc_n'], ['<=', 'mcause_q', 'mcause_n']]]], 'always']
    always ['*', ['list', ['=', 'is_pccr', ['bin', '1', '0']], ['=', 'is_pcmr', ['bin', '1', '0']], ['=', 'is_pcer', ['bin', '1', '0']], ['=', 'pccr_all_sel', ['bin', '1', '0']], ['=', 'pccr_index', ['dig', 32, '0']], ['=', 'perf_rdata', ['dig', 32, '0']], ['if', 'csr_access_i', ['list', ['case', 'csr_addr_i', [[[['hex', '12', '7A0']], ['list', ['=', 'is_pcer', ['bin', '1', '1']], ['=', ['subbus', 'perf_rdata', (15, 0)], 'PCER_q']]], [[['hex', '12', '7A1']], ['list', ['=', 'is_pcmr', ['bin', '1', '1']], ['=', ['subbus', 'perf_rdata', (1, 0)], 'PCMR_q']]], [[['hex', '12', '79F']], ['list', ['=', 'is_pccr', ['bin', '1', '1']], ['=', 'pccr_all_sel', ['bin', '1', '1']]]], ['default', ['empty_begin_end']]]], ['if', ['==', ['subbus', 'csr_addr_i', [11, 5]], ['bin', '7', '0111100']], ['list', ['=', 'is_pccr', ['bin', '1', '1']], ['=', 'pccr_index', ['subbus', 'csr_addr_i', [4, 0]]], ['=', 'perf_rdata', ['subbit', 'PCCR_q', 0]]]]]]], 'always']
    always ['*', ['list', ['=', ['subbit', 'PCCR_n', 0], ['subbit', 'PCCR_q', 0]], ['if', ['&&', ['subbit', 'PCCR_inc_q', 0], ['||', ['!=', ['subbit', 'PCCR_q', 0], ['hex', '32', 'FFFFFFFF']], ['~', ['subbit', 'PCMR_q', 1]]]], ['=', ['subbit', 'PCCR_n', 0], ['+', ['subbit', 'PCCR_q', 0], 1]]], ['if', 'is_pccr', ['list', ['case', 'csr_op_i', [[['CSR_OP_WRITE'], ['=', ['subbit', 'PCCR_n', 0], 'csr_wdata_i']], [['CSR_OP_SET'], ['=', ['subbit', 'PCCR_n', 0], ['|', 'csr_wdata_i', ['subbit', 'PCCR_q', 0]]]], [['CSR_OP_CLEAR'], ['=', ['subbit', 'PCCR_n', 0], ['&', 'csr_wdata_i', ['~', ['subbit', 'PCCR_q', 0]]]]]]]]]], 'always']
    always ['*', ['list', ['=', 'PCMR_n', 'PCMR_q'], ['=', 'PCER_n', 'PCER_q'], ['if', 'is_pcmr', ['list', ['case', 'csr_op_i', [[['CSR_OP_WRITE'], ['=', 'PCMR_n', ['subbus', 'csr_wdata_i', [1, 0]]]], [['CSR_OP_SET'], ['=', 'PCMR_n', ['|', ['subbus', 'csr_wdata_i', [1, 0]], 'PCMR_q']]], [['CSR_OP_CLEAR'], ['=', 'PCMR_n', ['&', ['subbus', 'csr_wdata_i', [1, 0]], ['~', 'PCMR_q']]]]]]]], ['if', 'is_pcer', ['list', ['case', 'csr_op_i', [[['CSR_OP_WRITE'], ['=', 'PCER_n', ['subbus', 'csr_wdata_i', [['-', 'N_PERF_COUNTERS', 1], 0]]]], [['CSR_OP_SET'], ['=', 'PCER_n', ['|', ['subbus', 'csr_wdata_i', [['-', 'N_PERF_COUNTERS', 1], 0]], 'PCER_q']]], [['CSR_OP_CLEAR'], ['=', 'PCER_n', ['&', ['subbus', 'csr_wdata_i', [['-', 'N_PERF_COUNTERS', 1], 0]], ['~', 'PCER_q']]]]]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'id_valid_q', ['bin', '1', '0']], ['<=', 'PCER_q', ['dig', 32, '0']], ['<=', 'PCMR_q', ['hex', '2', '3']], ['for', ['list', ['=', 'i', 0]], ['<', 'i', 'N_PERF_REGS'], ['list', ['=', 'i', ['+', 'i', 1]]], ['list', ['<=', ['subbit', 'PCCR_q', 'i'], ['dig', 32, '0']], ['<=', ['subbit', 'PCCR_inc_q', 'i'], ['dig', 32, '0']]]]], ['list', ['<=', 'id_valid_q', 'id_valid_i'], ['<=', 'PCER_q', 'PCER_n'], ['<=', 'PCMR_q', 'PCMR_n'], ['for', ['list', ['=', 'i', 0]], ['<', 'i', 'N_PERF_REGS'], ['list', ['=', 'i', ['+', 'i', 1]]], ['list', ['<=', ['subbit', 'PCCR_q', 'i'], ['subbit', 'PCCR_n', 'i']], ['<=', ['subbit', 'PCCR_inc_q', 'i'], ['subbit', 'PCCR_inc', 'i']]]]]]], 'always']
    generate [['genvar', 'gi'], ['for', ['list', ['=', 'gi', 0]], ['<', 'gi', 'N_EXT_CNT'], ['list', ['=', 'gi', ['+', 'gi', 1]]], ['named_begin', 'g_extcounters', ['list', ['assigns', ['=', ['subbit', 'PCCR_in', ['+', ['-', 'N_PERF_COUNTERS', 'N_EXT_CNT'], 'gi']], ['subbit', 'ext_counters_i', 'gi']]]]]]]
endmodule
