module zeroriscy_register_file
    parameter RV32E 0
    parameter DATA_WIDTH 32
    net waddr_onehot_a ('reg', (['-', 'NUM_WORDS', 1], 1))
    net rst_n ('input', 0)
    net j ('wire', (31, 0))
    net raddr_a_int ('wire', (['-', 'ADDR_WIDTH', 1], 0))
    net raddr_a_i ('input', (4, 0))
    net raddr_b_i ('input', (4, 0))
    net mem ('reg', ['packed', (['-', 'DATA_WIDTH', 1], 0), (['-', 'NUM_WORDS', 1], 0)])
    net clk ('input', 0)
    net k ('reg', (31, 0))
    net test_en_i ('input', 0)
    net we_a_i ('input', 0)
    net raddr_b_int ('wire', (['-', 'ADDR_WIDTH', 1], 0))
    net i ('reg', (31, 0))
    net waddr_a_int ('wire', (['-', 'ADDR_WIDTH', 1], 0))
    net rdata_a_o ('output', (['-', 'DATA_WIDTH', 1], 0))
    net wdata_a_i ('input', (['-', 'DATA_WIDTH', 1], 0))
    net clk_int ('wire', 0)
    net waddr_a_i ('input', (4, 0))
    net rdata_b_o ('output', (['-', 'DATA_WIDTH', 1], 0))
    net mem_clocks ('wire', (['-', 'NUM_WORDS', 1], 1))
    net wdata_a_q ('reg', (['-', 'DATA_WIDTH', 1], 0))
    assign ('raddr_a_int', ['subbus', 'raddr_a_i', [['-', 'ADDR_WIDTH', 1], 0]], '', '')
    assign ('raddr_b_int', ['subbus', 'raddr_b_i', [['-', 'ADDR_WIDTH', 1], 0]], '', '')
    assign ('waddr_a_int', ['subbus', 'waddr_a_i', [['-', 'ADDR_WIDTH', 1], 0]], '', '')
    assign ('rdata_a_o', ['subbit', 'mem', 'raddr_a_int'], '', '')
    assign ('rdata_b_o', ['subbit', 'mem', 'raddr_b_int'], '', '')
    always [['list', ['edge', 'posedge', 'clk_int'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'sample_waddr', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'wdata_a_q', ['dig', 32, '0']]], ['list', ['if', 'we_a_i', ['<=', 'wdata_a_q', 'wdata_a_i']]]]]], 'always']
    always ['*', ['named_begin', 'p_WADa', ['list', ['for', ['list', ['=', 'i', 1]], ['<', 'i', 'NUM_WORDS'], ['list', ['=', 'i', ['+', 'i', 1]]], ['named_begin', 'p_WordItera', ['list', ['ifelse', ['&&', 'we_a_i', ['==', 'waddr_a_int', 'i']], ['=', ['subbit', 'waddr_onehot_a', 'i'], ['bin', '1', '1']], ['=', ['subbit', 'waddr_onehot_a', 'i'], ['bin', '1', '0']]]]]]]], 'always']
    always ['*', ['named_begin', 'latch_wdata', ['list', ['=', ['subbit', 'mem', 0], ['dig', 32, '0']], ['for', ['list', ['=', 'k', 1]], ['<', 'k', 'NUM_WORDS'], ['list', ['=', 'k', ['+', 'k', 1]]], ['named_begin', 'w_WordIter', ['list', ['if', ['subbit', 'mem_clocks', 'k'], ['=', ['subbit', 'mem', 'k'], 'wdata_a_q']]]]]]], 'always']
    generate ['for', ['list', ['=', 'x', 1]], ['<', 'x', 'NUM_WORDS'], ['list', ['=', 'x', ['+', 'x', 1]]], ['named_begin', 'CG_CELL_WORD_ITER', ['list', ['instance', 'cluster_clock_gating', 'CG_Inst', {}, [['clk_i', 'clk_int'], ['en_i', ['subbit', 'waddr_onehot_a', 'x']], ['test_en_i', 'test_en_i'], ['clk_o', ['subbit', 'mem_clocks', 'x']]]]]]]
instance cluster_clock_gating CG_WE_GLOBAL
      conn pin=en_i sig=we_a_i
      conn pin=test_en_i sig=test_en_i
      conn pin=clk_o sig=clk_int
      conn pin=clk_i sig=clk
endmodule
