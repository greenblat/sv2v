module riscv_id_stage #( parameter WAPUTYPE = 0,parameter N_HWLP_BITS = $clog2(N_HWLP),parameter SHARED_FP_DIVSQRT = 0,parameter APU_NARGS_CPU = 3,parameter APU_WOP_CPU = 6,parameter SHARED_INT_DIV = 0,parameter APU = 0,parameter FPU = 0,parameter APU_NDSFLAGS_CPU = 15,parameter APU_NUSFLAGS_CPU = 5,parameter PULP_SECURE = 0,parameter N_HWLP = 2,parameter SHARED_FP = 0,parameter SHARED_DSP_MULT = 0) (
    output reg  alu_en_ex_o
    ,output reg [31:0] alu_operand_a_ex_o
    ,output reg [31:0] alu_operand_b_ex_o
    ,output reg [31:0] alu_operand_c_ex_o
    ,output reg [(ALU_OP_WIDTH - 1):0] alu_operator_ex_o
    ,output reg [1:0] alu_vec_mode_ex_o
    ,input  apu_busy_i
    ,output reg  apu_en_ex_o
    ,output reg [(APU_NDSFLAGS_CPU - 1):0] apu_flags_ex_o
    ,output reg [1:0] apu_lat_ex_o
    ,output reg [(APU_WOP_CPU - 1):0] apu_op_ex_o
    ,output reg [31:0] [(APU_NARGS_CPU - 1):0] apu_operands_ex_o
    ,output  apu_perf_dep_o
    ,input  apu_read_dep_i
    ,output [2:0] [5:0] apu_read_regs_o
    ,output [2:0] apu_read_regs_valid_o
    ,output reg [(WAPUTYPE - 1):0] apu_type_ex_o
    ,output reg [5:0] apu_waddr_ex_o
    ,input  apu_write_dep_i
    ,output [1:0] [5:0] apu_write_regs_o
    ,output [1:0] apu_write_regs_valid_o
    ,output reg [4:0] bmask_a_ex_o
    ,output reg [4:0] bmask_b_ex_o
    ,input  branch_decision_i
    ,output reg  branch_in_ex_o
    ,output  clear_instr_valid_o
    ,input  clk
    ,output  core_ctrl_firstfetch_o
    ,output reg  csr_access_ex_o
    ,output [5:0] csr_cause_o
    ,input [31:0] csr_hwlp_data_i
    ,input [(N_HWLP_BITS - 1):0] csr_hwlp_regid_i
    ,input [2:0] csr_hwlp_we_i
    ,output  csr_irq_sec_o
    ,output reg [1:0] csr_op_ex_o
    ,output  csr_restore_mret_id_o
    ,output  csr_restore_uret_id_o
    ,output  csr_save_cause_o
    ,output  csr_save_id_o
    ,output  csr_save_if_o
    ,output  ctrl_busy_o
    ,input [1:0] current_priv_lvl_i
    ,output reg  data_load_event_ex_o
    ,output reg  data_misaligned_ex_o
    ,input  data_misaligned_i
    ,output reg [1:0] data_reg_offset_ex_o
    ,output reg  data_req_ex_o
    ,output reg  data_sign_ext_ex_o
    ,output reg [1:0] data_type_ex_o
    ,output reg  data_we_ex_o
    ,output  dbg_ack_o
    ,input  dbg_jump_req_i
    ,input [5:0] dbg_reg_raddr_i
    ,output [31:0] dbg_reg_rdata_o
    ,input  dbg_reg_rreq_i
    ,input [5:0] dbg_reg_waddr_i
    ,input [31:0] dbg_reg_wdata_i
    ,input  dbg_reg_wreq_i
    ,input  dbg_req_i
    ,input [(DBG_SETS_W - 1):0] dbg_settings_i
    ,input  dbg_stall_i
    ,output  dbg_trap_o
    ,input  ex_ready_i
    ,input  ex_valid_i
    ,output [5:0] exc_cause_o
    ,output [1:0] exc_pc_mux_o
    ,input  fetch_enable_i
    ,output reg [(C_CMD - 1):0] fpu_op_ex_o
    ,input [(C_RM - 1):0] frm_i
    ,output  halt_if_o
    ,output [(N_HWLP - 1):0] [31:0] hwlp_cnt_o
    ,input [(N_HWLP - 1):0] hwlp_dec_cnt_i
    ,output [(N_HWLP - 1):0] [31:0] hwlp_end_o
    ,output [(N_HWLP - 1):0] [31:0] hwlp_start_o
    ,output  id_ready_o
    ,output  id_valid_o
    ,input  illegal_c_insn_i
    ,output reg [1:0] imm_vec_ext_ex_o
    ,input [31:0] instr_rdata_i
    ,output  instr_req_o
    ,input  instr_valid_i
    ,output  irq_ack_o
    ,input  irq_i
    ,input [4:0] irq_id_i
    ,output [4:0] irq_id_o
    ,input  irq_sec_i
    ,input  is_compressed_i
    ,output  is_decoding_o
    ,input  is_hwlp_i
    ,output [31:0] jump_target_o
    ,input  lsu_load_err_i
    ,input  lsu_store_err_i
    ,input  m_irq_enable_i
    ,output reg [31:0] mult_dot_op_a_ex_o
    ,output reg [31:0] mult_dot_op_b_ex_o
    ,output reg [31:0] mult_dot_op_c_ex_o
    ,output reg [1:0] mult_dot_signed_ex_o
    ,output reg  mult_en_ex_o
    ,output reg [4:0] mult_imm_ex_o
    ,input  mult_multicycle_i
    ,output reg [31:0] mult_operand_a_ex_o
    ,output reg [31:0] mult_operand_b_ex_o
    ,output reg [31:0] mult_operand_c_ex_o
    ,output reg [2:0] mult_operator_ex_o
    ,output reg  mult_sel_subword_ex_o
    ,output reg [1:0] mult_signed_mode_ex_o
    ,output reg [31:0] pc_ex_o
    ,input [31:0] pc_id_i
    ,input [31:0] pc_if_i
    ,output [2:0] pc_mux_o
    ,output  pc_set_o
    ,output  perf_jr_stall_o
    ,output  perf_jump_o
    ,output  perf_ld_stall_o
    ,output reg  prepost_useincr_ex_o
    ,output reg [5:0] regfile_alu_waddr_ex_o
    ,input [5:0] regfile_alu_waddr_fw_i
    ,input [31:0] regfile_alu_wdata_fw_i
    ,output reg  regfile_alu_we_ex_o
    ,input  regfile_alu_we_fw_i
    ,output reg [5:0] regfile_waddr_ex_o
    ,input [5:0] regfile_waddr_wb_i
    ,input [31:0] regfile_wdata_wb_i
    ,output reg  regfile_we_ex_o
    ,input  regfile_we_wb_i
    ,input  rst_n
    ,input  test_en_i
    ,output  trap_addr_mux_o
    ,input  u_irq_enable_i
    ,input  wb_ready_i
);
localparam ALU_SLTU = 7'b0000011;
localparam VEC_MODE8 = 2'b11;
localparam BMASK_B_ZERO = 2'b10;
localparam BMASK_B_REG = 1'b0;
localparam MIMM_ZERO = 1'b0;
localparam OP_B_IMM = 3'b010;
localparam OP_A_REGB_OR_FWD = 3'b011;
localparam OP_A_REGA_OR_FWD = 3'b000;
localparam OP_C_REGB_OR_FWD = 2'b01;
localparam BMASK_A_S3 = 1'b1;
localparam JT_JALR = 2'b10;
localparam OP_B_REGA_OR_FWD = 3'b011;
localparam IMMB_SHUF = 4'b1000;
localparam IMMB_CLIP = 4'b1001;
localparam OP_B_REGB_OR_FWD = 3'b000;
localparam IMMB_S2 = 4'b0100;
localparam IMMB_S3 = 4'b0101;
localparam BMASK_A_REG = 1'b0;
localparam REGC_ZERO = 2'b11;
localparam BMASK_A_ZERO = 1'b0;
localparam IMMB_U = 4'b0010;
localparam C_CMD = 4;
localparam OP_B_REGC_OR_FWD = 3'b001;
localparam SEL_FW_EX = 2'b01;
localparam IMMB_VU = 4'b0111;
localparam IMMB_VS = 4'b0110;
localparam MIMM_S3 = 1'b1;
localparam ALU_OP_WIDTH = 7;
localparam IMMB_I = 4'b0000;
localparam SEL_REGFILE = 2'b00;
localparam IMMA_ZERO = 1'b1;
localparam JT_JAL = 2'b01;
localparam DBG_SETS_W = 6;
localparam REGC_RD = 2'b01;
localparam OP_C_REGC_OR_FWD = 2'b00;
localparam BRANCH_COND = 2'b11;
localparam IMMA_Z = 1'b0;
localparam BMASK_A_IMM = 1'b1;
localparam IMMB_PCINCR = 4'b0011;
localparam IMMB_BI = 4'b1011;
localparam OP_A_IMM = 3'b010;
localparam OP_A_CURRPC = 3'b001;
localparam C_RM = 3;
localparam BMASK_B_IMM = 1'b1;
localparam SEL_FW_WB = 2'b10;
localparam OP_B_BMASK = 3'b100;
localparam JT_COND = 2'b11;
localparam BMASK_B_ONE = 2'b11;
localparam IMMB_S = 4'b0001;
localparam OP_C_JT = 2'b10;
localparam OP_A_REGC_OR_FWD = 3'b100;
localparam BMASK_B_S3 = 2'b01;
localparam REGC_S1 = 2'b10;
localparam CSR_OP_NONE = 2'b00;
localparam REGC_S4 = 2'b00;
localparam BMASK_B_S2 = 2'b00;
wire  data_sign_ext_id;
wire [5:0] apu_waddr;
wire  hwloop_start_mux_sel;
wire [2:0] alu_op_a_mux_sel;
reg [2:0] [5:0] apu_read_regs;
wire [31:0] regfile_data_rb_id;
wire  reg_d_wb_is_reg_c_id;
wire  instr_multicycle;
wire  regb_used_dec;
wire [31:0] imm_shuffleb_type;
wire  exc_kill;
wire [1:0] jump_in_id;
wire [31:0] [(APU_NARGS_CPU - 1):0] apu_operands;
wire [(WAPUTYPE - 1):0] apu_flags_src;
wire  data_req_id;
wire  regfile_alu_we_id;
wire  regc_used_dec;
wire [1:0] operand_b_fw_mux_sel;
wire  regfile_we_id;
wire  uret_insn_dec;
reg [31:0] operand_a_fw_id;
wire  reg_d_wb_is_reg_b_id;
wire [31:0] imm_u_type;
wire  regfile_fp_d;
wire [1:0] apu_lat;
wire [2:0] hwloop_we;
wire [31:0] imm_bi_type;
wire [31:0] hwloop_start;
wire  regfile_fp_b;
wire  regfile_fp_c;
wire [(WAPUTYPE - 1):0] apu_type;
wire  exc_ack;
wire  reg_d_ex_is_reg_c_id;
wire [31:0] imm_uj_type;
reg [4:0] bmask_b_id_imm;
wire [5:0] regfile_addr_ra_id;
wire [(ALU_OP_WIDTH - 1):0] alu_operator;
wire  data_load_event_id;
wire  apu_stall;
wire  hwloop_cnt_mux_sel;
wire  mult_sel_subword;
wire [1:0] data_type_id;
wire [31:0] imm_z_type;
wire  deassert_we;
wire  reg_d_alu_is_reg_c_id;
wire [1:0] mult_dot_signed;
reg [31:0] operand_c_fw_id;
wire [31:0] imm_vu_type;
wire [1:0] jump_in_dec;
wire  csr_access;
wire [1:0] csr_op;
wire [4:0] irq_id_ctrl;
reg [4:0] bmask_a_id;
wire [(C_CMD - 1):0] fpu_op;
reg [4:0] bmask_b_id;
wire [31:0] alu_operand_b;
wire [31:0] imm_clip_type;
wire [(N_HWLP_BITS - 1):0] hwloop_regid_int;
wire  prepost_useincr;
reg [31:0] imm_b;
reg [31:0] imm_a;
wire  illegal_insn_dec;
wire  rega_used_dec;
wire [31:0] hwloop_cnt;
wire [5:0] regfile_alu_waddr_id;
wire  regfile_alu_waddr_mux_sel;
wire [31:0] imm_s_type;
wire  misaligned_stall;
wire [1:0] alu_op_c_mux_sel;
wire [31:0] hwloop_end;
wire  mult_en;
wire [(APU_WOP_CPU - 1):0] apu_op;
reg [4:0] mult_imm_id;
wire  load_stall;
wire  csr_status;
wire [2:0] mult_operator;
wire [1:0] bmask_b_mux;
wire [31:0] imm_shuffleh_type;
wire [1:0] operand_a_fw_mux_sel;
wire [1:0] alu_vec_mode;
wire  ebrk_insn;
wire  scalar_replication;
wire [1:0] mult_signed_mode;
wire  reg_d_alu_is_reg_b_id;
wire  reg_d_alu_is_reg_a_id;
wire  data_we_id;
wire [1:0] operand_c_fw_mux_sel;
wire [31:0] imm_s3_type;
wire [0:0] mult_imm_mux;
wire [(N_HWLP_BITS - 1):0] hwloop_regid;
wire [(APU_NDSFLAGS_CPU - 1):0] apu_flags_regs;
wire  mret_insn_dec;
wire [2:0] fp_rnd_mode;
wire [1:0] jump_target_mux_sel;
wire [5:0] regfile_addr_rb_id;
wire [31:0] imm_s2_type;
wire [0:0] bmask_a_mux;
reg [2:0] apu_read_regs_valid;
wire  pipe_flush_dec;
wire [31:0] instr;
wire [31:0] imm_sb_type;
wire  irq_req_ctrl;
wire [31:0] regfile_data_rc_id;
reg [31:0] operand_b;
wire  jr_stall;
wire [1:0] data_reg_offset_id;
wire [(APU_NDSFLAGS_CPU - 1):0] apu_flags;
reg [31:0] operand_b_vec;
reg [31:0] imm_shuffle_type;
wire  irq_sec_ctrl;
wire [1:0] imm_vec_ext_id;
wire  alu_bmask_a_mux_sel;
wire [3:0] imm_b_mux_sel;
wire  apu_en;
wire  hwloop_target_mux_sel;
wire [2:0] alu_op_b_mux_sel;
wire [1:0] [5:0] apu_write_regs;
reg [4:0] bmask_a_id_imm;
reg [31:0] jump_target;
reg [5:0] regfile_addr_rc_id;
wire  reg_d_ex_is_reg_b_id;
wire  csr_apu_stall;
wire [0:0] imm_a_mux_sel;
wire  reg_d_wb_is_reg_a_id;
reg [31:0] hwloop_cnt_int;
wire  alu_en;
reg [31:0] hwloop_target;
wire  mult_int_en;
wire  branch_taken_ex;
wire [31:0] regfile_data_ra_id;
wire [1:0] apu_write_regs_valid;
reg [31:0] alu_operand_a;
wire  halt_id;
reg [31:0] alu_operand_c;
wire  alu_bmask_b_mux_sel;
reg [31:0] hwloop_start_int;
wire [2:0] hwloop_we_int;
wire [31:0] imm_vs_type;
wire  hwloop_valid;
wire [31:0] imm_iz_type;
reg [31:0] operand_b_fw_id;
wire  ecall_insn_dec;
wire [31:0] imm_i_type;
wire [5:0] regfile_waddr_id;
wire [1:0] regc_mux;
wire  mult_dot_en;
wire  reg_d_ex_is_reg_a_id;
wire  regfile_fp_a;
genvar i;
assign   instr = instr_rdata_i;
assign   imm_i_type = {{ 20 { instr[31:31] }}, instr[31:20]};
assign   imm_iz_type = {20'b0, instr[31:20]};
assign   imm_s_type = {{ 20 { instr[31:31] }}, instr[31:25], instr[11:7]};
assign   imm_sb_type = {{ 19 { instr[31:31] }}, instr[31], instr[7], instr[30:25], instr[11:8], 1'b0};
assign   imm_u_type = {instr[31:12], 12'b0};
assign   imm_uj_type = {{ 12 { instr[31:31] }}, instr[19:12], instr[20], instr[30:21], 1'b0};
assign   imm_z_type = {27'b0, instr[19:15]};
assign   imm_s2_type = {27'b0, instr[24:20]};
assign   imm_bi_type = {{ 27 { instr[24:24] }}, instr[24:20]};
assign   imm_s3_type = {27'b0, instr[29:25]};
assign   imm_vs_type = {{ 26 { instr[24:24] }}, instr[24:20], instr[25]};
assign   imm_vu_type = {26'b0, instr[24:20], instr[25]};
assign   imm_shuffleb_type = {6'b0, instr[28:27], 6'b0, instr[24:23], 6'b0, instr[22:21], 6'b0, instr[20], instr[25]};
assign   imm_shuffleh_type = {15'h0, instr[20], 15'h0, instr[25]};
assign   imm_clip_type = (32'h1 << instr[24:20]) - 1;
assign   regfile_addr_ra_id = {regfile_fp_a, instr[19:15]};
assign   regfile_addr_rb_id = {regfile_fp_b, instr[24:20]};
assign   regfile_waddr_id = {regfile_fp_d, instr[11:7]};
assign   regfile_alu_waddr_id = regfile_alu_waddr_mux_sel ? regfile_waddr_id : regfile_addr_ra_id;
assign   reg_d_ex_is_reg_a_id = ((regfile_waddr_ex_o == regfile_addr_ra_id) && rega_used_dec) && (regfile_addr_ra_id != 32'd0);
assign   reg_d_ex_is_reg_b_id = ((regfile_waddr_ex_o == regfile_addr_rb_id) && regb_used_dec) && (regfile_addr_rb_id != 32'd0);
assign   reg_d_ex_is_reg_c_id = ((regfile_waddr_ex_o == regfile_addr_rc_id) && regc_used_dec) && (regfile_addr_rc_id != 32'd0);
assign   reg_d_wb_is_reg_a_id = ((regfile_waddr_wb_i == regfile_addr_ra_id) && rega_used_dec) && (regfile_addr_ra_id != 32'd0);
assign   reg_d_wb_is_reg_b_id = ((regfile_waddr_wb_i == regfile_addr_rb_id) && regb_used_dec) && (regfile_addr_rb_id != 32'd0);
assign   reg_d_wb_is_reg_c_id = ((regfile_waddr_wb_i == regfile_addr_rc_id) && regc_used_dec) && (regfile_addr_rc_id != 32'd0);
assign   reg_d_alu_is_reg_a_id = ((regfile_alu_waddr_fw_i == regfile_addr_ra_id) && rega_used_dec) && (regfile_addr_ra_id != 32'd0);
assign   reg_d_alu_is_reg_b_id = ((regfile_alu_waddr_fw_i == regfile_addr_rb_id) && regb_used_dec) && (regfile_addr_rb_id != 32'd0);
assign   reg_d_alu_is_reg_c_id = ((regfile_alu_waddr_fw_i == regfile_addr_rc_id) && regc_used_dec) && (regfile_addr_rc_id != 32'd0);
assign   clear_instr_valid_o = (id_ready_o | halt_id) | branch_taken_ex;
assign   branch_taken_ex = branch_in_ex_o & branch_decision_i;
assign   mult_en = mult_int_en | mult_dot_en;
assign   hwloop_regid_int = instr[7];
assign   hwloop_start = hwloop_we_int[0] ? hwloop_start_int : csr_hwlp_data_i;
assign   hwloop_end = hwloop_we_int[1] ? hwloop_target : csr_hwlp_data_i;
assign   hwloop_cnt = hwloop_we_int[2] ? hwloop_cnt_int : csr_hwlp_data_i;
assign   hwloop_regid = (|hwloop_we_int) ? hwloop_regid_int : csr_hwlp_regid_i;
assign   hwloop_we = (|hwloop_we_int) ? hwloop_we_int : csr_hwlp_we_i;
assign   jump_target_o = jump_target;
assign   alu_operand_b = scalar_replication ? operand_b_vec : operand_b;
assign   imm_vec_ext_id = imm_vu_type[1:0];
assign   apu_perf_dep_o = apu_stall;
assign   csr_apu_stall = csr_access & ((apu_en_ex_o & apu_lat_ex_o[1]) | apu_busy_i);
assign   dbg_reg_rdata_o = regfile_data_rc_id;
assign   hwloop_valid = (instr_valid_i & clear_instr_valid_o) & is_hwlp_i;
assign   id_ready_o = (((((~misaligned_stall) & (~jr_stall)) & (~load_stall)) & (~apu_stall)) & (~csr_apu_stall)) & ex_ready_i;
assign   id_valid_o = (~halt_id) & id_ready_o;
riscv_controller #(.FPU(FPU)) controller_i (.apu_en_i(apu_en)
 ,.apu_read_dep_i(apu_read_dep_i)
 ,.apu_stall_o(apu_stall)
 ,.apu_write_dep_i(apu_write_dep_i)
 ,.branch_taken_ex_i(branch_taken_ex)
 ,.clk(clk)
 ,.csr_cause_o(csr_cause_o)
 ,.csr_irq_sec_o(csr_irq_sec_o)
 ,.csr_restore_mret_id_o(csr_restore_mret_id_o)
 ,.csr_restore_uret_id_o(csr_restore_uret_id_o)
 ,.csr_save_cause_o(csr_save_cause_o)
 ,.csr_save_id_o(csr_save_id_o)
 ,.csr_save_if_o(csr_save_if_o)
 ,.csr_status_i(csr_status)
 ,.ctrl_busy_o(ctrl_busy_o)
 ,.current_priv_lvl_i(current_priv_lvl_i)
 ,.data_load_event_i(data_load_event_id)
 ,.data_misaligned_i(data_misaligned_i)
 ,.data_req_ex_i(data_req_ex_o)
 ,.dbg_ack_o(dbg_ack_o)
 ,.dbg_jump_req_i(dbg_jump_req_i)
 ,.dbg_req_i(dbg_req_i)
 ,.dbg_settings_i(dbg_settings_i)
 ,.dbg_stall_i(dbg_stall_i)
 ,.dbg_trap_o(dbg_trap_o)
 ,.deassert_we_o(deassert_we)
 ,.ebrk_insn_i(ebrk_insn)
 ,.ecall_insn_i(ecall_insn_dec)
 ,.ex_valid_i(ex_valid_i)
 ,.exc_ack_o(exc_ack)
 ,.exc_cause_o(exc_cause_o)
 ,.exc_kill_o(exc_kill)
 ,.exc_pc_mux_o(exc_pc_mux_o)
 ,.fetch_enable_i(fetch_enable_i)
 ,.first_fetch_o(core_ctrl_firstfetch_o)
 ,.halt_id_o(halt_id)
 ,.halt_if_o(halt_if_o)
 ,.id_ready_i(id_ready_o)
 ,.illegal_insn_i(illegal_insn_dec)
 ,.instr_multicycle_i(instr_multicycle)
 ,.instr_req_o(instr_req_o)
 ,.instr_valid_i(instr_valid_i)
 ,.irq_ack_o(irq_ack_o)
 ,.irq_id_ctrl_i(irq_id_ctrl)
 ,.irq_id_o(irq_id_o)
 ,.irq_req_ctrl_i(irq_req_ctrl)
 ,.irq_sec_ctrl_i(irq_sec_ctrl)
 ,.is_decoding_o(is_decoding_o)
 ,.jr_stall_o(jr_stall)
 ,.jump_in_dec_i(jump_in_dec)
 ,.jump_in_id_i(jump_in_id)
 ,.load_stall_o(load_stall)
 ,.m_IE_i(m_irq_enable_i)
 ,.misaligned_stall_o(misaligned_stall)
 ,.mret_insn_i(mret_insn_dec)
 ,.mult_multicycle_i(mult_multicycle_i)
 ,.operand_a_fw_mux_sel_o(operand_a_fw_mux_sel)
 ,.operand_b_fw_mux_sel_o(operand_b_fw_mux_sel)
 ,.operand_c_fw_mux_sel_o(operand_c_fw_mux_sel)
 ,.pc_mux_o(pc_mux_o)
 ,.pc_set_o(pc_set_o)
 ,.perf_jr_stall_o(perf_jr_stall_o)
 ,.perf_jump_o(perf_jump_o)
 ,.perf_ld_stall_o(perf_ld_stall_o)
 ,.pipe_flush_i(pipe_flush_dec)
 ,.reg_d_alu_is_reg_a_i(reg_d_alu_is_reg_a_id)
 ,.reg_d_alu_is_reg_b_i(reg_d_alu_is_reg_b_id)
 ,.reg_d_alu_is_reg_c_i(reg_d_alu_is_reg_c_id)
 ,.reg_d_ex_is_reg_a_i(reg_d_ex_is_reg_a_id)
 ,.reg_d_ex_is_reg_b_i(reg_d_ex_is_reg_b_id)
 ,.reg_d_ex_is_reg_c_i(reg_d_ex_is_reg_c_id)
 ,.reg_d_wb_is_reg_a_i(reg_d_wb_is_reg_a_id)
 ,.reg_d_wb_is_reg_b_i(reg_d_wb_is_reg_b_id)
 ,.reg_d_wb_is_reg_c_i(reg_d_wb_is_reg_c_id)
 ,.regfile_alu_waddr_id_i(regfile_alu_waddr_id)
 ,.regfile_alu_we_fw_i(regfile_alu_we_fw_i)
 ,.regfile_waddr_ex_i(regfile_waddr_ex_o)
 ,.regfile_we_ex_i(regfile_we_ex_o)
 ,.regfile_we_wb_i(regfile_we_wb_i)
 ,.rst_n(rst_n)
 ,.trap_addr_mux_o(trap_addr_mux_o)
 ,.u_IE_i(u_irq_enable_i)
 ,.uret_insn_i(uret_insn_dec)
 ,.wb_ready_i(wb_ready_i));
riscv_register_file #(.FPU(FPU), .ADDR_WIDTH(6)) registers_i (.clk(clk)
 ,.raddr_a_i(regfile_addr_ra_id)
 ,.raddr_b_i(regfile_addr_rb_id)
 ,.raddr_c_i((dbg_reg_rreq_i == 1'b0) ? regfile_addr_rc_id : dbg_reg_raddr_i)
 ,.rdata_a_o(regfile_data_ra_id)
 ,.rdata_b_o(regfile_data_rb_id)
 ,.rdata_c_o(regfile_data_rc_id)
 ,.rst_n(rst_n)
 ,.test_en_i(test_en_i)
 ,.waddr_a_i(regfile_waddr_wb_i)
 ,.waddr_b_i((dbg_reg_wreq_i == 1'b0) ? regfile_alu_waddr_fw_i : dbg_reg_waddr_i)
 ,.wdata_a_i(regfile_wdata_wb_i)
 ,.wdata_b_i((dbg_reg_wreq_i == 1'b0) ? regfile_alu_wdata_fw_i : dbg_reg_wdata_i)
 ,.we_a_i(regfile_we_wb_i)
 ,.we_b_i((dbg_reg_wreq_i == 1'b0) ? regfile_alu_we_fw_i : 1'b1));
riscv_hwloop_regs #(.N_REGS(N_HWLP)) hwloop_regs_i (.clk(clk)
 ,.hwlp_cnt_data_i(hwloop_cnt)
 ,.hwlp_counter_o(hwlp_cnt_o)
 ,.hwlp_dec_cnt_i(hwlp_dec_cnt_i)
 ,.hwlp_end_addr_o(hwlp_end_o)
 ,.hwlp_end_data_i(hwloop_end)
 ,.hwlp_regid_i(hwloop_regid)
 ,.hwlp_start_addr_o(hwlp_start_o)
 ,.hwlp_start_data_i(hwloop_start)
 ,.hwlp_we_i(hwloop_we)
 ,.rst_n(rst_n)
 ,.valid_i(hwloop_valid));
riscv_decoder #(.WAPUTYPE(WAPUTYPE), .SHARED_FP_DIVSQRT(SHARED_FP_DIVSQRT), .APU_WOP_CPU(APU_WOP_CPU), .SHARED_INT_DIV(SHARED_INT_DIV), .FPU(FPU), .PULP_SECURE(PULP_SECURE), .SHARED_FP(SHARED_FP), .SHARED_DSP_MULT(SHARED_DSP_MULT)) decoder_i (.alu_bmask_a_mux_sel_o(alu_bmask_a_mux_sel)
 ,.alu_bmask_b_mux_sel_o(alu_bmask_b_mux_sel)
 ,.alu_en_o(alu_en)
 ,.alu_op_a_mux_sel_o(alu_op_a_mux_sel)
 ,.alu_op_b_mux_sel_o(alu_op_b_mux_sel)
 ,.alu_op_c_mux_sel_o(alu_op_c_mux_sel)
 ,.alu_operator_o(alu_operator)
 ,.alu_vec_mode_o(alu_vec_mode)
 ,.apu_en_o(apu_en)
 ,.apu_flags_src_o(apu_flags_src)
 ,.apu_lat_o(apu_lat)
 ,.apu_op_o(apu_op)
 ,.apu_type_o(apu_type)
 ,.bmask_a_mux_o(bmask_a_mux)
 ,.bmask_b_mux_o(bmask_b_mux)
 ,.csr_access_o(csr_access)
 ,.csr_op_o(csr_op)
 ,.csr_status_o(csr_status)
 ,.current_priv_lvl_i(current_priv_lvl_i)
 ,.data_load_event_o(data_load_event_id)
 ,.data_misaligned_i(data_misaligned_i)
 ,.data_reg_offset_o(data_reg_offset_id)
 ,.data_req_o(data_req_id)
 ,.data_sign_extension_o(data_sign_ext_id)
 ,.data_type_o(data_type_id)
 ,.data_we_o(data_we_id)
 ,.deassert_we_i(deassert_we)
 ,.ebrk_insn_o(ebrk_insn)
 ,.ecall_insn_o(ecall_insn_dec)
 ,.fp_rnd_mode_o(fp_rnd_mode)
 ,.fpu_op_o(fpu_op)
 ,.hwloop_cnt_mux_sel_o(hwloop_cnt_mux_sel)
 ,.hwloop_start_mux_sel_o(hwloop_start_mux_sel)
 ,.hwloop_target_mux_sel_o(hwloop_target_mux_sel)
 ,.hwloop_we_o(hwloop_we_int)
 ,.illegal_c_insn_i(illegal_c_insn_i)
 ,.illegal_insn_o(illegal_insn_dec)
 ,.imm_a_mux_sel_o(imm_a_mux_sel)
 ,.imm_b_mux_sel_o(imm_b_mux_sel)
 ,.instr_multicycle_o(instr_multicycle)
 ,.instr_rdata_i(instr)
 ,.jump_in_dec_o(jump_in_dec)
 ,.jump_in_id_o(jump_in_id)
 ,.jump_target_mux_sel_o(jump_target_mux_sel)
 ,.mret_insn_o(mret_insn_dec)
 ,.mult_dot_en_o(mult_dot_en)
 ,.mult_dot_signed_o(mult_dot_signed)
 ,.mult_imm_mux_o(mult_imm_mux)
 ,.mult_int_en_o(mult_int_en)
 ,.mult_multicycle_i(mult_multicycle_i)
 ,.mult_operator_o(mult_operator)
 ,.mult_sel_subword_o(mult_sel_subword)
 ,.mult_signed_mode_o(mult_signed_mode)
 ,.pipe_flush_o(pipe_flush_dec)
 ,.prepost_useincr_o(prepost_useincr)
 ,.reg_fp_a_o(regfile_fp_a)
 ,.reg_fp_b_o(regfile_fp_b)
 ,.reg_fp_c_o(regfile_fp_c)
 ,.reg_fp_d_o(regfile_fp_d)
 ,.rega_used_o(rega_used_dec)
 ,.regb_used_o(regb_used_dec)
 ,.regc_mux_o(regc_mux)
 ,.regc_used_o(regc_used_dec)
 ,.regfile_alu_waddr_sel_o(regfile_alu_waddr_mux_sel)
 ,.regfile_alu_we_o(regfile_alu_we_id)
 ,.regfile_mem_we_o(regfile_we_id)
 ,.scalar_replication_o(scalar_replication)
 ,.uret_insn_o(uret_insn_dec));
riscv_int_controller #(.PULP_SECURE(PULP_SECURE)) int_controller_i (.clk(clk)
 ,.ctrl_ack_i(exc_ack)
 ,.ctrl_kill_i(exc_kill)
 ,.current_priv_lvl_i(current_priv_lvl_i)
 ,.irq_i(irq_i)
 ,.irq_id_ctrl_o(irq_id_ctrl)
 ,.irq_id_i(irq_id_i)
 ,.irq_req_ctrl_o(irq_req_ctrl)
 ,.irq_sec_ctrl_o(irq_sec_ctrl)
 ,.irq_sec_i(irq_sec_i)
 ,.m_IE_i(m_irq_enable_i)
 ,.rst_n(rst_n)
 ,.u_IE_i(u_irq_enable_i));
generate
    if(APU == 1) begin
        begin :apu_op_preparation
            if(APU_NARGS_CPU >= 1) begin
assign apu_operands[0] = alu_operand_a;
            end
            if(APU_NARGS_CPU >= 2) begin
assign apu_operands[1] = alu_operand_b;
            end
            if(APU_NARGS_CPU >= 3) begin
assign apu_operands[2] = alu_operand_c;
            end
assign apu_waddr = regfile_alu_waddr_id;
assign apu_flags = apu_flags_reg;
always @(*) begin
    case (apu_flags_src)
        APU_FLAGS_INT_MULT: apu_flags_reg = {7'h0, mult_imm_id, mult_signed_mode, mult_sel_subword};
        APU_FLAGS_DSP_MULT: apu_flags_reg = {13'h0, mult_dot_signed};
        APU_FLAGS_FP: if(FPU) begin
            if(fp_rnd_mode == 3'b111) begin
                apu_flags_reg = frm_i;
            end else begin
                apu_flags_reg = fp_rnd_mode;
            end
        end else begin
            apu_flags_reg = 32'd0;
        end
        default: apu_flags_reg = 32'd0;
    endcase
end
always @(*) begin
    case (alu_op_a_mux_sel)
        OP_A_REGA_OR_FWD: begin
            apu_read_regs[0] = regfile_addr_ra_id;
            apu_read_regs_valid[0] = 1'b1;
        end
        OP_A_REGB_OR_FWD: begin
            apu_read_regs[0] = regfile_addr_rb_id;
            apu_read_regs_valid[0] = 1'b1;
        end
        default: begin
            apu_read_regs[0] = regfile_addr_ra_id;
            apu_read_regs_valid[0] = 1'b0;
        end
    endcase
end
always @(*) begin
    case (alu_op_b_mux_sel)
        OP_B_REGB_OR_FWD: begin
            apu_read_regs[1] = regfile_addr_rb_id;
            apu_read_regs_valid[1] = 1'b1;
        end
        OP_B_REGC_OR_FWD: begin
            apu_read_regs[1] = regfile_addr_rc_id;
            apu_read_regs_valid[1] = 1'b1;
        end
        default: begin
            apu_read_regs[1] = regfile_addr_rb_id;
            apu_read_regs_valid[1] = 1'b0;
        end
    endcase
end
always @(*) begin
    case (alu_op_c_mux_sel)
        OP_C_REGB_OR_FWD: begin
            apu_read_regs[2] = regfile_addr_rb_id;
            apu_read_regs_valid[2] = 1'b1;
        end
        OP_C_REGC_OR_FWD: begin
            apu_read_regs[2] = regfile_addr_rc_id;
            apu_read_regs_valid[2] = 1'b1;
        end
        default: begin
            apu_read_regs[2] = regfile_addr_rc_id;
            apu_read_regs_valid[2] = 1'b0;
        end
    endcase
end
assign apu_write_regs[0] = regfile_alu_waddr_id;
assign apu_write_regs_valid[0] = regfile_alu_we_id;
assign apu_write_regs[1] = regfile_waddr_id;
assign apu_write_regs_valid[1] = regfile_we_id;
assign apu_read_regs_o = apu_read_regs;
assign apu_read_regs_valid_o = apu_read_regs_valid;
assign apu_write_regs_o = apu_write_regs;
assign apu_write_regs_valid_o = apu_write_regs_valid;
        end
    end else begin
        for(i=0;i < APU_NARGS_CPU;i=i + 1)begin
            begin :apu_tie_off
assign apu_operands[i] = 32'd0;
            end
        end
assign apu_waddr = 32'd0;
assign apu_flags = 32'd0;
assign apu_write_regs_o = 32'd0;
assign apu_read_regs_o = 32'd0;
assign apu_write_regs_valid_o = 32'd0;
assign apu_read_regs_valid_o = 32'd0;
    end

endgenerate
always @(*) begin
    case (regc_mux)
        REGC_ZERO: regfile_addr_rc_id = 32'd0;
        REGC_RD: regfile_addr_rc_id = {regfile_fp_c, instr[11:7]};
        REGC_S1: regfile_addr_rc_id = {regfile_fp_c, instr[19:15]};
        REGC_S4: regfile_addr_rc_id = {regfile_fp_c, instr[31:27]};
        default: regfile_addr_rc_id = 32'd0;
    endcase
end
always @(*) begin
    case (hwloop_target_mux_sel)
        1'b0: hwloop_target = pc_id_i + {imm_iz_type[30:0], 1'b0};
        1'b1: hwloop_target = pc_id_i + {imm_z_type[30:0], 1'b0};
    endcase
end
always @(*) begin
    case (hwloop_start_mux_sel)
        1'b0: hwloop_start_int = hwloop_target;
        1'b1: hwloop_start_int = pc_if_i;
    endcase
end
always @(*) begin
    begin :hwloop_cnt_mux
        case (hwloop_cnt_mux_sel)
            1'b0: hwloop_cnt_int = imm_iz_type;
            1'b1: hwloop_cnt_int = operand_a_fw_id;
        endcase
    end
end
always @(*) begin
    begin :jump_target_mux
        case (jump_target_mux_sel)
            JT_JAL: jump_target = pc_id_i + imm_uj_type;
            JT_COND: jump_target = pc_id_i + imm_sb_type;
            JT_JALR: jump_target = regfile_data_ra_id + imm_i_type;
            default: jump_target = regfile_data_ra_id + imm_i_type;
        endcase
    end
end
always @(*) begin
    begin :alu_operand_a_mux
        case (alu_op_a_mux_sel)
            OP_A_REGA_OR_FWD: alu_operand_a = operand_a_fw_id;
            OP_A_REGB_OR_FWD: alu_operand_a = operand_b_fw_id;
            OP_A_REGC_OR_FWD: alu_operand_a = operand_c_fw_id;
            OP_A_CURRPC: alu_operand_a = pc_id_i;
            OP_A_IMM: alu_operand_a = imm_a;
            default: alu_operand_a = operand_a_fw_id;
        endcase
    end
end
always @(*) begin
    begin :immediate_a_mux
        case (imm_a_mux_sel)
            IMMA_Z: imm_a = imm_z_type;
            IMMA_ZERO: imm_a = 32'd0;
            default: imm_a = 32'd0;
        endcase
    end
end
always @(*) begin
    begin :operand_a_fw_mux
        case (operand_a_fw_mux_sel)
            SEL_FW_EX: operand_a_fw_id = regfile_alu_wdata_fw_i;
            SEL_FW_WB: operand_a_fw_id = regfile_wdata_wb_i;
            SEL_REGFILE: operand_a_fw_id = regfile_data_ra_id;
            default: operand_a_fw_id = regfile_data_ra_id;
        endcase
    end
end
always @(*) begin
    begin :immediate_b_mux
        case (imm_b_mux_sel)
            IMMB_I: imm_b = imm_i_type;
            IMMB_S: imm_b = imm_s_type;
            IMMB_U: imm_b = imm_u_type;
            IMMB_PCINCR: imm_b = (is_compressed_i && (~data_misaligned_i)) ? 32'h2 : 32'h4;
            IMMB_S2: imm_b = imm_s2_type;
            IMMB_BI: imm_b = imm_bi_type;
            IMMB_S3: imm_b = imm_s3_type;
            IMMB_VS: imm_b = imm_vs_type;
            IMMB_VU: imm_b = imm_vu_type;
            IMMB_SHUF: imm_b = imm_shuffle_type;
            IMMB_CLIP: imm_b = {1'b0, imm_clip_type[31:1]};
            default: imm_b = imm_i_type;
        endcase
    end
end
always @(*) begin
    begin :alu_operand_b_mux
        case (alu_op_b_mux_sel)
            OP_B_REGA_OR_FWD: operand_b = operand_a_fw_id;
            OP_B_REGB_OR_FWD: operand_b = operand_b_fw_id;
            OP_B_REGC_OR_FWD: operand_b = operand_c_fw_id;
            OP_B_IMM: operand_b = imm_b;
            OP_B_BMASK: operand_b = $unsigned(operand_b_fw_id[4:0]);
            default: operand_b = operand_b_fw_id;
        endcase
    end
end
always @(*) begin
    if(alu_vec_mode == VEC_MODE8) begin
        operand_b_vec = { 4 { {operand_b[7:0]} }};
        imm_shuffle_type = imm_shuffleb_type;
    end else begin
        operand_b_vec = { 2 { {operand_b[15:0]} }};
        imm_shuffle_type = imm_shuffleh_type;
    end
end
always @(*) begin
    begin :operand_b_fw_mux
        case (operand_b_fw_mux_sel)
            SEL_FW_EX: operand_b_fw_id = regfile_alu_wdata_fw_i;
            SEL_FW_WB: operand_b_fw_id = regfile_wdata_wb_i;
            SEL_REGFILE: operand_b_fw_id = regfile_data_rb_id;
            default: operand_b_fw_id = regfile_data_rb_id;
        endcase
    end
end
always @(*) begin
    begin :alu_operand_c_mux
        case (alu_op_c_mux_sel)
            OP_C_REGC_OR_FWD: alu_operand_c = operand_c_fw_id;
            OP_C_REGB_OR_FWD: alu_operand_c = operand_b_fw_id;
            OP_C_JT: alu_operand_c = jump_target;
            default: alu_operand_c = operand_c_fw_id;
        endcase
    end
end
always @(*) begin
    begin :operand_c_fw_mux
        case (operand_c_fw_mux_sel)
            SEL_FW_EX: operand_c_fw_id = regfile_alu_wdata_fw_i;
            SEL_FW_WB: operand_c_fw_id = regfile_wdata_wb_i;
            SEL_REGFILE: operand_c_fw_id = regfile_data_rc_id;
            default: operand_c_fw_id = regfile_data_rc_id;
        endcase
    end
end
always @(*) begin
    case (bmask_a_mux)
        BMASK_A_ZERO: bmask_a_id_imm = 32'd0;
        BMASK_A_S3: bmask_a_id_imm = imm_s3_type[4:0];
        default: bmask_a_id_imm = 32'd0;
    endcase
end
always @(*) begin
    case (bmask_b_mux)
        BMASK_B_ZERO: bmask_b_id_imm = 32'd0;
        BMASK_B_ONE: bmask_b_id_imm = 5'd1;
        BMASK_B_S2: bmask_b_id_imm = imm_s2_type[4:0];
        BMASK_B_S3: bmask_b_id_imm = imm_s3_type[4:0];
        default: bmask_b_id_imm = 32'd0;
    endcase
end
always @(*) begin
    case (alu_bmask_a_mux_sel)
        BMASK_A_IMM: bmask_a_id = bmask_a_id_imm;
        BMASK_A_REG: bmask_a_id = operand_b_fw_id[9:5];
        default: bmask_a_id = bmask_a_id_imm;
    endcase
end
always @(*) begin
    case (alu_bmask_b_mux_sel)
        BMASK_B_IMM: bmask_b_id = bmask_b_id_imm;
        BMASK_B_REG: bmask_b_id = operand_b_fw_id[4:0];
        default: bmask_b_id = bmask_b_id_imm;
    endcase
end
always @(*) begin
    case (mult_imm_mux)
        MIMM_ZERO: mult_imm_id = 32'd0;
        MIMM_S3: mult_imm_id = imm_s3_type[4:0];
        default: mult_imm_id = 32'd0;
    endcase
end
always @(posedge clk or negedge rst_n) begin
    begin :ID_EX_PIPE_REGISTERS
        if(~rst_n) begin
            alu_en_ex_o <= 32'd0;
            alu_operator_ex_o <= ALU_SLTU;
            alu_operand_a_ex_o <= 32'd0;
            alu_operand_b_ex_o <= 32'd0;
            alu_operand_c_ex_o <= 32'd0;
            bmask_a_ex_o <= 32'd0;
            bmask_b_ex_o <= 32'd0;
            imm_vec_ext_ex_o <= 32'd0;
            alu_vec_mode_ex_o <= 32'd0;
            mult_operator_ex_o <= 32'd0;
            mult_operand_a_ex_o <= 32'd0;
            mult_operand_b_ex_o <= 32'd0;
            mult_operand_c_ex_o <= 32'd0;
            mult_en_ex_o <= 1'b0;
            mult_sel_subword_ex_o <= 1'b0;
            mult_signed_mode_ex_o <= 2'b00;
            mult_imm_ex_o <= 32'd0;
            mult_dot_op_a_ex_o <= 32'd0;
            mult_dot_op_b_ex_o <= 32'd0;
            mult_dot_op_c_ex_o <= 32'd0;
            mult_dot_signed_ex_o <= 32'd0;
            fpu_op_ex_o <= 32'd0;
            apu_en_ex_o <= 32'd0;
            apu_type_ex_o <= 32'd0;
            apu_op_ex_o <= 32'd0;
            apu_lat_ex_o <= 32'd0;
            apu_operands_ex_o[0] <= 32'd0;
            apu_operands_ex_o[1] <= 32'd0;
            apu_operands_ex_o[2] <= 32'd0;
            apu_flags_ex_o <= 32'd0;
            apu_waddr_ex_o <= 32'd0;
            regfile_waddr_ex_o <= 6'b0;
            regfile_we_ex_o <= 1'b0;
            regfile_alu_waddr_ex_o <= 6'b0;
            regfile_alu_we_ex_o <= 1'b0;
            prepost_useincr_ex_o <= 1'b0;
            csr_access_ex_o <= 1'b0;
            csr_op_ex_o <= CSR_OP_NONE;
            data_we_ex_o <= 1'b0;
            data_type_ex_o <= 2'b0;
            data_sign_ext_ex_o <= 1'b0;
            data_reg_offset_ex_o <= 2'b0;
            data_req_ex_o <= 1'b0;
            data_load_event_ex_o <= 1'b0;
            data_misaligned_ex_o <= 1'b0;
            pc_ex_o <= 32'd0;
            branch_in_ex_o <= 1'b0;
        end else if(data_misaligned_i) begin
            if(ex_ready_i) begin
                if(prepost_useincr_ex_o) begin
                    alu_operand_a_ex_o <= alu_operand_a;
                end
                alu_operand_b_ex_o <= alu_operand_b;
                regfile_alu_we_ex_o <= regfile_alu_we_id;
                prepost_useincr_ex_o <= prepost_useincr;
                data_misaligned_ex_o <= 1'b1;
            end
        end else if(mult_multicycle_i) begin
            mult_operand_c_ex_o <= alu_operand_c;
        end else begin
            if(id_valid_o) begin
                alu_en_ex_o <= alu_en;
                if(alu_en) begin
                    alu_operator_ex_o <= alu_operator;
                    alu_operand_a_ex_o <= alu_operand_a;
                    alu_operand_b_ex_o <= alu_operand_b;
                    alu_operand_c_ex_o <= alu_operand_c;
                    bmask_a_ex_o <= bmask_a_id;
                    bmask_b_ex_o <= bmask_b_id;
                    imm_vec_ext_ex_o <= imm_vec_ext_id;
                    alu_vec_mode_ex_o <= alu_vec_mode;
                end
                mult_en_ex_o <= mult_en;
                if(mult_int_en) begin
                    mult_operator_ex_o <= mult_operator;
                    mult_sel_subword_ex_o <= mult_sel_subword;
                    mult_signed_mode_ex_o <= mult_signed_mode;
                    mult_operand_a_ex_o <= alu_operand_a;
                    mult_operand_b_ex_o <= alu_operand_b;
                    mult_operand_c_ex_o <= alu_operand_c;
                    mult_imm_ex_o <= mult_imm_id;
                end
                if(mult_dot_en) begin
                    mult_operator_ex_o <= mult_operator;
                    mult_dot_signed_ex_o <= mult_dot_signed;
                    mult_dot_op_a_ex_o <= alu_operand_a;
                    mult_dot_op_b_ex_o <= alu_operand_b;
                    mult_dot_op_c_ex_o <= alu_operand_c;
                end
                apu_en_ex_o <= apu_en;
                if(apu_en) begin
                    fpu_op_ex_o <= fpu_op;
                    apu_type_ex_o <= apu_type;
                    apu_op_ex_o <= apu_op;
                    apu_lat_ex_o <= apu_lat;
                    apu_operands_ex_o <= apu_operands;
                    apu_flags_ex_o <= apu_flags;
                    apu_waddr_ex_o <= apu_waddr;
                end
                regfile_we_ex_o <= regfile_we_id;
                if(regfile_we_id) begin
                    regfile_waddr_ex_o <= regfile_waddr_id;
                end
                regfile_alu_we_ex_o <= regfile_alu_we_id;
                if(regfile_alu_we_id) begin
                    regfile_alu_waddr_ex_o <= regfile_alu_waddr_id;
                end
                prepost_useincr_ex_o <= prepost_useincr;
                csr_access_ex_o <= csr_access;
                csr_op_ex_o <= csr_op;
                data_req_ex_o <= data_req_id;
                if(data_req_id) begin
                    data_we_ex_o <= data_we_id;
                    data_type_ex_o <= data_type_id;
                    data_sign_ext_ex_o <= data_sign_ext_id;
                    data_reg_offset_ex_o <= data_reg_offset_id;
                    data_load_event_ex_o <= data_load_event_id;
                end else begin
                    data_load_event_ex_o <= 1'b0;
                end
                data_misaligned_ex_o <= 1'b0;
                if((jump_in_id == BRANCH_COND) || data_load_event_id) begin
                    pc_ex_o <= pc_id_i;
                end
                branch_in_ex_o <= jump_in_id == BRANCH_COND;
            end else if(ex_ready_i) begin
                regfile_we_ex_o <= 1'b0;
                regfile_alu_we_ex_o <= 1'b0;
                csr_op_ex_o <= CSR_OP_NONE;
                data_req_ex_o <= 1'b0;
                data_load_event_ex_o <= 1'b0;
                data_misaligned_ex_o <= 1'b0;
                branch_in_ex_o <= 1'b0;
                apu_en_ex_o <= 1'b0;
                alu_operator_ex_o <= ALU_SLTU;
                mult_en_ex_o <= 1'b0;
            end else if(csr_access_ex_o) begin
                regfile_alu_we_ex_o <= 1'b0;
            end
        end
    end
end
endmodule

