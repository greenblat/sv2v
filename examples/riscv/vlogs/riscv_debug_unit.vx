module riscv_debug_unit(
    input  branch_in_ex_i
    ,input  branch_taken_i
    ,input  clk
    ,output [11:0] csr_addr_o
    ,input [31:0] csr_rdata_i
    ,output  csr_req_o
    ,output [31:0] csr_wdata_o
    ,output reg  csr_we_o
    ,input  data_load_event_i
    ,input  dbg_ack_i
    ,output reg  dbg_req_o
    ,input [14:0] debug_addr_i
    ,output reg  debug_gnt_o
    ,input  debug_halt_i
    ,output reg  debug_halted_o
    ,output reg [31:0] debug_rdata_o
    ,input  debug_req_i
    ,input  debug_resume_i
    ,output reg  debug_rvalid_o
    ,input [31:0] debug_wdata_i
    ,input  debug_we_i
    ,input [5:0] exc_cause_i
    ,input  instr_valid_id_i
    ,output [31:0] jump_addr_o
    ,output  jump_req_o
    ,input [31:0] pc_ex_i
    ,input [31:0] pc_id_i
    ,input [31:0] pc_if_i
    ,output [5:0] regfile_raddr_o
    ,input [31:0] regfile_rdata_i
    ,output  regfile_rreq_o
    ,output [5:0] regfile_waddr_o
    ,output [31:0] regfile_wdata_o
    ,output  regfile_wreq_o
    ,input  rst_n
    ,output [(DBG_SETS_W - 1):0] settings_o
    ,input  sleeping_i
    ,output reg  stall_o
    ,input  trap_i
);
localparam HALT = 2;
localparam DBG_CAUSE_HALT = 6'h1F;
localparam RD_CSR = 1;
localparam DBG_SETS_W = 6;
localparam RD_DBGA = 3;
localparam IFEX = 1;
localparam DBG_SETS_EBRK = 1;
localparam DBG_SETS_SSTE = 0;
localparam RUNNING = 0;
localparam DBG_SETS_ELSU = 2;
localparam DBG_SETS_EILL = 3;
localparam RD_GPR = 2;
localparam SECOND = 1;
localparam IDEX = 2;
localparam DBG_SETS_ECALL = 4;
localparam RD_NONE = 0;
localparam RD_DBGS = 4;
localparam HALT_REQ = 1;
localparam IFID = 0;
localparam FIRST = 0;
reg  regfile_fp_sel_n;
reg [1:0] pc_tracking_fsm_ns;
reg [14:0] addr_q;
reg [(DBG_SETS_W - 1):0] settings_q;
reg [2:0] rdata_sel_n;
reg [2:0] rdata_sel_q;
reg [(DBG_SETS_W - 1):0] settings_n;
reg  regfile_fp_sel_q;
reg  jump_req_n;
reg [1:0] pc_tracking_fsm_cs;
reg [31:0] npc_int;
reg [31:0] ppc_int;
reg [1:0] stall_cs;
reg [0:0] state_n;
reg  csr_req_q;
reg  regfile_wreq;
reg  ssth_clear;
reg  dbg_halt;
reg [31:0] dbg_rdata;
reg [5:0] dbg_cause_q;
reg  csr_req_n;
reg [0:0] state_q;
reg  regfile_rreq_n;
reg [5:0] dbg_cause_n;
reg  dbg_ssth_n;
reg  regfile_fp_wr;
reg [1:0] stall_ns;
reg  dbg_resume;
reg  dbg_ssth_q;
reg  jump_req_q;
reg [31:0] wdata_q;
reg  regfile_rreq_q;
assign   regfile_rreq_o = regfile_rreq_q;
assign   regfile_raddr_o = {regfile_fp_sel_q, addr_q[6:2]};
assign   regfile_wreq_o = regfile_wreq;
assign   regfile_waddr_o = {regfile_fp_wr, debug_addr_i[6:2]};
assign   regfile_wdata_o = debug_wdata_i;
assign   csr_req_o = csr_req_q;
assign   csr_addr_o = addr_q[13:2];
assign   csr_wdata_o = wdata_q;
assign   jump_req_o = jump_req_q;
assign   jump_addr_o = wdata_q;
assign   settings_o = settings_q;
always @(*) begin
    rdata_sel_n = RD_NONE;
    state_n = FIRST;
    debug_gnt_o = 1'b0;
    regfile_rreq_n = 1'b0;
    regfile_wreq = 1'b0;
    csr_req_n = 1'b0;
    csr_we_o = 1'b0;
    jump_req_n = 1'b0;
    dbg_resume = 1'b0;
    dbg_halt = 1'b0;
    settings_n = settings_q;
    ssth_clear = 1'b0;
    regfile_fp_sel_n = 1'b0;
    regfile_fp_wr = 1'b0;
    if(debug_req_i) begin
        if(debug_we_i) begin
            if(debug_addr_i[14]) begin
                if(state_q == FIRST) begin
                    debug_gnt_o = 1'b0;
                    state_n = SECOND;
                    if(debug_halted_o) begin
                        csr_req_n = 1'b1;
                    end
                end else begin
                    debug_gnt_o = 1'b1;
                    state_n = FIRST;
                    csr_we_o = 1'b1;
                end
            end else begin
                case (debug_addr_i[13:8])
                    6'b00_0000: begin
                        debug_gnt_o = 1'b1;
                        case (debug_addr_i[6:2])
                            5'b0_0000: begin
                                if(debug_wdata_i[16]) begin
                                    if(~debug_halted_o) begin
                                        dbg_halt = 1'b1;
                                    end
                                end else begin
                                    if(debug_halted_o) begin
                                        dbg_resume = 1'b1;
                                    end
                                end
                                settings_n[DBG_SETS_SSTE] = debug_wdata_i[0];
                            end
                            5'b0_0001: ssth_clear = debug_wdata_i[0];
                            5'b0_0010: begin
                                settings_n[DBG_SETS_ECALL] = debug_wdata_i[11];
                                settings_n[DBG_SETS_ELSU] = debug_wdata_i[7] | debug_wdata_i[5];
                                settings_n[DBG_SETS_EBRK] = debug_wdata_i[3];
                                settings_n[DBG_SETS_EILL] = debug_wdata_i[2];
                            end
                            default: ;                        endcase
                    end
                    6'b10_0000: begin
                        debug_gnt_o = 1'b1;
                        if(debug_halted_o) begin
                            case (debug_addr_i[6:2])
                                5'b0_0000: jump_req_n = 1'b1;
                                default: ;                            endcase
                        end
                    end
                    6'b00_0100: begin
                        debug_gnt_o = 1'b1;
                        if(debug_halted_o) begin
                            regfile_wreq = 1'b1;
                        end
                    end
                    6'b00_0101: begin
                        debug_gnt_o = 1'b1;
                        if(debug_halted_o) begin
                            regfile_wreq = 1'b1;
                            regfile_fp_wr = 1'b1;
                        end
                    end
                    default: debug_gnt_o = 1'b1;
                endcase
            end
        end else begin
            if(debug_addr_i[14]) begin
                debug_gnt_o = 1'b1;
                if(debug_halted_o) begin
                    csr_req_n = 1'b1;
                    rdata_sel_n = RD_CSR;
                end
            end else begin
                case (debug_addr_i[13:8])
                    6'b00_0000: begin
                        debug_gnt_o = 1'b1;
                        rdata_sel_n = RD_DBGA;
                    end
                    6'b10_0000: begin
                        debug_gnt_o = 1'b1;
                        rdata_sel_n = RD_DBGS;
                    end
                    6'b00_0100: begin
                        debug_gnt_o = 1'b1;
                        if(debug_halted_o) begin
                            regfile_rreq_n = 1'b1;
                            rdata_sel_n = RD_GPR;
                        end
                    end
                    6'b00_0101: begin
                        debug_gnt_o = 1'b1;
                        if(debug_halted_o) begin
                            regfile_rreq_n = 1'b1;
                            regfile_fp_sel_n = 1'b1;
                            rdata_sel_n = RD_GPR;
                        end
                    end
                    default: debug_gnt_o = 1'b1;
                endcase
            end
        end
    end
end
always @(*) begin
    dbg_rdata = 32'd0;
    case (rdata_sel_q)
        RD_DBGA: case (addr_q[6:2])
            5'h00: dbg_rdata[31:0] = {15'b0, debug_halted_o, 15'b0, settings_q[DBG_SETS_SSTE]};
            5'h01: dbg_rdata[31:0] = {15'b0, sleeping_i, 15'b0, dbg_ssth_q};
            5'h02: begin
                dbg_rdata[31:16] = 32'd0;
                dbg_rdata[15:12] = 32'd0;
                dbg_rdata[11] = settings_q[DBG_SETS_ECALL];
                dbg_rdata[10:8] = 32'd0;
                dbg_rdata[7] = settings_q[DBG_SETS_ELSU];
                dbg_rdata[6] = 1'b0;
                dbg_rdata[5] = settings_q[DBG_SETS_ELSU];
                dbg_rdata[4] = 1'b0;
                dbg_rdata[3] = settings_q[DBG_SETS_EBRK];
                dbg_rdata[2] = settings_q[DBG_SETS_EILL];
                dbg_rdata[1:0] = 32'd0;
            end
            5'h03: dbg_rdata = {dbg_cause_q[5], 26'b0, dbg_cause_q[4:0]};
            5'h10: dbg_rdata = 32'd0;
            5'h12: dbg_rdata = 32'd0;
            5'h14: dbg_rdata = 32'd0;
            5'h16: dbg_rdata = 32'd0;
            5'h18: dbg_rdata = 32'd0;
            5'h1A: dbg_rdata = 32'd0;
            5'h1C: dbg_rdata = 32'd0;
            5'h1E: dbg_rdata = 32'd0;
            default: ;        endcase
        RD_DBGS: case (addr_q[2:2])
            1'b0: dbg_rdata = npc_int;
            1'b1: dbg_rdata = ppc_int;
            default: ;        endcase
        default: ;    endcase
end
always @(*) begin
    debug_rdata_o = 32'd0;
    case (rdata_sel_q)
        RD_CSR: debug_rdata_o = csr_rdata_i;
        RD_GPR: debug_rdata_o = regfile_rdata_i;
        RD_DBGA: debug_rdata_o = dbg_rdata;
        RD_DBGS: debug_rdata_o = dbg_rdata;
    endcase
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        debug_rvalid_o <= 1'b0;
    end else begin
        debug_rvalid_o <= debug_gnt_o;
    end
end
always @(*) begin
    stall_ns = stall_cs;
    dbg_req_o = 1'b0;
    stall_o = 1'b0;
    debug_halted_o = 1'b0;
    dbg_cause_n = dbg_cause_q;
    dbg_ssth_n = dbg_ssth_q;
    case (stall_cs)
        RUNNING: begin
            dbg_ssth_n = 1'b0;
            if((dbg_halt | debug_halt_i) | trap_i) begin
                dbg_req_o = 1'b1;
                stall_ns = HALT_REQ;
                if(trap_i) begin
                    if(settings_q[DBG_SETS_SSTE]) begin
                        dbg_ssth_n = 1'b1;
                    end
                    dbg_cause_n = exc_cause_i;
                end else begin
                    dbg_cause_n = DBG_CAUSE_HALT;
                end
            end
        end
        HALT_REQ: begin
            dbg_req_o = 1'b1;
            if(dbg_ack_i) begin
                stall_ns = HALT;
            end
            if(dbg_resume | debug_resume_i) begin
                stall_ns = RUNNING;
            end
        end
        HALT: begin
            stall_o = 1'b1;
            debug_halted_o = 1'b1;
            if(dbg_resume | debug_resume_i) begin
                stall_ns = RUNNING;
                stall_o = 1'b0;
            end
        end
    endcase
    if(ssth_clear) begin
        dbg_ssth_n = 1'b0;
    end
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        stall_cs <= RUNNING;
        dbg_cause_q <= DBG_CAUSE_HALT;
        dbg_ssth_q <= 1'b0;
    end else begin
        stall_cs <= stall_ns;
        dbg_cause_q <= dbg_cause_n;
        dbg_ssth_q <= dbg_ssth_n;
    end
end
always @(*) begin
    pc_tracking_fsm_ns = pc_tracking_fsm_cs;
    ppc_int = pc_id_i;
    npc_int = pc_if_i;
    case (pc_tracking_fsm_cs)
        IFID: begin
            ppc_int = pc_id_i;
            npc_int = pc_if_i;
        end
        IFEX: begin
            ppc_int = pc_ex_i;
            npc_int = pc_if_i;
        end
        IDEX: begin
            ppc_int = pc_ex_i;
            npc_int = pc_id_i;
            if(jump_req_o) begin
                pc_tracking_fsm_ns = IFEX;
            end
        end
        default: pc_tracking_fsm_ns = IFID;
    endcase
    if(dbg_ack_i) begin
        pc_tracking_fsm_ns = IFID;
        if(branch_in_ex_i) begin
            if(branch_taken_i) begin
                pc_tracking_fsm_ns = IFEX;
            end else begin
                pc_tracking_fsm_ns = IDEX;
            end
        end else if(data_load_event_i) begin
            if(instr_valid_id_i) begin
                pc_tracking_fsm_ns = IDEX;
            end else begin
                pc_tracking_fsm_ns = IFEX;
            end
        end
    end
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        pc_tracking_fsm_cs <= IFID;
        addr_q <= 32'd0;
        wdata_q <= 32'd0;
        state_q <= FIRST;
        rdata_sel_q <= RD_NONE;
        regfile_rreq_q <= 1'b0;
        regfile_fp_sel_q <= 1'b0;
        csr_req_q <= 1'b0;
        jump_req_q <= 1'b0;
        settings_q <= 1'b0;
    end else begin
        pc_tracking_fsm_cs <= pc_tracking_fsm_ns;
        settings_q <= settings_n;
        if(debug_req_i) begin
            addr_q <= debug_addr_i;
            wdata_q <= debug_wdata_i;
            state_q <= state_n;
        end
        if(debug_req_i | debug_rvalid_o) begin
            regfile_rreq_q <= regfile_rreq_n;
            regfile_fp_sel_q <= regfile_fp_sel_n;
            csr_req_q <= csr_req_n;
            jump_req_q <= jump_req_n;
            rdata_sel_q <= rdata_sel_n;
        end
    end
end
endmodule

