module riscv_alu_basic(
    input [4:0] bmask_a_i
    ,input [4:0] bmask_b_i
    ,input  clk
    ,output  comparison_result_o
    ,input  ex_ready_i
    ,input [1:0] imm_vec_ext_i
    ,input [31:0] operand_a_i
    ,input [31:0] operand_b_i
    ,input [31:0] operand_c_i
    ,input [(ALU_OP_WIDTH - 1):0] operator_i
    ,output  ready_o
    ,output reg [31:0] result_o
    ,input  rst_n
    ,input [1:0] vector_mode_i
);
localparam ALU_SLL = 7'b0100111;
localparam ALU_NE = 7'b0001101;
localparam ALU_SLTS = 7'b0000010;
localparam ALU_SRA = 7'b0100100;
localparam ALU_MIN = 7'b0010000;
localparam ALU_SRL = 7'b0100101;
localparam ALU_AND = 7'b0010101;
localparam ALU_SUBU = 7'b0011011;
localparam ALU_OR = 7'b0101110;
localparam ALU_SLTU = 7'b0000011;
localparam ALU_LES = 7'b0000100;
localparam ALU_SUBR = 7'b0011101;
localparam ALU_SLETS = 7'b0000110;
localparam ALU_MAX = 7'b0010010;
localparam ALU_EQ = 7'b0001100;
localparam ALU_ADD = 7'b0011000;
localparam ALU_CLIP = 7'b0010110;
localparam ALU_GTS = 7'b0001000;
localparam ALU_GTU = 7'b0001001;
localparam ALU_SLETU = 7'b0000111;
localparam ALU_CLIPU = 7'b0010111;
localparam ALU_OP_WIDTH = 7;
localparam ALU_LTS = 7'b0000000;
localparam ALU_ABS = 7'b0010100;
localparam ALU_LTU = 7'b0000001;
localparam ALU_SUB = 7'b0011001;
localparam ALU_XOR = 7'b0101111;
localparam ALU_LEU = 7'b0000101;
localparam VEC_MODE8 = 2'b11;
localparam ALU_GEU = 7'b0001011;
localparam ALU_GES = 7'b0001010;
localparam VEC_MODE16 = 2'b10;
wire [31:0] shift_amt;
wire [31:0] shift_result;
reg [3:0] is_equal;
reg [3:0] cmp_result;
wire [35:0] adder_in_a;
wire [35:0] adder_in_b;
wire [31:0] shift_amt_int;
wire [3:0] is_greater_vec;
wire [31:0] bmask;
wire [31:0] operand_a_rev;
wire [35:0] adder_result_expanded;
wire [3:0] is_equal_vec;
wire [31:0] shift_right_result;
wire [32:0] shift_op_a_ext;
wire  shift_left;
wire  adder_op_b_negate;
reg [3:0] is_greater;
wire [31:0] adder_result;
reg [3:0] cmp_signed;
wire [31:0] shift_amt_left;
wire [31:0] operand_a_neg;
wire [31:0] operand_b_neg;
wire [31:0] operand_a_neg_rev;
wire [31:0] shift_op_a;
wire [31:0] shift_left_result;
wire  shift_arithmetic;
wire [31:0] adder_op_a;
wire [31:0] adder_op_b;
genvar i;
genvar j;
assign   operand_a_neg = ~operand_a_i;
assign   operand_b_neg = ~operand_b_i;
assign   adder_op_b_negate = (((operator_i == ALU_SUB) || (operator_i == ALU_SUBR)) || (operator_i == ALU_SUBU)) || (operator_i == ALU_SUBR);
assign   adder_op_a = (operator_i == ALU_ABS) ? operand_a_neg : operand_a_i;
assign   adder_op_b = adder_op_b_negate ? operand_b_neg : operand_b_i;
assign   adder_result = (adder_op_a + adder_op_b) + adder_op_b_negate;
assign   shift_amt = operand_b_i;
assign   shift_amt_left[31:0] = shift_amt[31:0];
assign   shift_left = operator_i == ALU_SLL;
assign   shift_arithmetic = operator_i == ALU_SRA;
assign   shift_op_a = shift_left ? operand_a_rev : operand_a_i;
assign   shift_amt_int = shift_left ? shift_amt_left : shift_amt;
assign   shift_op_a_ext = shift_arithmetic ? {shift_op_a[31], shift_op_a} : {1'b0, shift_op_a};
assign   shift_right_result = $signed(shift_op_a_ext) >>> shift_amt_int[4:0];
assign   shift_result = shift_left ? shift_left_result : shift_right_result;
assign   comparison_result_o = cmp_result[3];
assign   ready_o = 1'b1;
generate
    genvar k ;

    for(k=0;k < 32;k=k + 1)begin
assign operand_a_rev[k] = operand_a_i[(31 - k)];
    end

endgenerate
generate
    genvar m ;

    for(m=0;m < 32;m=m + 1)begin
assign operand_a_neg_rev[m] = operand_a_neg[(31 - m)];
    end

endgenerate
generate
    for(j=0;j < 32;j=j + 1)begin
assign shift_left_result[j] = shift_right_result[(31 - j)];
    end

endgenerate
generate
    for(i=0;i < 4;i=i + 1)begin
assign is_equal_vec[i] = (operand_a_i[((8 * i) + 7):(8 * i)] == operand_b_i[((8 * i) + 7):(i * 8)]);
assign is_greater_vec[i] = ($signed({(operand_a_i[((8 * i) + 7)] & cmp_signed[i]), operand_a_i[((8 * i) + 7):(8 * i)]}) > $signed({(operand_b_i[((8 * i) + 7)] & cmp_signed[i]), operand_b_i[((8 * i) + 7):(i * 8)]}));
    end

endgenerate
always @(*) begin
    cmp_signed = 4'b0;
    case (operator_i)
        ALU_GTS,ALU_GES,ALU_LTS,ALU_LES,ALU_SLTS,ALU_SLETS,ALU_MIN,ALU_MAX,ALU_ABS,ALU_CLIP,ALU_CLIPU: case (vector_mode_i)
            VEC_MODE8: cmp_signed[3:0] = 4'b1111;
            VEC_MODE16: cmp_signed[3:0] = 4'b1010;
            default: cmp_signed[3:0] = 4'b1000;
        endcase
        default: ;    endcase
end
always @(*) begin
    is_equal[3:0] = { 4 { {(((is_equal_vec[3] & is_equal_vec[2]) & is_equal_vec[1]) & is_equal_vec[0])} }};
    is_greater[3:0] = { 4 { {(is_greater_vec[3] | (is_equal_vec[3] & (is_greater_vec[2] | (is_equal_vec[2] & (is_greater_vec[1] | (is_equal_vec[1] & is_greater_vec[0]))))))} }};
    case (vector_mode_i)
        VEC_MODE16: begin
            is_equal[1:0] = { 2 { {(is_equal_vec[0] & is_equal_vec[1])} }};
            is_equal[3:2] = { 2 { {(is_equal_vec[2] & is_equal_vec[3])} }};
            is_greater[1:0] = { 2 { {(is_greater_vec[1] | (is_equal_vec[1] & is_greater_vec[0]))} }};
            is_greater[3:2] = { 2 { {(is_greater_vec[3] | (is_equal_vec[3] & is_greater_vec[2]))} }};
        end
        VEC_MODE8: begin
            is_equal[3:0] = is_equal_vec[3:0];
            is_greater[3:0] = is_greater_vec[3:0];
        end
        default: ;    endcase
end
always @(*) begin
    cmp_result = is_equal;
    case (operator_i)
        ALU_EQ: cmp_result = is_equal;
        ALU_NE: cmp_result = ~is_equal;
        ALU_GTS,ALU_GTU: cmp_result = is_greater;
        ALU_GES,ALU_GEU: cmp_result = is_greater | is_equal;
        ALU_LTS,ALU_SLTS,ALU_LTU,ALU_SLTU: cmp_result = ~(is_greater | is_equal);
        ALU_SLETS,ALU_SLETU,ALU_LES,ALU_LEU: cmp_result = ~is_greater;
        default: ;    endcase
end
always @(*) begin
    result_o = 32'bx;
    case (operator_i)
        ALU_AND: result_o = operand_a_i & operand_b_i;
        ALU_OR: result_o = operand_a_i | operand_b_i;
        ALU_XOR: result_o = operand_a_i ^ operand_b_i;
        ALU_ADD,ALU_SUB: result_o = adder_result;
        ALU_SLL,ALU_SRL,ALU_SRA: result_o = shift_result;
        ALU_EQ,ALU_NE,ALU_GTU,ALU_GEU,ALU_LTU,ALU_LEU,ALU_GTS,ALU_GES,ALU_LTS,ALU_LES: begin
            result_o[31:24] = { 8 { cmp_result[3:3] }};
            result_o[23:16] = { 8 { cmp_result[2:2] }};
            result_o[15:8] = { 8 { cmp_result[1:1] }};
            result_o[7:0] = { 8 { cmp_result[0:0] }};
        end
        ALU_SLTS,ALU_SLTU,ALU_SLETS,ALU_SLETU: result_o = {31'b0, comparison_result_o};
        default: ;    endcase
end
endmodule

