module riscv_register_file #( parameter FPU = 0,parameter ADDR_WIDTH = 5,parameter DATA_WIDTH = 32) (
    input  clk
    ,input [(ADDR_WIDTH - 1):0] raddr_a_i
    ,input [(ADDR_WIDTH - 1):0] raddr_b_i
    ,input [(ADDR_WIDTH - 1):0] raddr_c_i
    ,output [(DATA_WIDTH - 1):0] rdata_a_o
    ,output [(DATA_WIDTH - 1):0] rdata_b_o
    ,output [(DATA_WIDTH - 1):0] rdata_c_o
    ,input  rst_n
    ,input  test_en_i
    ,input [(ADDR_WIDTH - 1):0] waddr_a_i
    ,input [(ADDR_WIDTH - 1):0] waddr_b_i
    ,input [(DATA_WIDTH - 1):0] wdata_a_i
    ,input [(DATA_WIDTH - 1):0] wdata_b_i
    ,input  we_a_i
    ,input  we_b_i
);
localparam NUM_FP_WORDS = (2 ** (ADDR_WIDTH - 1));
localparam NUM_TOT_WORDS = FPU ? (NUM_WORDS + NUM_FP_WORDS) : NUM_WORDS;
localparam NUM_WORDS = (2 ** (ADDR_WIDTH - 1));
reg [(NUM_FP_WORDS - 1):0] [(DATA_WIDTH - 1):0] mem_fp;
reg [(NUM_WORDS - 1):0] [(DATA_WIDTH - 1):0] mem;
reg [(NUM_TOT_WORDS - 1):0] we_b_dec;
reg [31:0] ii;
reg [(NUM_TOT_WORDS - 1):0] we_a_dec;
genvar i;
genvar l;
generate
    if(FPU == 1) begin
assign rdata_a_o = raddr_a_i[5] ? mem_fp[raddr_a_i[4:0]] : mem[raddr_a_i[4:0]];
assign rdata_b_o = raddr_b_i[5] ? mem_fp[raddr_b_i[4:0]] : mem[raddr_b_i[4:0]];
assign rdata_c_o = raddr_c_i[5] ? mem_fp[raddr_c_i[4:0]] : mem[raddr_c_i[4:0]];
    end else begin
assign rdata_a_o = mem[raddr_a_i[4:0]];
assign rdata_b_o = mem[raddr_b_i[4:0]];
assign rdata_c_o = mem[raddr_c_i[4:0]];
    end

endgenerate
generate
always @(posedge clk,negedge rst_n) begin
    if(~rst_n) begin
        mem[0] <= 32'b0;
    end else begin
        mem[0] <= 32'b0;
    end
end

    for(i=1;i < NUM_WORDS;i=i + 1)begin
        begin :rf_gen
always @(posedge clk,negedge rst_n) begin
    begin :register_write_behavioral
        if(~rst_n) begin
            mem[i] <= 32'b0;
        end else begin
            if(we_b_dec[i]) begin
                mem[i] <= wdata_b_i;
            end else if(we_a_dec[i]) begin
                mem[i] <= wdata_a_i;
            end
        end
    end
end
        end
    end

    if(FPU == 1) begin
        for(l=0;l < NUM_FP_WORDS;l=l + 1)begin
always @(posedge clk,negedge rst_n) begin
    begin :fp_regs
        if(~rst_n) begin
            mem_fp[l] <= 32'd0;
        end else if(we_b_dec[(l + NUM_WORDS)]) begin
            mem_fp[l] <= wdata_b_i;
        end else if(we_a_dec[(l + NUM_WORDS)]) begin
            mem_fp[l] <= wdata_a_i;
        end
    end
end
        end
    end

endgenerate
always @(*) begin
    begin :we_a_decoder
        for(ii=0;ii < NUM_TOT_WORDS;ii=ii + 1)begin
            if(waddr_a_i == ii) begin
                we_a_dec[ii] = we_a_i;
            end else begin
                we_a_dec[ii] = 1'b0;
            end
        end
    end
end
always @(*) begin
    begin :we_b_decoder
        for(ii=0;ii < NUM_TOT_WORDS;ii=ii + 1)begin
            if(waddr_b_i == ii) begin
                we_b_dec[ii] = we_b_i;
            end else begin
                we_b_dec[ii] = 1'b0;
            end
        end
    end
end
endmodule

