module riscv_apu_disp(
    output  active_o
    ,input [1:0] apu_lat_i
    ,input  apu_master_gnt_i
    ,output  apu_master_ready_o
    ,output  apu_master_req_o
    ,input  apu_master_valid_i
    ,output  apu_multicycle_o
    ,output  apu_singlecycle_o
    ,input [5:0] apu_waddr_i
    ,output reg [5:0] apu_waddr_o
    ,input  clk_i
    ,input  enable_i
    ,output  perf_cont_o
    ,output  perf_type_o
    ,output  read_dep_o
    ,input [2:0] [5:0] read_regs_i
    ,input [2:0] read_regs_valid_i
    ,input  rst_ni
    ,output  stall_o
    ,output  write_dep_o
    ,input [1:0] [5:0] write_regs_i
    ,input [1:0] write_regs_valid_i
);
wire [2:0] read_deps_waiting;
wire  active;
wire  write_dep_req;
reg [5:0] addr_inflight;
wire [1:0] write_deps_waiting;
wire  write_dep_waiting;
wire  stall_full;
reg  valid_waiting_dn;
wire [1:0] write_deps_inflight;
wire  req_accepted;
wire  read_dep_waiting;
reg  valid_inflight_dn;
wire  read_dep_req;
wire  stall_nack;
reg  valid_inflight;
wire  returned_req;
wire  returned_waiting;
wire [2:0] read_deps_inflight;
wire  write_dep_inflight;
wire  valid_req;
wire [2:0] read_deps_req;
wire  stall_type;
wire  returned_inflight;
reg [1:0] apu_lat;
wire [5:0] addr_req;
wire [1:0] write_deps_req;
reg [5:0] addr_inflight_dn;
reg [5:0] addr_waiting;
reg  valid_waiting;
reg [5:0] addr_waiting_dn;
wire  read_dep_inflight;
genvar i;
assign   valid_req = enable_i & (!(stall_full | stall_type));
assign   addr_req = apu_waddr_i;
assign   req_accepted = valid_req & apu_master_gnt_i;
assign   returned_req = ((valid_req & apu_master_valid_i) & (!valid_inflight)) & (!valid_waiting);
assign   returned_inflight = (valid_inflight & apu_master_valid_i) & (!valid_waiting);
assign   returned_waiting = valid_waiting & apu_master_valid_i;
assign   active = valid_inflight | valid_waiting;
assign   read_dep_req = ((|read_deps_req) & valid_req) & (!returned_req);
assign   read_dep_inflight = ((|read_deps_inflight) & valid_inflight) & (!returned_inflight);
assign   read_dep_waiting = ((|read_deps_waiting) & valid_waiting) & (!returned_waiting);
assign   write_dep_req = ((|write_deps_req) & valid_req) & (!returned_req);
assign   write_dep_inflight = ((|write_deps_inflight) & valid_inflight) & (!returned_inflight);
assign   write_dep_waiting = ((|write_deps_waiting) & valid_waiting) & (!returned_waiting);
assign   read_dep_o = (read_dep_req | read_dep_inflight) | read_dep_waiting;
assign   write_dep_o = (write_dep_req | write_dep_inflight) | write_dep_waiting;
assign   stall_full = valid_inflight & valid_waiting;
assign   stall_type = (enable_i & active) & (((apu_lat_i == 2'h1) | ((apu_lat_i == 2'h2) & (apu_lat == 2'h3))) | (apu_lat_i == 2'h3));
assign   stall_nack = valid_req & (!apu_master_gnt_i);
assign   stall_o = (stall_full | stall_type) | stall_nack;
assign   apu_master_req_o = valid_req;
assign   apu_master_ready_o = 1'b1;
assign   active_o = active;
assign   perf_type_o = stall_type;
assign   perf_cont_o = stall_nack;
assign   apu_multicycle_o = apu_lat == 2'h3;
assign   apu_singlecycle_o = ~(valid_inflight | valid_waiting);
generate
    for(i=0;i < 3;i=i + 1)begin
assign read_deps_req[i] = ((read_regs_i[i] == addr_req) & read_regs_valid_i[i]);
assign read_deps_inflight[i] = ((read_regs_i[i] == addr_inflight) & read_regs_valid_i[i]);
assign read_deps_waiting[i] = ((read_regs_i[i] == addr_waiting) & read_regs_valid_i[i]);
    end

endgenerate
generate
    for(i=0;i < 2;i=i + 1)begin
assign write_deps_req[i] = ((write_regs_i[i] == addr_req) & write_regs_valid_i[i]);
assign write_deps_inflight[i] = ((write_regs_i[i] == addr_inflight) & write_regs_valid_i[i]);
assign write_deps_waiting[i] = ((write_regs_i[i] == addr_waiting) & write_regs_valid_i[i]);
    end

endgenerate
always @(posedge clk_i or negedge rst_ni) begin
    if(~rst_ni) begin
        valid_inflight <= 1'b0;
        valid_waiting <= 1'b0;
        addr_inflight <= 32'd0;
        addr_waiting <= 32'd0;
    end else begin
        valid_inflight <= valid_inflight_dn;
        valid_waiting <= valid_waiting_dn;
        addr_inflight <= addr_inflight_dn;
        addr_waiting <= addr_waiting_dn;
    end
end
always @(*) begin
    valid_inflight_dn = valid_inflight;
    valid_waiting_dn = valid_waiting;
    addr_inflight_dn = addr_inflight;
    addr_waiting_dn = addr_waiting;
    if(req_accepted & (!returned_req)) begin
        valid_inflight_dn = 1'b1;
        addr_inflight_dn = addr_req;
        if(valid_inflight & (!returned_inflight)) begin
            valid_waiting_dn = 1'b1;
            addr_waiting_dn = addr_inflight;
        end
        if(returned_waiting) begin
            valid_waiting_dn = 1'b1;
            addr_waiting_dn = addr_inflight;
        end
    end else if(returned_inflight) begin
        valid_inflight_dn = 32'd0;
        valid_waiting_dn = 32'd0;
        addr_inflight_dn = 32'd0;
        addr_waiting_dn = 32'd0;
    end else if(returned_waiting) begin
        valid_waiting_dn = 32'd0;
        addr_waiting_dn = 32'd0;
    end
end
always @(posedge clk_i or negedge rst_ni) begin
    if(~rst_ni) begin
        apu_lat <= 32'd0;
    end else begin
        if(valid_req) begin
            apu_lat <= apu_lat_i;
        end
    end
end
always @(*) begin
    apu_waddr_o = 32'd0;
    if(returned_req) begin
        apu_waddr_o = addr_req;
    end
    if(returned_inflight) begin
        apu_waddr_o = addr_inflight;
    end
    if(returned_waiting) begin
        apu_waddr_o = addr_waiting;
    end
end
endmodule

