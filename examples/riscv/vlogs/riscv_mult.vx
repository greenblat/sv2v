module riscv_mult #( parameter SHARED_DSP_MULT = 1) (
    input  clk
    ,input [31:0] dot_op_a_i
    ,input [31:0] dot_op_b_i
    ,input [31:0] dot_op_c_i
    ,input [1:0] dot_signed_i
    ,input  enable_i
    ,input  ex_ready_i
    ,input [4:0] imm_i
    ,output reg  multicycle_o
    ,input [31:0] op_a_i
    ,input [31:0] op_b_i
    ,input [31:0] op_c_i
    ,input [2:0] operator_i
    ,output  ready_o
    ,output reg [31:0] result_o
    ,input  rst_n
    ,input [1:0] short_signed_i
    ,input  short_subword_i
);
localparam FINISH = 4;
localparam MUL_DOT16 = 3'b101;
localparam MUL_DOT8 = 3'b100;
localparam MUL_MSU32 = 3'b001;
localparam IDLE = 0;
localparam MUL_MAC32 = 3'b000;
localparam STEP2 = 3;
localparam STEP1 = 2;
localparam STEP0 = 1;
localparam MUL_IR = 3'b011;
localparam MUL_H = 3'b110;
localparam MUL_I = 3'b010;
wire [31:0] dot_short_result;
reg  mulh_ready;
wire  short_mac_msb1;
wire  short_mac_msb0;
wire [1:0] short_signed;
wire [31:0] dot_char_result;
wire [31:0] int_op_a_msu;
reg  mulh_shift_arith;
reg  mulh_clearcarry;
wire [31:0] int_op_b_msu;
wire [33:0] short_result;
reg [1:0] mulh_signed;
wire [33:0] short_mac;
reg [2:0] mulh_CS;
wire  short_shift_arith;
reg  mulh_active;
wire [32:0] short_op_c;
wire [16:0] short_op_b;
wire [16:0] short_op_a;
wire [1:0] short_subword;
wire [33:0] short_mul;
reg  mulh_save;
wire [4:0] short_imm;
reg  mulh_carry_q;
wire  int_is_msu;
reg [1:0] mulh_subword;
wire [31:0] short_round_tmp;
wire [31:0] int_result;
wire [31:0] short_round;
reg [2:0] mulh_NS;
reg [4:0] mulh_imm;
assign   short_round_tmp = 32'h00000001 << imm_i;
assign   short_round = (operator_i == MUL_IR) ? {1'b0, short_round_tmp[31:1]} : 32'd0;
assign   short_op_a[15:0] = short_subword[0] ? op_a_i[31:16] : op_a_i[15:0];
assign   short_op_b[15:0] = short_subword[1] ? op_b_i[31:16] : op_b_i[15:0];
assign   short_op_a[16] = short_signed[0] & short_op_a[15];
assign   short_op_b[16] = short_signed[1] & short_op_b[15];
assign   short_op_c = mulh_active ? $signed({mulh_carry_q, op_c_i}) : $signed(op_c_i);
assign   short_mul = $signed(short_op_a) * $signed(short_op_b);
assign   short_mac = ($signed(short_op_c) + $signed(short_mul)) + $signed(short_round);
assign   short_result = $signed({(short_shift_arith & short_mac_msb1), (short_shift_arith & short_mac_msb0), short_mac[31:0]}) >>> short_imm;
assign   short_imm = mulh_active ? mulh_imm : imm_i;
assign   short_subword = mulh_active ? mulh_subword : { 2 { {short_subword_i} }};
assign   short_signed = mulh_active ? mulh_signed : short_signed_i;
assign   short_shift_arith = mulh_active ? mulh_shift_arith : short_signed_i[0];
assign   short_mac_msb1 = mulh_active ? short_mac[33] : short_mac[31];
assign   short_mac_msb0 = mulh_active ? short_mac[32] : short_mac[31];
assign   int_is_msu = operator_i == MUL_MSU32;
assign   int_op_a_msu = op_a_i ^ { 32 { {int_is_msu} }};
assign   int_op_b_msu = op_b_i & { 32 { {int_is_msu} }};
assign   int_result = ($signed(op_c_i) + $signed(int_op_b_msu)) + ($signed(int_op_a_msu) * $signed(op_b_i));
assign   ready_o = mulh_ready;
generate
    if(SHARED_DSP_MULT == 0) begin
        wire [3:0][8:0] dot_char_op_a;
        wire [3:0][8:0] dot_char_op_b;
        wire [3:0][17:0] dot_char_mul;
        wire [1:0][16:0] dot_short_op_a;
        wire [1:0][16:0] dot_short_op_b;
        wire [1:0][33:0] dot_short_mul;
assign dot_char_op_a[0] = {(dot_signed_i[1] & dot_op_a_i[7]), dot_op_a_i[7:0]};
assign dot_char_op_a[1] = {(dot_signed_i[1] & dot_op_a_i[15]), dot_op_a_i[15:8]};
assign dot_char_op_a[2] = {(dot_signed_i[1] & dot_op_a_i[23]), dot_op_a_i[23:16]};
assign dot_char_op_a[3] = {(dot_signed_i[1] & dot_op_a_i[31]), dot_op_a_i[31:24]};
assign dot_char_op_b[0] = {(dot_signed_i[0] & dot_op_b_i[7]), dot_op_b_i[7:0]};
assign dot_char_op_b[1] = {(dot_signed_i[0] & dot_op_b_i[15]), dot_op_b_i[15:8]};
assign dot_char_op_b[2] = {(dot_signed_i[0] & dot_op_b_i[23]), dot_op_b_i[23:16]};
assign dot_char_op_b[3] = {(dot_signed_i[0] & dot_op_b_i[31]), dot_op_b_i[31:24]};
assign dot_char_mul[0] = ($signed(dot_char_op_a[0]) * $signed(dot_char_op_b[0]));
assign dot_char_mul[1] = ($signed(dot_char_op_a[1]) * $signed(dot_char_op_b[1]));
assign dot_char_mul[2] = ($signed(dot_char_op_a[2]) * $signed(dot_char_op_b[2]));
assign dot_char_mul[3] = ($signed(dot_char_op_a[3]) * $signed(dot_char_op_b[3]));
assign dot_char_result = (((($signed(dot_char_mul[0]) + $signed(dot_char_mul[1])) + $signed(dot_char_mul[2])) + $signed(dot_char_mul[3])) + $signed(dot_op_c_i));
assign dot_short_op_a[0] = {(dot_signed_i[1] & dot_op_a_i[15]), dot_op_a_i[15:0]};
assign dot_short_op_a[1] = {(dot_signed_i[1] & dot_op_a_i[31]), dot_op_a_i[31:16]};
assign dot_short_op_b[0] = {(dot_signed_i[0] & dot_op_b_i[15]), dot_op_b_i[15:0]};
assign dot_short_op_b[1] = {(dot_signed_i[0] & dot_op_b_i[31]), dot_op_b_i[31:16]};
assign dot_short_mul[0] = ($signed(dot_short_op_a[0]) * $signed(dot_short_op_b[0]));
assign dot_short_mul[1] = ($signed(dot_short_op_a[1]) * $signed(dot_short_op_b[1]));
assign dot_short_result = (($signed(dot_short_mul[0][31:0]) + $signed(dot_short_mul[1][31:0])) + $signed(dot_op_c_i));
    end else begin
assign dot_char_result = 32'd0;
assign dot_short_result = 32'd0;
    end

endgenerate
always @(*) begin
    mulh_NS = mulh_CS;
    mulh_imm = 5'd0;
    mulh_subword = 2'b00;
    mulh_signed = 2'b00;
    mulh_shift_arith = 1'b0;
    mulh_ready = 1'b0;
    mulh_active = 1'b1;
    mulh_save = 1'b0;
    mulh_clearcarry = 1'b0;
    multicycle_o = 1'b0;
    case (mulh_CS)
        IDLE: begin
            mulh_active = 1'b0;
            mulh_ready = 1'b1;
            mulh_save = 1'b0;
            if((operator_i == MUL_H) && enable_i) begin
                mulh_ready = 1'b0;
                mulh_NS = STEP0;
            end
        end
        STEP0: begin
            multicycle_o = 1'b1;
            mulh_imm = 5'd16;
            mulh_active = 1'b1;
            mulh_save = 1'b0;
            mulh_NS = STEP1;
        end
        STEP1: begin
            multicycle_o = 1'b1;
            mulh_signed = {short_signed_i[1], 1'b0};
            mulh_subword = 2'b10;
            mulh_save = 1'b1;
            mulh_shift_arith = 1'b1;
            mulh_NS = STEP2;
        end
        STEP2: begin
            multicycle_o = 1'b1;
            mulh_signed = {1'b0, short_signed_i[0]};
            mulh_subword = 2'b01;
            mulh_imm = 5'd16;
            mulh_save = 1'b1;
            mulh_clearcarry = 1'b1;
            mulh_shift_arith = 1'b1;
            mulh_NS = FINISH;
        end
        FINISH: begin
            mulh_signed = short_signed_i;
            mulh_subword = 2'b11;
            mulh_ready = 1'b1;
            if(ex_ready_i) begin
                mulh_NS = IDLE;
            end
        end
    endcase
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        mulh_CS <= IDLE;
        mulh_carry_q <= 1'b0;
    end else begin
        mulh_CS <= mulh_NS;
        if(mulh_save) begin
            mulh_carry_q <= (~mulh_clearcarry) & short_mac[32];
        end else if(ex_ready_i) begin
            mulh_carry_q <= 1'b0;
        end
    end
end
always @(*) begin
    result_o = 32'd0;
    case (operator_i)
        MUL_MAC32,MUL_MSU32: result_o = int_result[31:0];
        MUL_I,MUL_IR,MUL_H: result_o = short_result[31:0];
        MUL_DOT8: result_o = dot_char_result[31:0];
        MUL_DOT16: result_o = dot_short_result[31:0];
        default: ;    endcase
end
endmodule

