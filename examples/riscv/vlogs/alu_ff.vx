module alu_ff #( parameter LEN = 32) (
    output [($clog2(LEN) - 1):0] first_one_o
    ,input [(LEN - 1):0] in_i
    ,output  no_ones_o
);
localparam NUM_LEVELS = $clog2(LEN);
wire [(LEN - 1):0] [(NUM_LEVELS - 1):0] index_lut;
wire [((2 ** NUM_LEVELS) - 1):0] sel_nodes;
wire [((2 ** NUM_LEVELS) - 1):0] [(NUM_LEVELS - 1):0] index_nodes;
assign   first_one_o = index_nodes[0];
assign   no_ones_o = ~sel_nodes[0];
generate
    genvar j ;

    for(j=0;j < LEN;j=j + 1)begin
assign index_lut[j] = $unsigned(j);
    end

endgenerate
generate
    genvar k ;

    genvar l ;

    genvar level ;

    for(level=0;level < NUM_LEVELS;level=level + 1)begin
        if(level < (NUM_LEVELS - 1)) begin
            for(l=0;l < (2 ** level);l=l + 1)begin
assign sel_nodes[(((2 ** level) - 1) + l)] = (sel_nodes[(((2 ** (level + 1)) - 1) + (l * 2))] | sel_nodes[((((2 ** (level + 1)) - 1) + (l * 2)) + 1)]);
assign index_nodes[(((2 ** level) - 1) + l)] = sel_nodes[(((2 ** (level + 1)) - 1) + (l * 2))] ? index_nodes[(((2 ** (level + 1)) - 1) + (l * 2))] :
     index_nodes[((((2 ** (level + 1)) - 1) + (l * 2)) + 1)];
            end
        end
        if((level == NUM_LEVELS) - 1) begin
            for(k=0;k < (2 ** level);k=k + 1)begin
                if((k * 2) < (LEN - 1)) begin
assign sel_nodes[(((2 ** level) - 1) + k)] = (in_i[(k * 2)] | in_i[((k * 2) + 1)]);
assign index_nodes[(((2 ** level) - 1) + k)] = in_i[(k * 2)] ? index_lut[(k * 2)] : index_lut[((k * 2) + 1)];
                end
                if(((k * 2) == LEN) - 1) begin
assign sel_nodes[(((2 ** level) - 1) + k)] = in_i[(k * 2)];
assign index_nodes[(((2 ** level) - 1) + k)] = index_lut[(k * 2)];
                end
                if((k * 2) > (LEN - 1)) begin
assign sel_nodes[(((2 ** level) - 1) + k)] = 1'b0;
assign index_nodes[(((2 ** level) - 1) + k)] = 32'd0;
                end
            end
        end
    end

endgenerate
endmodule

