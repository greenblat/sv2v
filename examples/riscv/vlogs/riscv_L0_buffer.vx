module riscv_L0_buffer #( parameter RDATA_IN_WIDTH = 128) (
    output [31:0] addr_o
    ,input [31:0] branch_addr_i
    ,input  branch_i
    ,output  busy_o
    ,input  clk
    ,output  fetch_gnt_o
    ,output reg  fetch_valid_o
    ,input [31:0] hwlp_addr_i
    ,input  hwlp_i
    ,output [31:0] instr_addr_o
    ,input  instr_gnt_i
    ,input [((RDATA_IN_WIDTH / 32) - 1):0] [31:0] instr_rdata_i
    ,output reg  instr_req_o
    ,input  instr_rvalid_i
    ,input [31:0] prefetch_addr_i
    ,input  prefetch_i
    ,output [((RDATA_IN_WIDTH / 32) - 1):0] [31:0] rdata_o
    ,input  rst_n
    ,output  valid_o
);
localparam WAIT_GNT = 2;
localparam VALID_L0 = 1;
localparam ABORTED_BRANCH = 4;
localparam WAIT_HWLOOP = 5;
localparam WAIT_RVALID = 3;
localparam EMPTY = 0;
reg [31:0] addr_q;
reg  valid;
reg [2:0] NS;
reg [31:0] instr_addr_int;
reg [2:0] CS;
reg [3:0] [31:0] L0_buffer;
assign   instr_addr_o = {instr_addr_int[31:4], 4'b0000};
assign   rdata_o = instr_rvalid_i ? instr_rdata_i : L0_buffer;
assign   addr_o = addr_q;
assign   valid_o = valid & (~branch_i);
assign   busy_o = (CS != EMPTY) && ((CS != VALID_L0) || instr_req_o);
assign   fetch_gnt_o = instr_gnt_i;
always @(*) begin
    NS = CS;
    valid = 1'b0;
    instr_req_o = 1'b0;
    instr_addr_int = 32'd0;
    fetch_valid_o = 1'b0;
    case (CS)
        EMPTY: begin
            if(branch_i) begin
                instr_addr_int = branch_addr_i;
            end else if(hwlp_i) begin
                instr_addr_int = hwlp_addr_i;
            end else begin
                instr_addr_int = prefetch_addr_i;
            end
            if((branch_i | hwlp_i) | prefetch_i) begin
                instr_req_o = 1'b1;
                if(instr_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end
        end
        WAIT_GNT: begin
            if(branch_i) begin
                instr_addr_int = branch_addr_i;
            end else if(hwlp_i) begin
                instr_addr_int = hwlp_addr_i;
            end else begin
                instr_addr_int = addr_q;
            end
            if(branch_i) begin
                instr_req_o = 1'b1;
                if(instr_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end else begin
                instr_req_o = 1'b1;
                if(instr_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end
        end
        WAIT_RVALID: begin
            valid = instr_rvalid_i;
            if(branch_i) begin
                instr_addr_int = branch_addr_i;
            end else if(hwlp_i) begin
                instr_addr_int = hwlp_addr_i;
            end else begin
                instr_addr_int = prefetch_addr_i;
            end
            if(branch_i) begin
                if(instr_rvalid_i) begin
                    fetch_valid_o = 1'b1;
                    instr_req_o = 1'b1;
                    if(instr_gnt_i) begin
                        NS = WAIT_RVALID;
                    end else begin
                        NS = WAIT_GNT;
                    end
                end else begin
                    NS = ABORTED_BRANCH;
                end
            end else begin
                if(instr_rvalid_i) begin
                    fetch_valid_o = 1'b1;
                    if(prefetch_i | hwlp_i) begin
                        instr_req_o = 1'b1;
                        if(instr_gnt_i) begin
                            NS = WAIT_RVALID;
                        end else begin
                            NS = WAIT_GNT;
                        end
                    end else begin
                        NS = VALID_L0;
                    end
                end
            end
        end
        VALID_L0: begin
            valid = 1'b1;
            if(branch_i) begin
                instr_addr_int = branch_addr_i;
            end else if(hwlp_i) begin
                instr_addr_int = hwlp_addr_i;
            end else begin
                instr_addr_int = prefetch_addr_i;
            end
            if((branch_i | hwlp_i) | prefetch_i) begin
                instr_req_o = 1'b1;
                if(instr_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end
        end
        ABORTED_BRANCH: begin
            if(branch_i) begin
                instr_addr_int = branch_addr_i;
            end else begin
                instr_addr_int = addr_q;
            end
            if(instr_rvalid_i) begin
                instr_req_o = 1'b1;
                if(instr_gnt_i) begin
                    NS = WAIT_RVALID;
                end else begin
                    NS = WAIT_GNT;
                end
            end
        end
        default: NS = EMPTY;
    endcase
end
always @(posedge clk or negedge rst_n) begin
    if(~rst_n) begin
        CS <= EMPTY;
        L0_buffer <= 32'd0;
        addr_q <= 32'd0;
    end else begin
        CS <= NS;
        if(instr_rvalid_i) begin
            L0_buffer <= instr_rdata_i;
        end
        if((branch_i | hwlp_i) | prefetch_i) begin
            addr_q <= instr_addr_int;
        end
    end
end
endmodule

