module riscv_alu_div #( parameter C_WIDTH = 32,parameter C_LOG_WIDTH = 6) (
    input  Clk_CI
    ,input  InVld_SI
    ,input [(C_WIDTH - 1):0] OpA_DI
    ,input  OpBIsZero_SI
    ,input [(C_LOG_WIDTH - 1):0] OpBShift_DI
    ,input  OpBSign_SI
    ,input [(C_WIDTH - 1):0] OpB_DI
    ,input [1:0] OpCode_SI
    ,input  OutRdy_SI
    ,output reg  OutVld_SO
    ,output [(C_WIDTH - 1):0] Res_DO
    ,input  Rst_RBI
);
localparam IDLE = 0;
localparam FINISH = 2;
localparam DIVIDE = 1;
wire  CompInv_SN;
wire  ABComp_S;
reg [1:0] State_SP;
wire [(C_WIDTH - 1):0] ResReg_DP_rev;
wire  CntZero_S;
reg  CompInv_SP;
wire  PmSel_S;
wire [(C_WIDTH - 1):0] AddOut_D;
wire [(C_WIDTH - 1):0] OutMux_D;
reg [(C_WIDTH - 1):0] BReg_DP;
wire  RemSel_SN;
reg [(C_WIDTH - 1):0] AReg_DP;
wire [(C_WIDTH - 1):0] AReg_DN;
wire [(C_WIDTH - 1):0] BReg_DN;
reg  RemSel_SP;
wire [(C_WIDTH - 1):0] BMux_D;
reg [(C_WIDTH - 1):0] ResReg_DP;
wire [(C_WIDTH - 1):0] ResReg_DN;
reg  BRegEn_S;
reg  ARegEn_S;
wire  ResInv_SN;
reg  LoadEn_S;
reg [(C_LOG_WIDTH - 1):0] Cnt_DP;
wire [(C_WIDTH - 1):0] AddMux_D;
reg  ResInv_SP;
reg [1:0] State_SN;
wire [(C_WIDTH - 1):0] AddTmp_D;
wire [(C_LOG_WIDTH - 1):0] Cnt_DN;
reg  ResRegEn_S;
genvar index;
assign   PmSel_S = LoadEn_S & (~(OpCode_SI[0] & (OpA_DI[(C_WIDTH - 1)] ^ OpBSign_SI)));
assign   AddMux_D = LoadEn_S ? OpA_DI : BReg_DP;
assign   BMux_D = LoadEn_S ? OpB_DI : {CompInv_SP, BReg_DP[(C_WIDTH - 1):1]};
assign   OutMux_D = RemSel_SP ? AReg_DP : ResReg_DP_rev;
assign   Res_DO = ResInv_SP ? (-$signed(OutMux_D)) : OutMux_D;
assign   ABComp_S = ((AReg_DP == BReg_DP) | ((AReg_DP > BReg_DP) ^ CompInv_SP)) & ((|AReg_DP) | OpBIsZero_SI);
assign   AddTmp_D = LoadEn_S ? 0 : AReg_DP;
assign   AddOut_D = PmSel_S ? (AddTmp_D + AddMux_D) : (AddTmp_D - $signed(AddMux_D));
assign   Cnt_DN = LoadEn_S ? OpBShift_DI : (~CntZero_S) ? (Cnt_DP - 1) : Cnt_DP;
assign   CntZero_S = ~(|Cnt_DP);
assign   RemSel_SN = LoadEn_S ? OpCode_SI[1] : RemSel_SP;
assign   CompInv_SN = LoadEn_S ? OpBSign_SI : CompInv_SP;
assign   ResInv_SN = LoadEn_S ? ((((~OpBIsZero_SI) | OpCode_SI[1]) & OpCode_SI[0]) & (OpA_DI[(C_WIDTH - 1)] ^ OpBSign_SI)) : ResInv_SP;
assign   AReg_DN = ARegEn_S ? AddOut_D : AReg_DP;
assign   BReg_DN = BRegEn_S ? BMux_D : BReg_DP;
assign   ResReg_DN = LoadEn_S ? 32'd0 : ResRegEn_S ? {ABComp_S, ResReg_DP[(C_WIDTH - 1):1]} : ResReg_DP;
generate
    for(index=0;index < C_WIDTH;index=index + 1)begin
        begin :bit_swapping
assign ResReg_DP_rev[index] = ResReg_DP[((C_WIDTH - 1) - index)];
        end
    end

endgenerate
always @(*) begin
    begin :p_fsm
        State_SN = State_SP;
        OutVld_SO = 1'b0;
        LoadEn_S = 1'b0;
        ARegEn_S = 1'b0;
        BRegEn_S = 1'b0;
        ResRegEn_S = 1'b0;
        case (State_SP)
            IDLE: begin
                OutVld_SO = 1'b1;
                if(InVld_SI) begin
                    OutVld_SO = 1'b0;
                    ARegEn_S = 1'b1;
                    BRegEn_S = 1'b1;
                    LoadEn_S = 1'b1;
                    State_SN = DIVIDE;
                end
            end
            DIVIDE: begin
                ARegEn_S = ABComp_S;
                BRegEn_S = 1'b1;
                ResRegEn_S = 1'b1;
                if(CntZero_S) begin
                    State_SN = FINISH;
                end
            end
            FINISH: begin
                OutVld_SO = 1'b1;
                if(OutRdy_SI) begin
                    State_SN = IDLE;
                end
            end
            default: ;        endcase
    end
end
always @(posedge Clk_CI or negedge Rst_RBI) begin
    begin :p_regs
        if(~Rst_RBI) begin
            State_SP <= IDLE;
            AReg_DP <= 32'd0;
            BReg_DP <= 32'd0;
            ResReg_DP <= 32'd0;
            Cnt_DP <= 32'd0;
            RemSel_SP <= 1'b0;
            CompInv_SP <= 1'b0;
            ResInv_SP <= 1'b0;
        end else begin
            State_SP <= State_SN;
            AReg_DP <= AReg_DN;
            BReg_DP <= BReg_DN;
            ResReg_DP <= ResReg_DN;
            Cnt_DP <= Cnt_DN;
            RemSel_SP <= RemSel_SN;
            CompInv_SP <= CompInv_SN;
            ResInv_SP <= ResInv_SN;
        end
    end
end
endmodule

