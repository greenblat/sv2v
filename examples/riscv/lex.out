module module 49 5
riscv_apu_disp token 49 20
( ( 49 22
input input 50 6
logic logic 50 12
clk_i token 50 44
, , 50 45
input input 51 6
logic logic 51 12
rst_ni token 51 45
, , 51 46
input input 54 6
logic logic 54 12
enable_i token 54 47
, , 54 48
input input 55 6
logic logic 55 12
[ [ 55 14
1 number 55 15
: : 55 16
0 number 55 17
] ] 55 18
apu_lat_i token 55 48
, , 55 49
input input 56 6
logic logic 56 12
[ [ 56 14
5 number 56 15
: : 56 16
0 number 56 17
] ] 56 18
apu_waddr_i token 56 50
, , 56 51
output output 59 7
logic logic 59 13
[ [ 59 15
5 number 59 16
: : 59 17
0 number 59 18
] ] 59 19
apu_waddr_o token 59 50
, , 59 51
output output 60 7
logic logic 60 13
apu_multicycle_o token 60 55
, , 60 56
output output 61 7
logic logic 61 13
apu_singlecycle_o token 61 56
, , 61 57
output output 64 7
logic logic 64 13
active_o token 64 47
, , 64 48
output output 67 7
logic logic 67 13
stall_o token 67 46
, , 67 47
input input 70 6
logic logic 70 13
[ [ 70 15
2 number 70 16
: : 70 17
0 number 70 18
] ] 70 19
[ [ 70 20
5 number 70 21
: : 70 22
0 number 70 23
] ] 70 24
read_regs_i token 70 50
, , 70 51
input input 71 6
logic logic 71 13
[ [ 71 15
2 number 71 16
: : 71 17
0 number 71 18
] ] 71 19
read_regs_valid_i token 71 56
, , 71 57
output output 72 7
logic logic 72 13
read_dep_o token 72 49
, , 72 50
input input 74 6
logic logic 74 13
[ [ 74 15
1 number 74 16
: : 74 17
0 number 74 18
] ] 74 19
[ [ 74 20
5 number 74 21
: : 74 22
0 number 74 23
] ] 74 24
write_regs_i token 74 51
, , 74 52
input input 75 6
logic logic 75 13
[ [ 75 15
1 number 75 16
: : 75 17
0 number 75 18
] ] 75 19
write_regs_valid_i token 75 57
, , 75 58
output output 76 7
logic logic 76 13
write_dep_o token 76 50
, , 76 51
output output 79 7
logic logic 79 13
perf_type_o token 79 50
, , 79 51
output output 80 7
logic logic 80 13
perf_cont_o token 80 50
, , 80 51
output output 84 7
logic logic 84 13
apu_master_req_o token 84 55
, , 84 56
output output 85 7
logic logic 85 13
apu_master_ready_o token 85 57
, , 85 58
input input 86 6
logic logic 86 12
apu_master_gnt_i token 86 55
, , 86 56
input input 88 6
logic logic 88 12
apu_master_valid_i token 88 57
) ) 90 2
; ; 90 3
logic logic 92 6
[ [ 92 8
5 number 92 9
: : 92 10
0 number 92 11
] ] 92 12
addr_req token 92 29
, , 92 30
addr_inflight token 92 44
, , 92 45
addr_waiting token 92 58
; ; 92 59
logic logic 93 6
[ [ 93 8
5 number 93 9
: : 93 10
0 number 93 11
] ] 93 12
addr_inflight_dn token 93 37
, , 93 38
addr_waiting_dn token 93 54
; ; 93 55
logic logic 94 6
valid_req token 94 30
, , 94 31
valid_inflight token 94 46
, , 94 47
valid_waiting token 94 61
; ; 94 62
logic logic 95 6
valid_inflight_dn token 95 38
, , 95 39
valid_waiting_dn token 95 56
; ; 95 57
logic logic 96 6
returned_req token 96 33
, , 96 34
returned_inflight token 96 52
, , 96 53
returned_waiting token 96 70
; ; 96 71
logic logic 98 6
req_accepted token 98 33
; ; 98 34
logic logic 99 6
active token 99 27
; ; 99 28
logic logic 100 6
[ [ 100 8
1 number 100 9
: : 100 10
0 number 100 11
] ] 100 12
apu_lat token 100 28
; ; 100 29
logic logic 103 6
[ [ 103 8
2 number 103 9
: : 103 10
0 number 103 11
] ] 103 12
read_deps_req token 103 26
, , 103 27
read_deps_inflight token 103 47
, , 103 48
read_deps_waiting token 103 67
; ; 103 68
logic logic 104 6
[ [ 104 8
1 number 104 9
: : 104 10
0 number 104 11
] ] 104 12
write_deps_req token 104 27
, , 104 28
write_deps_inflight token 104 48
, , 104 49
write_deps_waiting token 104 68
; ; 104 69
logic logic 105 6
read_dep_req token 105 25
, , 105 26
read_dep_inflight token 105 46
, , 105 47
read_dep_waiting token 105 66
; ; 105 67
logic logic 106 6
write_dep_req token 106 26
, , 106 27
write_dep_inflight token 106 47
, , 106 48
write_dep_waiting token 106 67
; ; 106 68
logic logic 108 6
stall_full token 108 17
, , 108 18
stall_type token 108 29
, , 108 30
stall_nack token 108 41
; ; 108 42
assign assign 111 7
valid_req token 111 17
= = 111 22
enable_i token 111 31
& & 111 33
! ! 111 35
( ( 111 36
stall_full token 111 46
| | 111 48
stall_type token 111 59
) ) 111 60
; ; 111 61
assign assign 112 7
addr_req token 112 16
= = 112 22
apu_waddr_i token 112 34
; ; 112 35
assign assign 114 7
req_accepted token 114 20
= = 114 22
valid_req token 114 32
& & 114 34
apu_master_gnt_i token 114 51
; ; 114 52
assign assign 120 7
returned_req token 120 20
= = 120 27
valid_req token 120 37
& & 120 44
apu_master_valid_i token 120 64
& & 120 67
! ! 120 69
valid_inflight token 120 83
& & 120 85
! ! 120 87
valid_waiting token 120 100
; ; 120 101
assign assign 121 7
returned_inflight token 121 25
= = 121 27
valid_inflight token 121 42
& & 121 44
( ( 121 46
apu_master_valid_i token 121 64
) ) 121 65
& & 121 67
! ! 121 69
valid_waiting token 121 82
; ; 121 83
assign assign 122 7
returned_waiting token 122 24
= = 122 27
valid_waiting token 122 41
& & 122 44
( ( 122 46
apu_master_valid_i token 122 64
) ) 122 65
; ; 122 66
always_ff always_ff 125 10
@ @ 125 12
( ( 125 13
posedge posedge 125 20
clk_i token 125 26
or or 125 29
negedge negedge 125 37
rst_ni token 125 44
) ) 125 45
begin begin 125 51
if if 126 5
( ( 126 6
~ ~ 126 7
rst_ni token 126 13
) ) 126 14
begin begin 126 20
valid_inflight token 127 19
<= sm_eq 127 24
1'b0 bin 127 26
; ; 127 30
valid_waiting token 128 18
<= sm_eq 128 24
1'b0 bin 128 26
; ; 128 30
addr_inflight token 129 18
<= sm_eq 129 24
'0 udig 129 27
; ; 129 28
addr_waiting token 130 17
<= sm_eq 130 24
'0 udig 130 27
; ; 130 28
end end 131 6
else else 131 11
begin begin 131 17
valid_inflight token 132 20
<= sm_eq 132 24
valid_inflight_dn token 132 42
; ; 132 43
valid_waiting token 133 19
<= sm_eq 133 24
valid_waiting_dn token 133 41
; ; 133 42
addr_inflight token 134 19
<= sm_eq 134 24
addr_inflight_dn token 134 41
; ; 134 42
addr_waiting token 135 18
<= sm_eq 135 24
addr_waiting_dn token 135 40
; ; 135 41
end end 136 6
end end 137 4
always_comb always_comb 139 12
begin begin 139 18
valid_inflight_dn token 140 21
= = 140 28
valid_inflight token 140 43
; ; 140 44
valid_waiting_dn token 141 20
= = 141 28
valid_waiting token 141 42
; ; 141 43
addr_inflight_dn token 142 20
= = 142 28
addr_inflight token 142 42
; ; 142 43
addr_waiting_dn token 143 19
= = 143 28
addr_waiting token 143 41
; ; 143 42
if if 145 6
( ( 145 8
req_accepted token 145 20
& & 145 22
! ! 145 24
returned_req token 145 36
) ) 145 37
begin begin 145 43
valid_inflight_dn token 146 24
= = 146 28
1'b1 bin 146 30
; ; 146 34
addr_inflight_dn token 147 23
= = 147 28
addr_req token 147 37
; ; 147 38
if if 148 9
( ( 148 11
valid_inflight token 148 25
& & 148 27
! ! 148 29
( ( 148 30
returned_inflight token 148 47
) ) 148 48
) ) 148 49
begin begin 148 55
valid_waiting_dn token 149 26
= = 149 28
1'b1 bin 149 30
; ; 149 34
addr_waiting_dn token 150 25
= = 150 28
addr_inflight token 150 42
; ; 150 43
end end 151 10
if if 152 9
( ( 152 11
returned_waiting token 152 27
) ) 152 28
begin begin 152 34
valid_waiting_dn token 153 26
= = 153 28
1'b1 bin 153 30
; ; 153 34
addr_waiting_dn token 154 25
= = 154 28
addr_inflight token 154 42
; ; 154 43
end end 155 10
end end 156 7
else else 157 8
if if 157 11
( ( 157 13
returned_inflight token 157 30
) ) 157 31
begin begin 157 37
valid_inflight_dn token 158 24
= = 158 28
'0 udig 158 31
; ; 158 32
valid_waiting_dn token 159 23
= = 159 28
'0 udig 159 31
; ; 159 32
addr_inflight_dn token 160 23
= = 160 28
'0 udig 160 31
; ; 160 32
addr_waiting_dn token 161 22
= = 161 28
'0 udig 161 31
; ; 161 32
end end 162 7
else else 163 8
if if 163 11
( ( 163 13
returned_waiting token 163 29
) ) 163 30
begin begin 163 36
valid_waiting_dn token 164 23
= = 164 28
'0 udig 164 31
; ; 164 32
addr_waiting_dn token 165 22
= = 165 28
'0 udig 165 31
; ; 165 32
end end 166 7
end end 167 4
assign assign 173 7
active token 173 14
= = 173 16
valid_inflight token 173 31
| | 173 33
valid_waiting token 173 47
; ; 173 48
always_ff always_ff 176 10
@ @ 176 12
( ( 176 13
posedge posedge 176 20
clk_i token 176 26
or or 176 29
negedge negedge 176 37
rst_ni token 176 44
) ) 176 45
begin begin 176 51
if if 177 5
( ( 177 6
~ ~ 177 7
rst_ni token 177 13
) ) 177 14
begin begin 177 20
apu_lat token 178 12
<= sm_eq 178 18
'0 udig 178 21
; ; 178 22
end end 179 6
else else 179 11
begin begin 179 17
if if 180 7
( ( 180 8
valid_req token 180 17
) ) 180 18
begin begin 180 24
apu_lat token 181 14
<= sm_eq 181 18
apu_lat_i token 181 28
; ; 181 29
end end 182 8
end end 183 6
end end 184 4
generate generate 190 9
for for 191 6
( ( 191 8
genvar genvar 191 14
i token 191 16
= = 191 18
0 number 191 20
; ; 191 21
i token 191 23
< < 191 25
3 number 191 27
; ; 191 28
i token 191 30
++ plusplus 191 32
) ) 191 33
begin begin 191 39
assign assign 192 11
read_deps_req token 192 25
[ [ 192 26
i token 192 27
] ] 192 28
= = 192 35
( ( 192 37
read_regs_i token 192 48
[ [ 192 49
i token 192 50
] ] 192 51
== eq_eq 192 54
addr_req token 192 63
) ) 192 64
& & 192 71
read_regs_valid_i token 192 89
[ [ 192 90
i token 192 91
] ] 192 92
; ; 192 93
assign assign 193 11
read_deps_inflight token 193 30
[ [ 193 31
i token 193 32
] ] 193 33
= = 193 35
( ( 193 37
read_regs_i token 193 48
[ [ 193 49
i token 193 50
] ] 193 51
== eq_eq 193 54
addr_inflight token 193 68
) ) 193 69
& & 193 71
read_regs_valid_i token 193 89
[ [ 193 90
i token 193 91
] ] 193 92
; ; 193 93
assign assign 194 11
read_deps_waiting token 194 29
[ [ 194 30
i token 194 31
] ] 194 32
= = 194 35
( ( 194 37
read_regs_i token 194 48
[ [ 194 49
i token 194 50
] ] 194 51
== eq_eq 194 54
addr_waiting token 194 67
) ) 194 68
& & 194 71
read_regs_valid_i token 194 89
[ [ 194 90
i token 194 91
] ] 194 92
; ; 194 93
end end 195 6
endgenerate endgenerate 196 12
generate generate 198 9
for for 199 6
( ( 199 8
genvar genvar 199 14
i token 199 16
= = 199 18
0 number 199 20
; ; 199 21
i token 199 23
< < 199 25
2 number 199 27
; ; 199 28
i token 199 30
++ plusplus 199 32
) ) 199 33
begin begin 199 39
assign assign 200 11
write_deps_req token 200 26
[ [ 200 27
i token 200 28
] ] 200 29
= = 200 36
( ( 200 38
write_regs_i token 200 50
[ [ 200 51
i token 200 52
] ] 200 53
== eq_eq 200 56
addr_req token 200 65
) ) 200 66
& & 200 73
write_regs_valid_i token 200 92
[ [ 200 93
i token 200 94
] ] 200 95
; ; 200 96
assign assign 201 11
write_deps_inflight token 201 31
[ [ 201 32
i token 201 33
] ] 201 34
= = 201 36
( ( 201 38
write_regs_i token 201 50
[ [ 201 51
i token 201 52
] ] 201 53
== eq_eq 201 56
addr_inflight token 201 70
) ) 201 71
& & 201 73
write_regs_valid_i token 201 92
[ [ 201 93
i token 201 94
] ] 201 95
; ; 201 96
assign assign 202 11
write_deps_waiting token 202 30
[ [ 202 31
i token 202 32
] ] 202 33
= = 202 36
( ( 202 38
write_regs_i token 202 50
[ [ 202 51
i token 202 52
] ] 202 53
== eq_eq 202 56
addr_waiting token 202 69
) ) 202 70
& & 202 73
write_regs_valid_i token 202 92
[ [ 202 93
i token 202 94
] ] 202 95
; ; 202 96
end end 203 6
endgenerate endgenerate 204 12
assign assign 207 7
read_dep_req token 207 20
= = 207 28
| | 207 30
read_deps_req token 207 43
& & 207 51
valid_req token 207 61
& & 207 68
! ! 207 70
returned_req token 207 82
; ; 207 83
assign assign 208 7
read_dep_inflight token 208 25
= = 208 28
| | 208 30
read_deps_inflight token 208 48
& & 208 51
valid_inflight token 208 66
& & 208 68
! ! 208 70
returned_inflight token 208 87
; ; 208 88
assign assign 209 7
read_dep_waiting token 209 24
= = 209 28
| | 209 30
read_deps_waiting token 209 47
& & 209 51
valid_waiting token 209 65
& & 209 68
! ! 209 70
returned_waiting token 209 86
; ; 209 87
assign assign 210 7
write_dep_req token 210 21
= = 210 28
| | 210 30
write_deps_req token 210 44
& & 210 51
valid_req token 210 61
& & 210 68
! ! 210 70
returned_req token 210 82
; ; 210 83
assign assign 211 7
write_dep_inflight token 211 26
= = 211 28
| | 211 30
write_deps_inflight token 211 49
& & 211 51
valid_inflight token 211 66
& & 211 68
! ! 211 70
returned_inflight token 211 87
; ; 211 88
assign assign 212 7
write_dep_waiting token 212 25
= = 212 28
| | 212 30
write_deps_waiting token 212 48
& & 212 51
valid_waiting token 212 65
& & 212 68
! ! 212 70
returned_waiting token 212 86
; ; 212 87
assign assign 214 7
read_dep_o token 214 18
= = 214 28
read_dep_req token 214 41
| | 214 44
read_dep_inflight token 214 62
| | 214 65
read_dep_waiting token 214 82
; ; 214 83
assign assign 215 7
write_dep_o token 215 19
= = 215 28
write_dep_req token 215 42
| | 215 44
write_dep_inflight token 215 63
| | 215 65
write_dep_waiting token 215 83
; ; 215 84
assign assign 221 7
stall_full token 221 18
= = 221 25
valid_inflight token 221 40
& & 221 42
valid_waiting token 221 56
; ; 221 57
assign assign 225 7
stall_type token 225 18
= = 225 25
enable_i token 225 34
& & 225 37
active token 225 44
& & 225 46
( ( 225 48
( ( 225 49
apu_lat_i token 225 58
== eq_eq 225 60
2'h1 hex 225 61
) ) 225 65
| | 225 67
( ( 225 69
( ( 225 70
apu_lat_i token 225 79
== eq_eq 225 81
2'h2 hex 225 82
) ) 225 86
& & 225 88
( ( 225 90
apu_lat token 225 97
== eq_eq 225 99
2'h3 hex 225 100
) ) 225 104
) ) 225 105
| | 225 107
( ( 225 109
apu_lat_i token 225 118
== eq_eq 225 120
2'h3 hex 225 121
) ) 225 125
) ) 225 126
; ; 225 127
assign assign 226 7
stall_nack token 226 18
= = 226 25
valid_req token 226 35
& & 226 37
! ! 226 39
apu_master_gnt_i token 226 55
; ; 226 56
assign assign 227 7
stall_o token 227 15
= = 227 25
stall_full token 227 36
| | 227 38
stall_type token 227 49
| | 227 51
stall_nack token 227 62
; ; 227 63
assign assign 232 7
apu_master_req_o token 232 24
= = 232 31
valid_req token 232 41
; ; 232 42
assign assign 237 7
apu_master_ready_o token 237 26
= = 237 32
1'b1 bin 237 34
; ; 237 38
always_comb always_comb 240 12
begin begin 240 18
apu_waddr_o token 241 14
= = 241 16
'0 udig 241 19
; ; 241 20
if if 242 5
( ( 242 6
returned_req token 242 18
) ) 242 19
apu_waddr_o token 243 16
= = 243 18
addr_req token 243 27
; ; 243 28
if if 244 5
( ( 244 6
returned_inflight token 244 23
) ) 244 24
apu_waddr_o token 245 16
= = 245 18
addr_inflight token 245 32
; ; 245 33
if if 246 5
( ( 246 6
returned_waiting token 246 22
) ) 246 23
apu_waddr_o token 247 16
= = 247 18
addr_waiting token 247 31
; ; 247 32
end end 248 4
assign assign 251 7
active_o token 251 16
= = 251 18
active token 251 25
; ; 251 26
assign assign 254 7
perf_type_o token 254 19
= = 254 21
stall_type token 254 32
; ; 254 33
assign assign 255 7
perf_cont_o token 255 19
= = 255 21
stall_nack token 255 32
; ; 255 33
assign assign 257 7
apu_multicycle_o token 257 24
= = 257 27
( ( 257 30
apu_lat token 257 37
== eq_eq 257 40
2'h3 hex 257 42
) ) 257 46
; ; 257 47
assign assign 258 7
apu_singlecycle_o token 258 25
= = 258 27
~ ~ 258 29
( ( 258 30
valid_inflight token 258 44
| | 258 46
valid_waiting token 258 60
) ) 258 61
; ; 258 62
endmodule endmodule 265 8
