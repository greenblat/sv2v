module riscv_alu_div
    parameter C_WIDTH 32
    parameter C_LOG_WIDTH 6
    net CompInv_SN ('wire', 0)
    net ABComp_S ('wire', 0)
    net OutRdy_SI ('input', 0)
    net State_SP ('reg', (1, 0))
    net Rst_RBI ('input', 0)
    net OpCode_SI ('input', (1, 0))
    net OpBIsZero_SI ('input', 0)
    net ResReg_DP_rev ('wire', (['-', 'C_WIDTH', 1], 0))
    net CntZero_S ('wire', 0)
    net CompInv_SP ('reg', 0)
    net PmSel_S ('wire', 0)
    net Clk_CI ('input', 0)
    net AddOut_D ('wire', (['-', 'C_WIDTH', 1], 0))
    net OpB_DI ('input', (['-', 'C_WIDTH', 1], 0))
    net OutMux_D ('wire', (['-', 'C_WIDTH', 1], 0))
    net BReg_DP ('reg', (['-', 'C_WIDTH', 1], 0))
    net RemSel_SN ('wire', 0)
    net AReg_DP ('reg', (['-', 'C_WIDTH', 1], 0))
    net AReg_DN ('wire', (['-', 'C_WIDTH', 1], 0))
    net BReg_DN ('wire', (['-', 'C_WIDTH', 1], 0))
    net RemSel_SP ('reg', 0)
    net BMux_D ('wire', (['-', 'C_WIDTH', 1], 0))
    net OutVld_SO ('output reg', 0)
    net ResReg_DP ('reg', (['-', 'C_WIDTH', 1], 0))
    net ResReg_DN ('wire', (['-', 'C_WIDTH', 1], 0))
    net BRegEn_S ('reg', 0)
    net InVld_SI ('input', 0)
    net ARegEn_S ('reg', 0)
    net Res_DO ('output', (['-', 'C_WIDTH', 1], 0))
    net ResInv_SN ('wire', 0)
    net LoadEn_S ('reg', 0)
    net Cnt_DP ('reg', (['-', 'C_LOG_WIDTH', 1], 0))
    net OpBSign_SI ('input', 0)
    net AddMux_D ('wire', (['-', 'C_WIDTH', 1], 0))
    net ResInv_SP ('reg', 0)
    net OpBShift_DI ('input', (['-', 'C_LOG_WIDTH', 1], 0))
    net State_SN ('reg', (1, 0))
    net OpA_DI ('input', (['-', 'C_WIDTH', 1], 0))
    net AddTmp_D ('wire', (['-', 'C_WIDTH', 1], 0))
    net Cnt_DN ('wire', (['-', 'C_LOG_WIDTH', 1], 0))
    net ResRegEn_S ('reg', 0)
    assign ('PmSel_S', ['&', 'LoadEn_S', ['~', ['&', ['subbit', 'OpCode_SI', 0], ['^', ['subbit', 'OpA_DI', ['-', 'C_WIDTH', 1]], 'OpBSign_SI']]]], '', '')
    assign ('AddMux_D', ['question', 'LoadEn_S', 'OpA_DI', 'BReg_DP'], '', '')
    assign ('BMux_D', ['question', 'LoadEn_S', 'OpB_DI', ['curly', 'CompInv_SP', ['subbus', 'BReg_DP', [['-', 'C_WIDTH', 1], 1]]]], '', '')
    assign ('OutMux_D', ['question', 'RemSel_SP', 'AReg_DP', 'ResReg_DP_rev'], '', '')
    assign ('Res_DO', ['question', 'ResInv_SP', ['-', ['functioncall', '$signed', ['OutMux_D']]], 'OutMux_D'], '', '')
    assign ('ABComp_S', ['&', ['|', ['==', 'AReg_DP', 'BReg_DP'], ['^', ['>', 'AReg_DP', 'BReg_DP'], 'CompInv_SP']], ['|', ['|', 'AReg_DP'], 'OpBIsZero_SI']], '', '')
    assign ('AddTmp_D', ['question', 'LoadEn_S', 0, 'AReg_DP'], '', '')
    assign ('AddOut_D', ['question', 'PmSel_S', ['+', 'AddTmp_D', 'AddMux_D'], ['-', 'AddTmp_D', ['functioncall', '$signed', ['AddMux_D']]]], '', '')
    assign ('Cnt_DN', ['question', 'LoadEn_S', 'OpBShift_DI', ['question', ['~', 'CntZero_S'], ['-', 'Cnt_DP', 1], 'Cnt_DP']], '', '')
    assign ('CntZero_S', ['~', ['|', 'Cnt_DP']], '', '')
    assign ('RemSel_SN', ['question', 'LoadEn_S', ['subbit', 'OpCode_SI', 1], 'RemSel_SP'], '', '')
    assign ('CompInv_SN', ['question', 'LoadEn_S', 'OpBSign_SI', 'CompInv_SP'], '', '')
    assign ('ResInv_SN', ['question', 'LoadEn_S', ['&', ['&', ['|', ['~', 'OpBIsZero_SI'], ['subbit', 'OpCode_SI', 1]], ['subbit', 'OpCode_SI', 0]], ['^', ['subbit', 'OpA_DI', ['-', 'C_WIDTH', 1]], 'OpBSign_SI']], 'ResInv_SP'], '', '')
    assign ('AReg_DN', ['question', 'ARegEn_S', 'AddOut_D', 'AReg_DP'], '', '')
    assign ('BReg_DN', ['question', 'BRegEn_S', 'BMux_D', 'BReg_DP'], '', '')
    assign ('ResReg_DN', ['question', 'LoadEn_S', ['dig', 32, '0'], ['question', 'ResRegEn_S', ['curly', 'ABComp_S', ['subbus', 'ResReg_DP', [['-', 'C_WIDTH', 1], 1]]], 'ResReg_DP']], '', '')
    always ['*', ['named_begin', 'p_fsm', ['list', ['=', 'State_SN', 'State_SP'], ['=', 'OutVld_SO', ['bin', '1', '0']], ['=', 'LoadEn_S', ['bin', '1', '0']], ['=', 'ARegEn_S', ['bin', '1', '0']], ['=', 'BRegEn_S', ['bin', '1', '0']], ['=', 'ResRegEn_S', ['bin', '1', '0']], ['case', 'State_SP', [[['IDLE'], ['list', ['=', 'OutVld_SO', ['bin', '1', '1']], ['if', 'InVld_SI', ['list', ['=', 'OutVld_SO', ['bin', '1', '0']], ['=', 'ARegEn_S', ['bin', '1', '1']], ['=', 'BRegEn_S', ['bin', '1', '1']], ['=', 'LoadEn_S', ['bin', '1', '1']], ['=', 'State_SN', 'DIVIDE']]]]], [['DIVIDE'], ['list', ['=', 'ARegEn_S', 'ABComp_S'], ['=', 'BRegEn_S', ['bin', '1', '1']], ['=', 'ResRegEn_S', ['bin', '1', '1']], ['if', 'CntZero_S', ['list', ['=', 'State_SN', 'FINISH']]]]], [['FINISH'], ['list', ['=', 'OutVld_SO', ['bin', '1', '1']], ['if', 'OutRdy_SI', ['list', ['=', 'State_SN', 'IDLE']]]]], ['default', ['empty_begin_end']]]]]], 'always']
    always [['list', ['edge', 'posedge', 'Clk_CI'], ['edge', 'negedge', 'Rst_RBI']], ['named_begin', 'p_regs', ['list', ['ifelse', ['~', 'Rst_RBI'], ['list', ['<=', 'State_SP', 'IDLE'], ['<=', 'AReg_DP', ['dig', 32, '0']], ['<=', 'BReg_DP', ['dig', 32, '0']], ['<=', 'ResReg_DP', ['dig', 32, '0']], ['<=', 'Cnt_DP', ['dig', 32, '0']], ['<=', 'RemSel_SP', ['bin', '1', '0']], ['<=', 'CompInv_SP', ['bin', '1', '0']], ['<=', 'ResInv_SP', ['bin', '1', '0']]], ['list', ['<=', 'State_SP', 'State_SN'], ['<=', 'AReg_DP', 'AReg_DN'], ['<=', 'BReg_DP', 'BReg_DN'], ['<=', 'ResReg_DP', 'ResReg_DN'], ['<=', 'Cnt_DP', 'Cnt_DN'], ['<=', 'RemSel_SP', 'RemSel_SN'], ['<=', 'CompInv_SP', 'CompInv_SN'], ['<=', 'ResInv_SP', 'ResInv_SN']]]]], 'always']
    generate ['for', ['list', ['=', 'index', 0]], ['<', 'index', 'C_WIDTH'], ['list', ['=', 'index', ['+', 'index', 1]]], ['named_begin', 'bit_swapping', ['list', ['assigns', ['=', ['subbit', 'ResReg_DP_rev', 'index'], ['subbit', 'ResReg_DP', ['-', ['-', 'C_WIDTH', 1], 'index']]]]]]]
endmodule
