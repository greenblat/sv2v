module riscv_load_store_unit
    net data_req_o ('output reg', 0)
    net data_be_o ('output', (3, 0))
    net rdata_h_ext ('reg', (31, 0))
    net data_be ('reg', (3, 0))
    net data_wdata_ex_i ('input', (31, 0))
    net wdata_offset ('wire', (1, 0))
    net data_wdata ('reg', (31, 0))
    net data_type_ex_i ('input', (1, 0))
    net addr_useincr_ex_i ('input', 0)
    net operand_b_ex_i ('input', (31, 0))
    net data_wdata_o ('output', (31, 0))
    net data_err_i ('input', 0)
    net rdata_offset_q ('reg', (1, 0))
    net rdata_b_ext ('reg', (31, 0))
    net clk ('input', 0)
    net data_we_q ('reg', 0)
    net data_rdata_i ('input', (31, 0))
    net data_type_q ('reg', (1, 0))
    net store_err_o ('output', 0)
    net rdata_w_ext ('reg', (31, 0))
    net data_we_o ('output', 0)
    net NS ('reg', (1, 0))
    net data_we_ex_i ('input', 0)
    net data_rvalid_i ('input', 0)
    net rst_n ('input', 0)
    net misaligned_st ('wire', 0)
    net data_addr_o ('output', (31, 0))
    net data_reg_offset_ex_i ('input', (1, 0))
    net operand_a_ex_i ('input', (31, 0))
    net rdata_q ('reg', (31, 0))
    net data_sign_ext_ex_i ('input', 0)
    net lsu_ready_ex_o ('output reg', 0)
    net lsu_ready_wb_o ('output reg', 0)
    net busy_o ('output', 0)
    net CS ('reg', (1, 0))
    net data_misaligned_o ('output reg', 0)
    net data_rdata_ext ('reg', (31, 0))
    net data_sign_ext_q ('reg', 0)
    net data_req_ex_i ('input', 0)
    net data_gnt_i ('input', 0)
    net data_misaligned_ex_i ('input', 0)
    net data_addr_int ('wire', (31, 0))
    net load_err_o ('output', 0)
    net data_rdata_ex_o ('output', (31, 0))
    net ex_valid_i ('input', 0)
    assign ('wdata_offset', ['-', ['subbus', 'data_addr_int', [1, 0]], ['subbus', 'data_reg_offset_ex_i', [1, 0]]], '', '')
    assign ('data_rdata_ex_o', ['question', 'data_rvalid_i', 'data_rdata_ext', 'rdata_q'], '', '')
    assign ('data_addr_o', 'data_addr_int', '', '')
    assign ('data_wdata_o', 'data_wdata', '', '')
    assign ('data_we_o', 'data_we_ex_i', '', '')
    assign ('data_be_o', 'data_be', '', '')
    assign ('misaligned_st', 'data_misaligned_ex_i', '', '')
    assign ('load_err_o', ['&&', ['&&', 'data_gnt_i', 'data_err_i'], ['~', 'data_we_o']], '', '')
    assign ('store_err_o', ['&&', ['&&', 'data_gnt_i', 'data_err_i'], 'data_we_o'], '', '')
    assign ('data_addr_int', ['question', 'addr_useincr_ex_i', ['+', 'operand_a_ex_i', 'operand_b_ex_i'], 'operand_a_ex_i'], '', '')
    assign ('busy_o', ['||', ['||', ['||', ['==', 'CS', 'WAIT_RVALID'], ['==', 'CS', 'WAIT_RVALID_EX_STALL']], ['==', 'CS', 'IDLE_EX_STALL']], 'data_req_o'], '', '')
    always ['*', ['list', ['case', 'data_type_ex_i', [[[['bin', '2', '00']], ['list', ['ifelse', ['~', 'misaligned_st'], ['list', ['case', ['subbus', 'data_addr_int', (1, 0)], [[[['bin', '2', '00']], ['=', 'data_be', ['bin', '4', '1111']]], [[['bin', '2', '01']], ['=', 'data_be', ['bin', '4', '1110']]], [[['bin', '2', '10']], ['=', 'data_be', ['bin', '4', '1100']]], [[['bin', '2', '11']], ['=', 'data_be', ['bin', '4', '1000']]]]]], ['list', ['case', ['subbus', 'data_addr_int', (1, 0)], [[[['bin', '2', '00']], ['=', 'data_be', ['bin', '4', '0000']]], [[['bin', '2', '01']], ['=', 'data_be', ['bin', '4', '0001']]], [[['bin', '2', '10']], ['=', 'data_be', ['bin', '4', '0011']]], [[['bin', '2', '11']], ['=', 'data_be', ['bin', '4', '0111']]]]]]]]], [[['bin', '2', '01']], ['list', ['ifelse', ['~', 'misaligned_st'], ['list', ['case', ['subbus', 'data_addr_int', (1, 0)], [[[['bin', '2', '00']], ['=', 'data_be', ['bin', '4', '0011']]], [[['bin', '2', '01']], ['=', 'data_be', ['bin', '4', '0110']]], [[['bin', '2', '10']], ['=', 'data_be', ['bin', '4', '1100']]], [[['bin', '2', '11']], ['=', 'data_be', ['bin', '4', '1000']]]]]], ['list', ['=', 'data_be', ['bin', '4', '0001']]]]]], [[['bin', '2', '10'], ['bin', '2', '11']], ['list', ['case', ['subbus', 'data_addr_int', (1, 0)], [[[['bin', '2', '00']], ['=', 'data_be', ['bin', '4', '0001']]], [[['bin', '2', '01']], ['=', 'data_be', ['bin', '4', '0010']]], [[['bin', '2', '10']], ['=', 'data_be', ['bin', '4', '0100']]], [[['bin', '2', '11']], ['=', 'data_be', ['bin', '4', '1000']]]]]]]]]], 'always']
    always ['*', ['list', ['case', 'wdata_offset', [[[['bin', '2', '00']], ['=', 'data_wdata', ['subbus', 'data_wdata_ex_i', [31, 0]]]], [[['bin', '2', '01']], ['=', 'data_wdata', ['curly', ['subbus', 'data_wdata_ex_i', [23, 0]], ['subbus', 'data_wdata_ex_i', [31, 24]]]]], [[['bin', '2', '10']], ['=', 'data_wdata', ['curly', ['subbus', 'data_wdata_ex_i', [15, 0]], ['subbus', 'data_wdata_ex_i', [31, 16]]]]], [[['bin', '2', '11']], ['=', 'data_wdata', ['curly', ['subbus', 'data_wdata_ex_i', [7, 0]], ['subbus', 'data_wdata_ex_i', [31, 8]]]]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'data_type_q', ['dig', 32, '0']], ['<=', 'rdata_offset_q', ['dig', 32, '0']], ['<=', 'data_sign_ext_q', ['dig', 32, '0']], ['<=', 'data_we_q', ['bin', '1', '0']]], ['if', 'data_gnt_i', ['list', ['<=', 'data_type_q', 'data_type_ex_i'], ['<=', 'rdata_offset_q', ['subbus', 'data_addr_int', [1, 0]]], ['<=', 'data_sign_ext_q', 'data_sign_ext_ex_i'], ['<=', 'data_we_q', 'data_we_ex_i']]]]], 'always']
    always ['*', ['list', ['case', 'rdata_offset_q', [[[['bin', '2', '00']], ['=', 'rdata_w_ext', ['subbus', 'data_rdata_i', [31, 0]]]], [[['bin', '2', '01']], ['=', 'rdata_w_ext', ['curly', ['subbus', 'data_rdata_i', [7, 0]], ['subbus', 'rdata_q', [31, 8]]]]], [[['bin', '2', '10']], ['=', 'rdata_w_ext', ['curly', ['subbus', 'data_rdata_i', [15, 0]], ['subbus', 'rdata_q', [31, 16]]]]], [[['bin', '2', '11']], ['=', 'rdata_w_ext', ['curly', ['subbus', 'data_rdata_i', [23, 0]], ['subbus', 'rdata_q', [31, 24]]]]]]]], 'always']
    always ['*', ['list', ['case', 'rdata_offset_q', [[[['bin', '2', '00']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_h_ext', ['curly', ['hex', '16', '0000'], ['subbus', 'data_rdata_i', [15, 0]]]], ['=', 'rdata_h_ext', ['curly', ['curly', 'repeat', 16, ['curly', ['subbit', 'data_rdata_i', 15]]], ['subbus', 'data_rdata_i', [15, 0]]]]]]], [[['bin', '2', '01']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_h_ext', ['curly', ['hex', '16', '0000'], ['subbus', 'data_rdata_i', [23, 8]]]], ['=', 'rdata_h_ext', ['curly', ['curly', 'repeat', 16, ['curly', ['subbit', 'data_rdata_i', 23]]], ['subbus', 'data_rdata_i', [23, 8]]]]]]], [[['bin', '2', '10']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_h_ext', ['curly', ['hex', '16', '0000'], ['subbus', 'data_rdata_i', [31, 16]]]], ['=', 'rdata_h_ext', ['curly', ['curly', 'repeat', 16, ['curly', ['subbit', 'data_rdata_i', 31]]], ['subbus', 'data_rdata_i', [31, 16]]]]]]], [[['bin', '2', '11']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_h_ext', ['curly', ['hex', '16', '0000'], ['subbus', 'data_rdata_i', [7, 0]], ['subbus', 'rdata_q', [31, 24]]]], ['=', 'rdata_h_ext', ['curly', ['curly', 'repeat', 16, ['curly', ['subbit', 'data_rdata_i', 7]]], ['subbus', 'data_rdata_i', [7, 0]], ['subbus', 'rdata_q', [31, 24]]]]]]]]]], 'always']
    always ['*', ['list', ['case', 'rdata_offset_q', [[[['bin', '2', '00']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_b_ext', ['curly', ['hex', '24', '00_0000'], ['subbus', 'data_rdata_i', [7, 0]]]], ['=', 'rdata_b_ext', ['curly', ['curly', 'repeat', 24, ['curly', ['subbit', 'data_rdata_i', 7]]], ['subbus', 'data_rdata_i', [7, 0]]]]]]], [[['bin', '2', '01']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_b_ext', ['curly', ['hex', '24', '00_0000'], ['subbus', 'data_rdata_i', [15, 8]]]], ['=', 'rdata_b_ext', ['curly', ['curly', 'repeat', 24, ['curly', ['subbit', 'data_rdata_i', 15]]], ['subbus', 'data_rdata_i', [15, 8]]]]]]], [[['bin', '2', '10']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_b_ext', ['curly', ['hex', '24', '00_0000'], ['subbus', 'data_rdata_i', [23, 16]]]], ['=', 'rdata_b_ext', ['curly', ['curly', 'repeat', 24, ['curly', ['subbit', 'data_rdata_i', 23]]], ['subbus', 'data_rdata_i', [23, 16]]]]]]], [[['bin', '2', '11']], ['list', ['ifelse', ['~', 'data_sign_ext_q'], ['=', 'rdata_b_ext', ['curly', ['hex', '24', '00_0000'], ['subbus', 'data_rdata_i', [31, 24]]]], ['=', 'rdata_b_ext', ['curly', ['curly', 'repeat', 24, ['curly', ['subbit', 'data_rdata_i', 31]]], ['subbus', 'data_rdata_i', [31, 24]]]]]]]]]], 'always']
    always ['*', ['list', ['case', 'data_type_q', [[[['bin', '2', '00']], ['=', 'data_rdata_ext', 'rdata_w_ext']], [[['bin', '2', '01']], ['=', 'data_rdata_ext', 'rdata_h_ext']], [[['bin', '2', '10'], ['bin', '2', '11']], ['=', 'data_rdata_ext', 'rdata_b_ext']]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'CS', 'IDLE'], ['<=', 'rdata_q', ['dig', 32, '0']]], ['list', ['<=', 'CS', 'NS'], ['if', ['&&', 'data_rvalid_i', ['~', 'data_we_q']], ['list', ['ifelse', ['||', 'data_misaligned_ex_i', 'data_misaligned_o'], ['<=', 'rdata_q', 'data_rdata_i'], ['<=', 'rdata_q', 'data_rdata_ext']]]]]]], 'always']
    always ['*', ['list', ['=', 'NS', 'CS'], ['=', 'data_req_o', ['bin', '1', '0']], ['=', 'lsu_ready_ex_o', ['bin', '1', '1']], ['=', 'lsu_ready_wb_o', ['bin', '1', '1']], ['case', 'CS', [[['IDLE'], ['list', ['=', 'data_req_o', 'data_req_ex_i'], ['if', 'data_req_ex_i', ['list', ['=', 'lsu_ready_ex_o', ['bin', '1', '0']], ['if', 'data_gnt_i', ['list', ['=', 'lsu_ready_ex_o', ['bin', '1', '1']], ['ifelse', 'ex_valid_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_RVALID_EX_STALL']]]]]]]], [['WAIT_RVALID'], ['list', ['=', 'lsu_ready_wb_o', ['bin', '1', '0']], ['if', 'data_rvalid_i', ['list', ['=', 'lsu_ready_wb_o', ['bin', '1', '1']], ['=', 'data_req_o', 'data_req_ex_i'], ['ifelse', 'data_req_ex_i', ['list', ['=', 'lsu_ready_ex_o', ['bin', '1', '0']], ['ifelse', 'data_gnt_i', ['list', ['=', 'lsu_ready_ex_o', ['bin', '1', '1']], ['ifelse', 'ex_valid_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_RVALID_EX_STALL']]], ['list', ['=', 'NS', 'IDLE']]]], ['list', ['if', 'data_rvalid_i', ['list', ['=', 'NS', 'IDLE']]]]]]]]], [['WAIT_RVALID_EX_STALL'], ['list', ['=', 'data_req_o', ['bin', '1', '0']], ['ifelse', 'data_rvalid_i', ['list', ['ifelse', 'ex_valid_i', ['list', ['=', 'NS', 'IDLE']], ['list', ['=', 'NS', 'IDLE_EX_STALL']]]], ['list', ['if', 'ex_valid_i', ['=', 'NS', 'WAIT_RVALID']]]]]], [['IDLE_EX_STALL'], ['list', ['if', 'ex_valid_i', ['list', ['=', 'NS', 'IDLE']]]]], ['default', ['list', ['=', 'NS', 'IDLE']]]]]], 'always']
    always ['*', ['list', ['=', 'data_misaligned_o', ['bin', '1', '0']], ['if', ['&&', 'data_req_ex_i', ['~', 'data_misaligned_ex_i']], ['list', ['case', 'data_type_ex_i', [[[['bin', '2', '00']], ['list', ['if', ['!=', ['subbus', 'data_addr_int', [1, 0]], ['bin', '2', '00']], ['=', 'data_misaligned_o', ['bin', '1', '1']]]]], [[['bin', '2', '01']], ['list', ['if', ['==', ['subbus', 'data_addr_int', [1, 0]], ['bin', '2', '11']], ['=', 'data_misaligned_o', ['bin', '1', '1']]]]]]]]]], 'always']
endmodule
