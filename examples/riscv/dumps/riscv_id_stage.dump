module riscv_id_stage
    parameter WAPUTYPE 0
    parameter N_HWLP_BITS ['functioncall', '$clog2', ['N_HWLP']]
    parameter SHARED_FP_DIVSQRT 0
    parameter APU_NARGS_CPU 3
    parameter APU_WOP_CPU 6
    parameter SHARED_INT_DIV 0
    parameter APU 0
    parameter FPU 0
    parameter APU_NDSFLAGS_CPU 15
    parameter APU_NUSFLAGS_CPU 5
    parameter PULP_SECURE 0
    parameter N_HWLP 2
    parameter SHARED_FP 0
    parameter SHARED_DSP_MULT 0
    net data_sign_ext_id ('wire', 0)
    net apu_waddr ('wire', (5, 0))
    net hwloop_start_mux_sel ('wire', 0)
    net csr_hwlp_we_i ('input', (2, 0))
    net apu_perf_dep_o ('output', 0)
    net alu_op_a_mux_sel ('wire', (2, 0))
    net jump_target_o ('output', (31, 0))
    net apu_read_regs ('reg', ('packed', (2, 0), (5, 0)))
    net regfile_data_rb_id ('wire', (31, 0))
    net perf_jr_stall_o ('output', 0)
    net reg_d_wb_is_reg_c_id ('wire', 0)
    net branch_decision_i ('input', 0)
    net instr_multicycle ('wire', 0)
    net csr_hwlp_data_i ('input', (31, 0))
    net regb_used_dec ('wire', 0)
    net apu_type_ex_o ('output reg', (['-', 'WAPUTYPE', 1], 0))
    net apu_lat_ex_o ('output reg', (1, 0))
    net branch_in_ex_o ('output reg', 0)
    net mult_dot_op_c_ex_o ('output reg', (31, 0))
    net irq_ack_o ('output', 0)
    net imm_shuffleb_type ('wire', (31, 0))
    net regfile_we_ex_o ('output reg', 0)
    net exc_kill ('wire', 0)
    net clk ('input', 0)
    net mult_dot_op_a_ex_o ('output reg', (31, 0))
    net is_hwlp_i ('input', 0)
    net apu_op_ex_o ('output reg', (['-', 'APU_WOP_CPU', 1], 0))
    net jump_in_id ('wire', (1, 0))
    net apu_operands ('wire', ['packed', (31, 0), (['-', 'APU_NARGS_CPU', 1], 0)])
    net apu_flags_src ('wire', (['-', 'WAPUTYPE', 1], 0))
    net mult_operand_c_ex_o ('output reg', (31, 0))
    net data_req_id ('wire', 0)
    net alu_en_ex_o ('output reg', 0)
    net regfile_alu_we_id ('wire', 0)
    net regc_used_dec ('wire', 0)
    net operand_b_fw_mux_sel ('wire', (1, 0))
    net apu_write_dep_i ('input', 0)
    net regfile_we_id ('wire', 0)
    net pc_set_o ('output', 0)
    net dbg_reg_waddr_i ('input', (5, 0))
    net apu_operands_ex_o ('output reg', ['packed', (31, 0), (['-', 'APU_NARGS_CPU', 1], 0)])
    net uret_insn_dec ('wire', 0)
    net operand_a_fw_id ('reg', (31, 0))
    net lsu_load_err_i ('input', 0)
    net reg_d_wb_is_reg_b_id ('wire', 0)
    net imm_u_type ('wire', (31, 0))
    net clear_instr_valid_o ('output', 0)
    net dbg_stall_i ('input', 0)
    net apu_read_dep_i ('input', 0)
    net regfile_fp_d ('wire', 0)
    net apu_lat ('wire', (1, 0))
    net hwloop_we ('wire', (2, 0))
    net imm_bi_type ('wire', (31, 0))
    net hwloop_start ('wire', (31, 0))
    net mult_dot_signed_ex_o ('output reg', (1, 0))
    net regfile_fp_b ('wire', 0)
    net regfile_fp_c ('wire', 0)
    net data_misaligned_i ('input', 0)
    net apu_type ('wire', (['-', 'WAPUTYPE', 1], 0))
    net hwlp_start_o ('output', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net exc_ack ('wire', 0)
    net id_valid_o ('output', 0)
    net reg_d_ex_is_reg_c_id ('wire', 0)
    net mult_multicycle_i ('input', 0)
    net data_req_ex_o ('output reg', 0)
    net perf_jump_o ('output', 0)
    net imm_uj_type ('wire', (31, 0))
    net bmask_b_id_imm ('reg', (4, 0))
    net regfile_addr_ra_id ('wire', (5, 0))
    net alu_operator ('wire', (['-', 'ALU_OP_WIDTH', 1], 0))
    net ex_ready_i ('input', 0)
    net data_load_event_id ('wire', 0)
    net csr_irq_sec_o ('output', 0)
    net apu_stall ('wire', 0)
    net csr_restore_uret_id_o ('output', 0)
    net hwloop_cnt_mux_sel ('wire', 0)
    net irq_sec_i ('input', 0)
    net u_irq_enable_i ('input', 0)
    net mult_sel_subword ('wire', 0)
    net apu_read_regs_valid_o ('output', (2, 0))
    net dbg_req_i ('input', 0)
    net data_type_id ('wire', (1, 0))
    net imm_z_type ('wire', (31, 0))
    net deassert_we ('wire', 0)
    net reg_d_alu_is_reg_c_id ('wire', 0)
    net mult_dot_signed ('wire', (1, 0))
    net regfile_alu_we_ex_o ('output reg', 0)
    net pc_if_i ('input', (31, 0))
    net operand_c_fw_id ('reg', (31, 0))
    net halt_if_o ('output', 0)
    net dbg_ack_o ('output', 0)
    net csr_restore_mret_id_o ('output', 0)
    net id_ready_o ('output', 0)
    net apu_waddr_ex_o ('output reg', (5, 0))
    net alu_vec_mode_ex_o ('output reg', (1, 0))
    net imm_vu_type ('wire', (31, 0))
    net jump_in_dec ('wire', (1, 0))
    net mult_en_ex_o ('output reg', 0)
    net csr_access ('wire', 0)
    net csr_op ('wire', (1, 0))
    net irq_id_ctrl ('wire', (4, 0))
    net csr_save_cause_o ('output', 0)
    net exc_pc_mux_o ('output', (1, 0))
    net bmask_a_id ('reg', (4, 0))
    net fpu_op ('wire', (['-', 'C_CMD', 1], 0))
    net regfile_waddr_wb_i ('input', (5, 0))
    net bmask_b_id ('reg', (4, 0))
    net mult_sel_subword_ex_o ('output reg', 0)
    net alu_operand_b ('wire', (31, 0))
    net imm_clip_type ('wire', (31, 0))
    net hwloop_regid_int ('wire', (['-', 'N_HWLP_BITS', 1], 0))
    net instr_valid_i ('input', 0)
    net apu_busy_i ('input', 0)
    net instr_req_o ('output', 0)
    net irq_i ('input', 0)
    net prepost_useincr ('wire', 0)
    net imm_b ('reg', (31, 0))
    net imm_a ('reg', (31, 0))
    net illegal_insn_dec ('wire', 0)
    net rega_used_dec ('wire', 0)
    net hwloop_cnt ('wire', (31, 0))
    net regfile_alu_waddr_id ('wire', (5, 0))
    net regfile_alu_waddr_mux_sel ('wire', 0)
    net imm_s_type ('wire', (31, 0))
    net misaligned_stall ('wire', 0)
    net alu_op_c_mux_sel ('wire', (1, 0))
    net dbg_reg_rdata_o ('output', (31, 0))
    net hwloop_end ('wire', (31, 0))
    net mult_en ('wire', 0)
    net apu_op ('wire', (['-', 'APU_WOP_CPU', 1], 0))
    net mult_imm_id ('reg', (4, 0))
    net data_load_event_ex_o ('output reg', 0)
    net mult_imm_ex_o ('output reg', (4, 0))
    net load_stall ('wire', 0)
    net mult_operator_ex_o ('output reg', (2, 0))
    net mult_operand_a_ex_o ('output reg', (31, 0))
    net csr_status ('wire', 0)
    net mult_operator ('wire', (2, 0))
    net prepost_useincr_ex_o ('output reg', 0)
    net bmask_b_mux ('wire', (1, 0))
    net imm_shuffleh_type ('wire', (31, 0))
    net fetch_enable_i ('input', 0)
    net is_decoding_o ('output', 0)
    net operand_a_fw_mux_sel ('wire', (1, 0))
    net alu_vec_mode ('wire', (1, 0))
    net ebrk_insn ('wire', 0)
    net scalar_replication ('wire', 0)
    net mult_signed_mode ('wire', (1, 0))
    net reg_d_alu_is_reg_b_id ('wire', 0)
    net dbg_reg_wdata_i ('input', (31, 0))
    net data_type_ex_o ('output reg', (1, 0))
    net csr_op_ex_o ('output reg', (1, 0))
    net pc_mux_o ('output', (2, 0))
    net reg_d_alu_is_reg_a_id ('wire', 0)
    net data_we_id ('wire', 0)
    net mult_signed_mode_ex_o ('output reg', (1, 0))
    net apu_read_regs_o ('output', ('packed', (2, 0), (5, 0)))
    net operand_c_fw_mux_sel ('wire', (1, 0))
    net is_compressed_i ('input', 0)
    net imm_s3_type ('wire', (31, 0))
    net mult_imm_mux ('wire', (0, 0))
    net hwloop_regid ('wire', (['-', 'N_HWLP_BITS', 1], 0))
    net apu_flags_regs ('wire', (['-', 'APU_NDSFLAGS_CPU', 1], 0))
    net dbg_settings_i ('input', (['-', 'DBG_SETS_W', 1], 0))
    net data_we_ex_o ('output reg', 0)
    net mret_insn_dec ('wire', 0)
    net fp_rnd_mode ('wire', (2, 0))
    net rst_n ('input', 0)
    net regfile_we_wb_i ('input', 0)
    net data_reg_offset_ex_o ('output reg', (1, 0))
    net csr_cause_o ('output', (5, 0))
    net data_sign_ext_ex_o ('output reg', 0)
    net regfile_alu_waddr_ex_o ('output reg', (5, 0))
    net jump_target_mux_sel ('wire', (1, 0))
    net csr_access_ex_o ('output reg', 0)
    net mult_dot_op_b_ex_o ('output reg', (31, 0))
    net bmask_a_ex_o ('output reg', (4, 0))
    net apu_flags_ex_o ('output reg', (['-', 'APU_NDSFLAGS_CPU', 1], 0))
    net hwlp_end_o ('output', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net m_irq_enable_i ('input', 0)
    net regfile_addr_rb_id ('wire', (5, 0))
    net imm_vec_ext_ex_o ('output reg', (1, 0))
    net imm_s2_type ('wire', (31, 0))
    net bmask_a_mux ('wire', (0, 0))
    net apu_read_regs_valid ('reg', (2, 0))
    net pipe_flush_dec ('wire', 0)
    net illegal_c_insn_i ('input', 0)
    net fpu_op_ex_o ('output reg', (['-', 'C_CMD', 1], 0))
    net instr ('wire', (31, 0))
    net imm_sb_type ('wire', (31, 0))
    net alu_operand_c_ex_o ('output reg', (31, 0))
    net regfile_wdata_wb_i ('input', (31, 0))
    net irq_id_i ('input', (4, 0))
    net irq_id_o ('output', (4, 0))
    net irq_req_ctrl ('wire', 0)
    net regfile_data_rc_id ('wire', (31, 0))
    net operand_b ('reg', (31, 0))
    net jr_stall ('wire', 0)
    net regfile_alu_wdata_fw_i ('input', (31, 0))
    net data_reg_offset_id ('wire', (1, 0))
    net apu_flags ('wire', (['-', 'APU_NDSFLAGS_CPU', 1], 0))
    net core_ctrl_firstfetch_o ('output', 0)
    net operand_b_vec ('reg', (31, 0))
    net trap_addr_mux_o ('output', 0)
    net imm_shuffle_type ('reg', (31, 0))
    net irq_sec_ctrl ('wire', 0)
    net apu_write_regs_valid_o ('output', (1, 0))
    net imm_vec_ext_id ('wire', (1, 0))
    net apu_en_ex_o ('output reg', 0)
    net bmask_b_ex_o ('output reg', (4, 0))
    net alu_bmask_a_mux_sel ('wire', 0)
    net imm_b_mux_sel ('wire', (3, 0))
    net apu_en ('wire', 0)
    net hwloop_target_mux_sel ('wire', 0)
    net alu_op_b_mux_sel ('wire', (2, 0))
    net apu_write_regs ('wire', ('packed', (1, 0), (5, 0)))
    net bmask_a_id_imm ('reg', (4, 0))
    net jump_target ('reg', (31, 0))
    net regfile_addr_rc_id ('reg', (5, 0))
    net csr_save_id_o ('output', 0)
    net frm_i ('input', (['-', 'C_RM', 1], 0))
    net lsu_store_err_i ('input', 0)
    net hwlp_cnt_o ('output', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net reg_d_ex_is_reg_b_id ('wire', 0)
    net dbg_reg_rreq_i ('input', 0)
    net csr_apu_stall ('wire', 0)
    net hwlp_dec_cnt_i ('input', (['-', 'N_HWLP', 1], 0))
    net imm_a_mux_sel ('wire', (0, 0))
    net perf_ld_stall_o ('output', 0)
    net reg_d_wb_is_reg_a_id ('wire', 0)
    net hwloop_cnt_int ('reg', (31, 0))
    net alu_en ('wire', 0)
    net dbg_reg_raddr_i ('input', (5, 0))
    net dbg_trap_o ('output', 0)
    net dbg_jump_req_i ('input', 0)
    net hwloop_target ('reg', (31, 0))
    net mult_int_en ('wire', 0)
    net alu_operator_ex_o ('output reg', (['-', 'ALU_OP_WIDTH', 1], 0))
    net regfile_alu_waddr_fw_i ('input', (5, 0))
    net branch_taken_ex ('wire', 0)
    net regfile_data_ra_id ('wire', (31, 0))
    net dbg_reg_wreq_i ('input', 0)
    net exc_cause_o ('output', (5, 0))
    net regfile_alu_we_fw_i ('input', 0)
    net apu_write_regs_valid ('wire', (1, 0))
    net csr_save_if_o ('output', 0)
    net pc_id_i ('input', (31, 0))
    net alu_operand_a ('reg', (31, 0))
    net halt_id ('wire', 0)
    net regfile_waddr_ex_o ('output reg', (5, 0))
    net alu_operand_c ('reg', (31, 0))
    net alu_bmask_b_mux_sel ('wire', 0)
    net hwloop_start_int ('reg', (31, 0))
    net hwloop_we_int ('wire', (2, 0))
    net mult_operand_b_ex_o ('output reg', (31, 0))
    net imm_vs_type ('wire', (31, 0))
    net hwloop_valid ('wire', 0)
    net instr_rdata_i ('input', (31, 0))
    net imm_iz_type ('wire', (31, 0))
    net operand_b_fw_id ('reg', (31, 0))
    net csr_hwlp_regid_i ('input', (['-', 'N_HWLP_BITS', 1], 0))
    net wb_ready_i ('input', 0)
    net alu_operand_a_ex_o ('output reg', (31, 0))
    net alu_operand_b_ex_o ('output reg', (31, 0))
    net apu_write_regs_o ('output', ('packed', (1, 0), (5, 0)))
    net test_en_i ('input', 0)
    net ecall_insn_dec ('wire', 0)
    net imm_i_type ('wire', (31, 0))
    net pc_ex_o ('output reg', (31, 0))
    net data_misaligned_ex_o ('output reg', 0)
    net regfile_waddr_id ('wire', (5, 0))
    net regc_mux ('wire', (1, 0))
    net current_priv_lvl_i ('input', (1, 0))
    net mult_dot_en ('wire', 0)
    net ctrl_busy_o ('output', 0)
    net reg_d_ex_is_reg_a_id ('wire', 0)
    net ex_valid_i ('input', 0)
    net regfile_fp_a ('wire', 0)
    assign ('instr', 'instr_rdata_i', '', '')
    assign ('imm_i_type', ['curly', ['curly', 'repeat', 20, ['curly', ['subbit', 'instr', 31]]], ['subbus', 'instr', [31, 20]]], '', '')
    assign ('imm_iz_type', ['curly', ['bin', '20', '0'], ['subbus', 'instr', [31, 20]]], '', '')
    assign ('imm_s_type', ['curly', ['curly', 'repeat', 20, ['curly', ['subbit', 'instr', 31]]], ['subbus', 'instr', [31, 25]], ['subbus', 'instr', [11, 7]]], '', '')
    assign ('imm_sb_type', ['curly', ['curly', 'repeat', 19, ['curly', ['subbit', 'instr', 31]]], ['subbit', 'instr', 31], ['subbit', 'instr', 7], ['subbus', 'instr', [30, 25]], ['subbus', 'instr', [11, 8]], ['bin', '1', '0']], '', '')
    assign ('imm_u_type', ['curly', ['subbus', 'instr', [31, 12]], ['bin', '12', '0']], '', '')
    assign ('imm_uj_type', ['curly', ['curly', 'repeat', 12, ['curly', ['subbit', 'instr', 31]]], ['subbus', 'instr', [19, 12]], ['subbit', 'instr', 20], ['subbus', 'instr', [30, 21]], ['bin', '1', '0']], '', '')
    assign ('imm_z_type', ['curly', ['bin', '27', '0'], ['subbus', 'instr', [19, 15]]], '', '')
    assign ('imm_s2_type', ['curly', ['bin', '27', '0'], ['subbus', 'instr', [24, 20]]], '', '')
    assign ('imm_bi_type', ['curly', ['curly', 'repeat', 27, ['curly', ['subbit', 'instr', 24]]], ['subbus', 'instr', [24, 20]]], '', '')
    assign ('imm_s3_type', ['curly', ['bin', '27', '0'], ['subbus', 'instr', [29, 25]]], '', '')
    assign ('imm_vs_type', ['curly', ['curly', 'repeat', 26, ['curly', ['subbit', 'instr', 24]]], ['subbus', 'instr', [24, 20]], ['subbit', 'instr', 25]], '', '')
    assign ('imm_vu_type', ['curly', ['bin', '26', '0'], ['subbus', 'instr', [24, 20]], ['subbit', 'instr', 25]], '', '')
    assign ('imm_shuffleb_type', ['curly', ['bin', '6', '0'], ['subbus', 'instr', [28, 27]], ['bin', '6', '0'], ['subbus', 'instr', [24, 23]], ['bin', '6', '0'], ['subbus', 'instr', [22, 21]], ['bin', '6', '0'], ['subbit', 'instr', 20], ['subbit', 'instr', 25]], '', '')
    assign ('imm_shuffleh_type', ['curly', ['hex', '15', '0'], ['subbit', 'instr', 20], ['hex', '15', '0'], ['subbit', 'instr', 25]], '', '')
    assign ('imm_clip_type', ['-', ['<<', ['hex', '32', '1'], ['subbus', 'instr', [24, 20]]], 1], '', '')
    assign ('regfile_addr_ra_id', ['curly', 'regfile_fp_a', ['subbus', 'instr', [19, 15]]], '', '')
    assign ('regfile_addr_rb_id', ['curly', 'regfile_fp_b', ['subbus', 'instr', [24, 20]]], '', '')
    assign ('regfile_waddr_id', ['curly', 'regfile_fp_d', ['subbus', 'instr', [11, 7]]], '', '')
    assign ('regfile_alu_waddr_id', ['question', 'regfile_alu_waddr_mux_sel', 'regfile_waddr_id', 'regfile_addr_ra_id'], '', '')
    assign ('reg_d_ex_is_reg_a_id', ['&&', ['&&', ['==', 'regfile_waddr_ex_o', 'regfile_addr_ra_id'], 'rega_used_dec'], ['!=', 'regfile_addr_ra_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_ex_is_reg_b_id', ['&&', ['&&', ['==', 'regfile_waddr_ex_o', 'regfile_addr_rb_id'], 'regb_used_dec'], ['!=', 'regfile_addr_rb_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_ex_is_reg_c_id', ['&&', ['&&', ['==', 'regfile_waddr_ex_o', 'regfile_addr_rc_id'], 'regc_used_dec'], ['!=', 'regfile_addr_rc_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_wb_is_reg_a_id', ['&&', ['&&', ['==', 'regfile_waddr_wb_i', 'regfile_addr_ra_id'], 'rega_used_dec'], ['!=', 'regfile_addr_ra_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_wb_is_reg_b_id', ['&&', ['&&', ['==', 'regfile_waddr_wb_i', 'regfile_addr_rb_id'], 'regb_used_dec'], ['!=', 'regfile_addr_rb_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_wb_is_reg_c_id', ['&&', ['&&', ['==', 'regfile_waddr_wb_i', 'regfile_addr_rc_id'], 'regc_used_dec'], ['!=', 'regfile_addr_rc_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_alu_is_reg_a_id', ['&&', ['&&', ['==', 'regfile_alu_waddr_fw_i', 'regfile_addr_ra_id'], 'rega_used_dec'], ['!=', 'regfile_addr_ra_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_alu_is_reg_b_id', ['&&', ['&&', ['==', 'regfile_alu_waddr_fw_i', 'regfile_addr_rb_id'], 'regb_used_dec'], ['!=', 'regfile_addr_rb_id', ['dig', 32, '0']]], '', '')
    assign ('reg_d_alu_is_reg_c_id', ['&&', ['&&', ['==', 'regfile_alu_waddr_fw_i', 'regfile_addr_rc_id'], 'regc_used_dec'], ['!=', 'regfile_addr_rc_id', ['dig', 32, '0']]], '', '')
    assign ('clear_instr_valid_o', ['|', ['|', 'id_ready_o', 'halt_id'], 'branch_taken_ex'], '', '')
    assign ('branch_taken_ex', ['&', 'branch_in_ex_o', 'branch_decision_i'], '', '')
    assign ('mult_en', ['|', 'mult_int_en', 'mult_dot_en'], '', '')
    assign ('hwloop_regid_int', ['subbit', 'instr', 7], '', '')
    assign ('hwloop_start', ['question', ['subbit', 'hwloop_we_int', 0], 'hwloop_start_int', 'csr_hwlp_data_i'], '', '')
    assign ('hwloop_end', ['question', ['subbit', 'hwloop_we_int', 1], 'hwloop_target', 'csr_hwlp_data_i'], '', '')
    assign ('hwloop_cnt', ['question', ['subbit', 'hwloop_we_int', 2], 'hwloop_cnt_int', 'csr_hwlp_data_i'], '', '')
    assign ('hwloop_regid', ['question', ['|', 'hwloop_we_int'], 'hwloop_regid_int', 'csr_hwlp_regid_i'], '', '')
    assign ('hwloop_we', ['question', ['|', 'hwloop_we_int'], 'hwloop_we_int', 'csr_hwlp_we_i'], '', '')
    assign ('jump_target_o', 'jump_target', '', '')
    assign ('alu_operand_b', ['question', 'scalar_replication', 'operand_b_vec', 'operand_b'], '', '')
    assign ('imm_vec_ext_id', ['subbus', 'imm_vu_type', [1, 0]], '', '')
    assign ('apu_perf_dep_o', 'apu_stall', '', '')
    assign ('csr_apu_stall', ['&', 'csr_access', ['|', ['&', 'apu_en_ex_o', ['subbit', 'apu_lat_ex_o', 1]], 'apu_busy_i']], '', '')
    assign ('dbg_reg_rdata_o', 'regfile_data_rc_id', '', '')
    assign ('hwloop_valid', ['&', ['&', 'instr_valid_i', 'clear_instr_valid_o'], 'is_hwlp_i'], '', '')
    assign ('id_ready_o', ['&', ['&', ['&', ['&', ['&', ['~', 'misaligned_stall'], ['~', 'jr_stall']], ['~', 'load_stall']], ['~', 'apu_stall']], ['~', 'csr_apu_stall']], 'ex_ready_i'], '', '')
    assign ('id_valid_o', ['&', ['~', 'halt_id'], 'id_ready_o'], '', '')
    always ['*', ['list', ['case', 'regc_mux', [[['REGC_ZERO'], ['=', 'regfile_addr_rc_id', ['dig', 32, '0']]], [['REGC_RD'], ['=', 'regfile_addr_rc_id', ['curly', 'regfile_fp_c', ['subbus', 'instr', [11, 7]]]]], [['REGC_S1'], ['=', 'regfile_addr_rc_id', ['curly', 'regfile_fp_c', ['subbus', 'instr', [19, 15]]]]], [['REGC_S4'], ['=', 'regfile_addr_rc_id', ['curly', 'regfile_fp_c', ['subbus', 'instr', [31, 27]]]]], ['default', ['=', 'regfile_addr_rc_id', ['dig', 32, '0']]]]]], 'always']
    always ['*', ['list', ['case', 'hwloop_target_mux_sel', [[[['bin', '1', '0']], ['=', 'hwloop_target', ['+', 'pc_id_i', ['curly', ['subbus', 'imm_iz_type', [30, 0]], ['bin', '1', '0']]]]], [[['bin', '1', '1']], ['=', 'hwloop_target', ['+', 'pc_id_i', ['curly', ['subbus', 'imm_z_type', [30, 0]], ['bin', '1', '0']]]]]]]], 'always']
    always ['*', ['list', ['case', 'hwloop_start_mux_sel', [[[['bin', '1', '0']], ['=', 'hwloop_start_int', 'hwloop_target']], [[['bin', '1', '1']], ['=', 'hwloop_start_int', 'pc_if_i']]]]], 'always']
    always ['*', ['named_begin', 'hwloop_cnt_mux', ['list', ['case', 'hwloop_cnt_mux_sel', [[[['bin', '1', '0']], ['=', 'hwloop_cnt_int', 'imm_iz_type']], [[['bin', '1', '1']], ['=', 'hwloop_cnt_int', 'operand_a_fw_id']]]]]], 'always']
    always ['*', ['named_begin', 'jump_target_mux', ['list', ['case', 'jump_target_mux_sel', [[['JT_JAL'], ['=', 'jump_target', ['+', 'pc_id_i', 'imm_uj_type']]], [['JT_COND'], ['=', 'jump_target', ['+', 'pc_id_i', 'imm_sb_type']]], [['JT_JALR'], ['=', 'jump_target', ['+', 'regfile_data_ra_id', 'imm_i_type']]], ['default', ['=', 'jump_target', ['+', 'regfile_data_ra_id', 'imm_i_type']]]]]]], 'always']
    always ['*', ['named_begin', 'alu_operand_a_mux', ['list', ['case', 'alu_op_a_mux_sel', [[['OP_A_REGA_OR_FWD'], ['=', 'alu_operand_a', 'operand_a_fw_id']], [['OP_A_REGB_OR_FWD'], ['=', 'alu_operand_a', 'operand_b_fw_id']], [['OP_A_REGC_OR_FWD'], ['=', 'alu_operand_a', 'operand_c_fw_id']], [['OP_A_CURRPC'], ['=', 'alu_operand_a', 'pc_id_i']], [['OP_A_IMM'], ['=', 'alu_operand_a', 'imm_a']], ['default', ['=', 'alu_operand_a', 'operand_a_fw_id']]]]]], 'always']
    always ['*', ['named_begin', 'immediate_a_mux', ['list', ['case', 'imm_a_mux_sel', [[['IMMA_Z'], ['=', 'imm_a', 'imm_z_type']], [['IMMA_ZERO'], ['=', 'imm_a', ['dig', 32, '0']]], ['default', ['=', 'imm_a', ['dig', 32, '0']]]]]]], 'always']
    always ['*', ['named_begin', 'operand_a_fw_mux', ['list', ['case', 'operand_a_fw_mux_sel', [[['SEL_FW_EX'], ['=', 'operand_a_fw_id', 'regfile_alu_wdata_fw_i']], [['SEL_FW_WB'], ['=', 'operand_a_fw_id', 'regfile_wdata_wb_i']], [['SEL_REGFILE'], ['=', 'operand_a_fw_id', 'regfile_data_ra_id']], ['default', ['=', 'operand_a_fw_id', 'regfile_data_ra_id']]]]]], 'always']
    always ['*', ['named_begin', 'immediate_b_mux', ['list', ['case', 'imm_b_mux_sel', [[['IMMB_I'], ['=', 'imm_b', 'imm_i_type']], [['IMMB_S'], ['=', 'imm_b', 'imm_s_type']], [['IMMB_U'], ['=', 'imm_b', 'imm_u_type']], [['IMMB_PCINCR'], ['=', 'imm_b', ['question', ['&&', 'is_compressed_i', ['~', 'data_misaligned_i']], ['hex', '32', '2'], ['hex', '32', '4']]]], [['IMMB_S2'], ['=', 'imm_b', 'imm_s2_type']], [['IMMB_BI'], ['=', 'imm_b', 'imm_bi_type']], [['IMMB_S3'], ['=', 'imm_b', 'imm_s3_type']], [['IMMB_VS'], ['=', 'imm_b', 'imm_vs_type']], [['IMMB_VU'], ['=', 'imm_b', 'imm_vu_type']], [['IMMB_SHUF'], ['=', 'imm_b', 'imm_shuffle_type']], [['IMMB_CLIP'], ['=', 'imm_b', ['curly', ['bin', '1', '0'], ['subbus', 'imm_clip_type', [31, 1]]]]], ['default', ['=', 'imm_b', 'imm_i_type']]]]]], 'always']
    always ['*', ['named_begin', 'alu_operand_b_mux', ['list', ['case', 'alu_op_b_mux_sel', [[['OP_B_REGA_OR_FWD'], ['=', 'operand_b', 'operand_a_fw_id']], [['OP_B_REGB_OR_FWD'], ['=', 'operand_b', 'operand_b_fw_id']], [['OP_B_REGC_OR_FWD'], ['=', 'operand_b', 'operand_c_fw_id']], [['OP_B_IMM'], ['=', 'operand_b', 'imm_b']], [['OP_B_BMASK'], ['=', 'operand_b', ['functioncall', '$unsigned', [['subbus', 'operand_b_fw_id', (4, 0)]]]]], ['default', ['=', 'operand_b', 'operand_b_fw_id']]]]]], 'always']
    always ['*', ['list', ['ifelse', ['==', 'alu_vec_mode', 'VEC_MODE8'], ['list', ['=', 'operand_b_vec', ['curly', 'repeat', 4, ['curly', ['subbus', 'operand_b', [7, 0]]]]], ['=', 'imm_shuffle_type', 'imm_shuffleb_type']], ['list', ['=', 'operand_b_vec', ['curly', 'repeat', 2, ['curly', ['subbus', 'operand_b', [15, 0]]]]], ['=', 'imm_shuffle_type', 'imm_shuffleh_type']]]], 'always']
    always ['*', ['named_begin', 'operand_b_fw_mux', ['list', ['case', 'operand_b_fw_mux_sel', [[['SEL_FW_EX'], ['=', 'operand_b_fw_id', 'regfile_alu_wdata_fw_i']], [['SEL_FW_WB'], ['=', 'operand_b_fw_id', 'regfile_wdata_wb_i']], [['SEL_REGFILE'], ['=', 'operand_b_fw_id', 'regfile_data_rb_id']], ['default', ['=', 'operand_b_fw_id', 'regfile_data_rb_id']]]]]], 'always']
    always ['*', ['named_begin', 'alu_operand_c_mux', ['list', ['case', 'alu_op_c_mux_sel', [[['OP_C_REGC_OR_FWD'], ['=', 'alu_operand_c', 'operand_c_fw_id']], [['OP_C_REGB_OR_FWD'], ['=', 'alu_operand_c', 'operand_b_fw_id']], [['OP_C_JT'], ['=', 'alu_operand_c', 'jump_target']], ['default', ['=', 'alu_operand_c', 'operand_c_fw_id']]]]]], 'always']
    always ['*', ['named_begin', 'operand_c_fw_mux', ['list', ['case', 'operand_c_fw_mux_sel', [[['SEL_FW_EX'], ['=', 'operand_c_fw_id', 'regfile_alu_wdata_fw_i']], [['SEL_FW_WB'], ['=', 'operand_c_fw_id', 'regfile_wdata_wb_i']], [['SEL_REGFILE'], ['=', 'operand_c_fw_id', 'regfile_data_rc_id']], ['default', ['=', 'operand_c_fw_id', 'regfile_data_rc_id']]]]]], 'always']
    always ['*', ['list', ['case', 'bmask_a_mux', [[['BMASK_A_ZERO'], ['=', 'bmask_a_id_imm', ['dig', 32, '0']]], [['BMASK_A_S3'], ['=', 'bmask_a_id_imm', ['subbus', 'imm_s3_type', [4, 0]]]], ['default', ['=', 'bmask_a_id_imm', ['dig', 32, '0']]]]]], 'always']
    always ['*', ['list', ['case', 'bmask_b_mux', [[['BMASK_B_ZERO'], ['=', 'bmask_b_id_imm', ['dig', 32, '0']]], [['BMASK_B_ONE'], ['=', 'bmask_b_id_imm', ['dig', '5', '1']]], [['BMASK_B_S2'], ['=', 'bmask_b_id_imm', ['subbus', 'imm_s2_type', [4, 0]]]], [['BMASK_B_S3'], ['=', 'bmask_b_id_imm', ['subbus', 'imm_s3_type', [4, 0]]]], ['default', ['=', 'bmask_b_id_imm', ['dig', 32, '0']]]]]], 'always']
    always ['*', ['list', ['case', 'alu_bmask_a_mux_sel', [[['BMASK_A_IMM'], ['=', 'bmask_a_id', 'bmask_a_id_imm']], [['BMASK_A_REG'], ['=', 'bmask_a_id', ['subbus', 'operand_b_fw_id', [9, 5]]]], ['default', ['=', 'bmask_a_id', 'bmask_a_id_imm']]]]], 'always']
    always ['*', ['list', ['case', 'alu_bmask_b_mux_sel', [[['BMASK_B_IMM'], ['=', 'bmask_b_id', 'bmask_b_id_imm']], [['BMASK_B_REG'], ['=', 'bmask_b_id', ['subbus', 'operand_b_fw_id', [4, 0]]]], ['default', ['=', 'bmask_b_id', 'bmask_b_id_imm']]]]], 'always']
    always ['*', ['list', ['case', 'mult_imm_mux', [[['MIMM_ZERO'], ['=', 'mult_imm_id', ['dig', 32, '0']]], [['MIMM_S3'], ['=', 'mult_imm_id', ['subbus', 'imm_s3_type', [4, 0]]]], ['default', ['=', 'mult_imm_id', ['dig', 32, '0']]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'ID_EX_PIPE_REGISTERS', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'alu_en_ex_o', ['dig', 32, '0']], ['<=', 'alu_operator_ex_o', 'ALU_SLTU'], ['<=', 'alu_operand_a_ex_o', ['dig', 32, '0']], ['<=', 'alu_operand_b_ex_o', ['dig', 32, '0']], ['<=', 'alu_operand_c_ex_o', ['dig', 32, '0']], ['<=', 'bmask_a_ex_o', ['dig', 32, '0']], ['<=', 'bmask_b_ex_o', ['dig', 32, '0']], ['<=', 'imm_vec_ext_ex_o', ['dig', 32, '0']], ['<=', 'alu_vec_mode_ex_o', ['dig', 32, '0']], ['<=', 'mult_operator_ex_o', ['dig', 32, '0']], ['<=', 'mult_operand_a_ex_o', ['dig', 32, '0']], ['<=', 'mult_operand_b_ex_o', ['dig', 32, '0']], ['<=', 'mult_operand_c_ex_o', ['dig', 32, '0']], ['<=', 'mult_en_ex_o', ['bin', '1', '0']], ['<=', 'mult_sel_subword_ex_o', ['bin', '1', '0']], ['<=', 'mult_signed_mode_ex_o', ['bin', '2', '00']], ['<=', 'mult_imm_ex_o', ['dig', 32, '0']], ['<=', 'mult_dot_op_a_ex_o', ['dig', 32, '0']], ['<=', 'mult_dot_op_b_ex_o', ['dig', 32, '0']], ['<=', 'mult_dot_op_c_ex_o', ['dig', 32, '0']], ['<=', 'mult_dot_signed_ex_o', ['dig', 32, '0']], ['<=', 'fpu_op_ex_o', ['dig', 32, '0']], ['<=', 'apu_en_ex_o', ['dig', 32, '0']], ['<=', 'apu_type_ex_o', ['dig', 32, '0']], ['<=', 'apu_op_ex_o', ['dig', 32, '0']], ['<=', 'apu_lat_ex_o', ['dig', 32, '0']], ['<=', ['subbit', 'apu_operands_ex_o', 0], ['dig', 32, '0']], ['<=', ['subbit', 'apu_operands_ex_o', 1], ['dig', 32, '0']], ['<=', ['subbit', 'apu_operands_ex_o', 2], ['dig', 32, '0']], ['<=', 'apu_flags_ex_o', ['dig', 32, '0']], ['<=', 'apu_waddr_ex_o', ['dig', 32, '0']], ['<=', 'regfile_waddr_ex_o', ['bin', '6', '0']], ['<=', 'regfile_we_ex_o', ['bin', '1', '0']], ['<=', 'regfile_alu_waddr_ex_o', ['bin', '6', '0']], ['<=', 'regfile_alu_we_ex_o', ['bin', '1', '0']], ['<=', 'prepost_useincr_ex_o', ['bin', '1', '0']], ['<=', 'csr_access_ex_o', ['bin', '1', '0']], ['<=', 'csr_op_ex_o', 'CSR_OP_NONE'], ['<=', 'data_we_ex_o', ['bin', '1', '0']], ['<=', 'data_type_ex_o', ['bin', '2', '0']], ['<=', 'data_sign_ext_ex_o', ['bin', '1', '0']], ['<=', 'data_reg_offset_ex_o', ['bin', '2', '0']], ['<=', 'data_req_ex_o', ['bin', '1', '0']], ['<=', 'data_load_event_ex_o', ['bin', '1', '0']], ['<=', 'data_misaligned_ex_o', ['bin', '1', '0']], ['<=', 'pc_ex_o', ['dig', 32, '0']], ['<=', 'branch_in_ex_o', ['bin', '1', '0']]], ['ifelse', 'data_misaligned_i', ['list', ['if', 'ex_ready_i', ['list', ['if', 'prepost_useincr_ex_o', ['list', ['<=', 'alu_operand_a_ex_o', 'alu_operand_a']]], ['<=', 'alu_operand_b_ex_o', 'alu_operand_b'], ['<=', 'regfile_alu_we_ex_o', 'regfile_alu_we_id'], ['<=', 'prepost_useincr_ex_o', 'prepost_useincr'], ['<=', 'data_misaligned_ex_o', ['bin', '1', '1']]]]], ['ifelse', 'mult_multicycle_i', ['list', ['<=', 'mult_operand_c_ex_o', 'alu_operand_c']], ['list', ['ifelse', 'id_valid_o', ['list', ['<=', 'alu_en_ex_o', 'alu_en'], ['if', 'alu_en', ['list', ['<=', 'alu_operator_ex_o', 'alu_operator'], ['<=', 'alu_operand_a_ex_o', 'alu_operand_a'], ['<=', 'alu_operand_b_ex_o', 'alu_operand_b'], ['<=', 'alu_operand_c_ex_o', 'alu_operand_c'], ['<=', 'bmask_a_ex_o', 'bmask_a_id'], ['<=', 'bmask_b_ex_o', 'bmask_b_id'], ['<=', 'imm_vec_ext_ex_o', 'imm_vec_ext_id'], ['<=', 'alu_vec_mode_ex_o', 'alu_vec_mode']]], ['<=', 'mult_en_ex_o', 'mult_en'], ['if', 'mult_int_en', ['list', ['<=', 'mult_operator_ex_o', 'mult_operator'], ['<=', 'mult_sel_subword_ex_o', 'mult_sel_subword'], ['<=', 'mult_signed_mode_ex_o', 'mult_signed_mode'], ['<=', 'mult_operand_a_ex_o', 'alu_operand_a'], ['<=', 'mult_operand_b_ex_o', 'alu_operand_b'], ['<=', 'mult_operand_c_ex_o', 'alu_operand_c'], ['<=', 'mult_imm_ex_o', 'mult_imm_id']]], ['if', 'mult_dot_en', ['list', ['<=', 'mult_operator_ex_o', 'mult_operator'], ['<=', 'mult_dot_signed_ex_o', 'mult_dot_signed'], ['<=', 'mult_dot_op_a_ex_o', 'alu_operand_a'], ['<=', 'mult_dot_op_b_ex_o', 'alu_operand_b'], ['<=', 'mult_dot_op_c_ex_o', 'alu_operand_c']]], ['<=', 'apu_en_ex_o', 'apu_en'], ['if', 'apu_en', ['list', ['<=', 'fpu_op_ex_o', 'fpu_op'], ['<=', 'apu_type_ex_o', 'apu_type'], ['<=', 'apu_op_ex_o', 'apu_op'], ['<=', 'apu_lat_ex_o', 'apu_lat'], ['<=', 'apu_operands_ex_o', 'apu_operands'], ['<=', 'apu_flags_ex_o', 'apu_flags'], ['<=', 'apu_waddr_ex_o', 'apu_waddr']]], ['<=', 'regfile_we_ex_o', 'regfile_we_id'], ['if', 'regfile_we_id', ['list', ['<=', 'regfile_waddr_ex_o', 'regfile_waddr_id']]], ['<=', 'regfile_alu_we_ex_o', 'regfile_alu_we_id'], ['if', 'regfile_alu_we_id', ['list', ['<=', 'regfile_alu_waddr_ex_o', 'regfile_alu_waddr_id']]], ['<=', 'prepost_useincr_ex_o', 'prepost_useincr'], ['<=', 'csr_access_ex_o', 'csr_access'], ['<=', 'csr_op_ex_o', 'csr_op'], ['<=', 'data_req_ex_o', 'data_req_id'], ['ifelse', 'data_req_id', ['list', ['<=', 'data_we_ex_o', 'data_we_id'], ['<=', 'data_type_ex_o', 'data_type_id'], ['<=', 'data_sign_ext_ex_o', 'data_sign_ext_id'], ['<=', 'data_reg_offset_ex_o', 'data_reg_offset_id'], ['<=', 'data_load_event_ex_o', 'data_load_event_id']], ['list', ['<=', 'data_load_event_ex_o', ['bin', '1', '0']]]], ['<=', 'data_misaligned_ex_o', ['bin', '1', '0']], ['if', ['||', ['==', 'jump_in_id', 'BRANCH_COND'], 'data_load_event_id'], ['list', ['<=', 'pc_ex_o', 'pc_id_i']]], ['<=', 'branch_in_ex_o', ['==', 'jump_in_id', 'BRANCH_COND']]], ['ifelse', 'ex_ready_i', ['list', ['<=', 'regfile_we_ex_o', ['bin', '1', '0']], ['<=', 'regfile_alu_we_ex_o', ['bin', '1', '0']], ['<=', 'csr_op_ex_o', 'CSR_OP_NONE'], ['<=', 'data_req_ex_o', ['bin', '1', '0']], ['<=', 'data_load_event_ex_o', ['bin', '1', '0']], ['<=', 'data_misaligned_ex_o', ['bin', '1', '0']], ['<=', 'branch_in_ex_o', ['bin', '1', '0']], ['<=', 'apu_en_ex_o', ['bin', '1', '0']], ['<=', 'alu_operator_ex_o', 'ALU_SLTU'], ['<=', 'mult_en_ex_o', ['bin', '1', '0']]], ['if', 'csr_access_ex_o', ['list', ['<=', 'regfile_alu_we_ex_o', ['bin', '1', '0']]]]]]]]]]]], 'always']
    generate ['ifelse', ['==', 'APU', 1], ['named_begin', 'apu_op_preparation', ['list', ['if', ['>=', 'APU_NARGS_CPU', 1], ['assigns', ['=', ['subbit', 'apu_operands', 0], 'alu_operand_a']]], ['if', ['>=', 'APU_NARGS_CPU', 2], ['assigns', ['=', ['subbit', 'apu_operands', 1], 'alu_operand_b']]], ['if', ['>=', 'APU_NARGS_CPU', 3], ['assigns', ['=', ['subbit', 'apu_operands', 2], 'alu_operand_c']]], ['assigns', ['=', 'apu_waddr', 'regfile_alu_waddr_id']], ['assigns', ['=', 'apu_flags', 'apu_flags_reg']], ['always', '*', ['list', ['case', 'apu_flags_src', [[['APU_FLAGS_INT_MULT'], ['=', 'apu_flags_reg', ['curly', ['hex', '7', '0'], 'mult_imm_id', 'mult_signed_mode', 'mult_sel_subword']]], [['APU_FLAGS_DSP_MULT'], ['=', 'apu_flags_reg', ['curly', ['hex', '13', '0'], 'mult_dot_signed']]], [['APU_FLAGS_FP'], ['ifelse', 'FPU', ['list', ['ifelse', ['==', 'fp_rnd_mode', ['bin', '3', '111']], ['=', 'apu_flags_reg', 'frm_i'], ['=', 'apu_flags_reg', 'fp_rnd_mode']]], ['=', 'apu_flags_reg', ['dig', 32, '0']]]], ['default', ['=', 'apu_flags_reg', ['dig', 32, '0']]]]]]], ['always', '*', ['list', ['case', 'alu_op_a_mux_sel', [[['OP_A_REGA_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 0], 'regfile_addr_ra_id'], ['=', ['subbit', 'apu_read_regs_valid', 0], ['bin', '1', '1']]]], [['OP_A_REGB_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 0], 'regfile_addr_rb_id'], ['=', ['subbit', 'apu_read_regs_valid', 0], ['bin', '1', '1']]]], ['default', ['list', ['=', ['subbit', 'apu_read_regs', 0], 'regfile_addr_ra_id'], ['=', ['subbit', 'apu_read_regs_valid', 0], ['bin', '1', '0']]]]]]]], ['always', '*', ['list', ['case', 'alu_op_b_mux_sel', [[['OP_B_REGB_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 1], 'regfile_addr_rb_id'], ['=', ['subbit', 'apu_read_regs_valid', 1], ['bin', '1', '1']]]], [['OP_B_REGC_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 1], 'regfile_addr_rc_id'], ['=', ['subbit', 'apu_read_regs_valid', 1], ['bin', '1', '1']]]], ['default', ['list', ['=', ['subbit', 'apu_read_regs', 1], 'regfile_addr_rb_id'], ['=', ['subbit', 'apu_read_regs_valid', 1], ['bin', '1', '0']]]]]]]], ['always', '*', ['list', ['case', 'alu_op_c_mux_sel', [[['OP_C_REGB_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 2], 'regfile_addr_rb_id'], ['=', ['subbit', 'apu_read_regs_valid', 2], ['bin', '1', '1']]]], [['OP_C_REGC_OR_FWD'], ['list', ['=', ['subbit', 'apu_read_regs', 2], 'regfile_addr_rc_id'], ['=', ['subbit', 'apu_read_regs_valid', 2], ['bin', '1', '1']]]], ['default', ['list', ['=', ['subbit', 'apu_read_regs', 2], 'regfile_addr_rc_id'], ['=', ['subbit', 'apu_read_regs_valid', 2], ['bin', '1', '0']]]]]]]], ['assigns', ['=', ['subbit', 'apu_write_regs', 0], 'regfile_alu_waddr_id']], ['assigns', ['=', ['subbit', 'apu_write_regs_valid', 0], 'regfile_alu_we_id']], ['assigns', ['=', ['subbit', 'apu_write_regs', 1], 'regfile_waddr_id']], ['assigns', ['=', ['subbit', 'apu_write_regs_valid', 1], 'regfile_we_id']], ['assigns', ['=', 'apu_read_regs_o', 'apu_read_regs']], ['assigns', ['=', 'apu_read_regs_valid_o', 'apu_read_regs_valid']], ['assigns', ['=', 'apu_write_regs_o', 'apu_write_regs']], ['assigns', ['=', 'apu_write_regs_valid_o', 'apu_write_regs_valid']]]], ['list', ['for', ['list', ['=', 'i', 0]], ['<', 'i', 'APU_NARGS_CPU'], ['list', ['=', 'i', ['+', 'i', 1]]], ['named_begin', 'apu_tie_off', ['list', ['assigns', ['=', ['subbit', 'apu_operands', 'i'], ['dig', 32, '0']]]]]], ['assigns', ['=', 'apu_waddr', ['dig', 32, '0']]], ['assigns', ['=', 'apu_flags', ['dig', 32, '0']]], ['assigns', ['=', 'apu_write_regs_o', ['dig', 32, '0']]], ['assigns', ['=', 'apu_read_regs_o', ['dig', 32, '0']]], ['assigns', ['=', 'apu_write_regs_valid_o', ['dig', 32, '0']]], ['assigns', ['=', 'apu_read_regs_valid_o', ['dig', 32, '0']]]]]
instance riscv_controller controller_i
      conn pin=csr_status_i sig=csr_status
      conn pin=jump_in_dec_i sig=jump_in_dec
      conn pin=fetch_enable_i sig=fetch_enable_i
      conn pin=is_decoding_o sig=is_decoding_o
      conn pin=m_IE_i sig=m_irq_enable_i
      conn pin=reg_d_alu_is_reg_c_i sig=reg_d_alu_is_reg_c_id
      conn pin=apu_stall_o sig=apu_stall
      conn pin=dbg_req_i sig=dbg_req_i
      conn pin=id_ready_i sig=id_ready_o
      conn pin=operand_b_fw_mux_sel_o sig=operand_b_fw_mux_sel
      conn pin=perf_jr_stall_o sig=perf_jr_stall_o
      conn pin=first_fetch_o sig=core_ctrl_firstfetch_o
      conn pin=perf_ld_stall_o sig=perf_ld_stall_o
      conn pin=pc_mux_o sig=pc_mux_o
      conn pin=operand_c_fw_mux_sel_o sig=operand_c_fw_mux_sel
      conn pin=reg_d_wb_is_reg_a_i sig=reg_d_wb_is_reg_a_id
      conn pin=apu_en_i sig=apu_en
      conn pin=irq_ack_o sig=irq_ack_o
      conn pin=u_IE_i sig=u_irq_enable_i
      conn pin=operand_a_fw_mux_sel_o sig=operand_a_fw_mux_sel
      conn pin=jump_in_id_i sig=jump_in_id
      conn pin=exc_ack_o sig=exc_ack
      conn pin=uret_insn_i sig=uret_insn_dec
      conn pin=clk sig=clk
      conn pin=dbg_trap_o sig=dbg_trap_o
      conn pin=halt_if_o sig=halt_if_o
      conn pin=trap_addr_mux_o sig=trap_addr_mux_o
      conn pin=exc_kill_o sig=exc_kill
      conn pin=dbg_stall_i sig=dbg_stall_i
      conn pin=pipe_flush_i sig=pipe_flush_dec
      conn pin=csr_cause_o sig=csr_cause_o
      conn pin=misaligned_stall_o sig=misaligned_stall
      conn pin=ecall_insn_i sig=ecall_insn_dec
      conn pin=regfile_alu_we_fw_i sig=regfile_alu_we_fw_i
      conn pin=dbg_settings_i sig=dbg_settings_i
      conn pin=irq_sec_ctrl_i sig=irq_sec_ctrl
      conn pin=irq_req_ctrl_i sig=irq_req_ctrl
      conn pin=regfile_alu_waddr_id_i sig=regfile_alu_waddr_id
      conn pin=apu_write_dep_i sig=apu_write_dep_i
      conn pin=csr_save_cause_o sig=csr_save_cause_o
      conn pin=exc_pc_mux_o sig=exc_pc_mux_o
      conn pin=rst_n sig=rst_n
      conn pin=regfile_we_wb_i sig=regfile_we_wb_i
      conn pin=jr_stall_o sig=jr_stall
      conn pin=deassert_we_o sig=deassert_we
      conn pin=exc_cause_o sig=exc_cause_o
      conn pin=regfile_we_ex_i sig=regfile_we_ex_o
      conn pin=data_load_event_i sig=data_load_event_id
      conn pin=instr_valid_i sig=instr_valid_i
      conn pin=csr_save_if_o sig=csr_save_if_o
      conn pin=instr_req_o sig=instr_req_o
      conn pin=apu_read_dep_i sig=apu_read_dep_i
      conn pin=dbg_jump_req_i sig=dbg_jump_req_i
      conn pin=ebrk_insn_i sig=ebrk_insn
      conn pin=irq_id_ctrl_i sig=irq_id_ctrl
      conn pin=halt_id_o sig=halt_id
      conn pin=branch_taken_ex_i sig=branch_taken_ex
      conn pin=data_misaligned_i sig=data_misaligned_i
      conn pin=reg_d_ex_is_reg_b_i sig=reg_d_ex_is_reg_b_id
      conn pin=instr_multicycle_i sig=instr_multicycle
      conn pin=illegal_insn_i sig=illegal_insn_dec
      conn pin=pc_set_o sig=pc_set_o
      conn pin=reg_d_ex_is_reg_c_i sig=reg_d_ex_is_reg_c_id
      conn pin=wb_ready_i sig=wb_ready_i
      conn pin=mult_multicycle_i sig=mult_multicycle_i
      conn pin=reg_d_ex_is_reg_a_i sig=reg_d_ex_is_reg_a_id
      conn pin=reg_d_wb_is_reg_c_i sig=reg_d_wb_is_reg_c_id
      conn pin=csr_restore_mret_id_o sig=csr_restore_mret_id_o
      conn pin=mret_insn_i sig=mret_insn_dec
      conn pin=csr_save_id_o sig=csr_save_id_o
      conn pin=data_req_ex_i sig=data_req_ex_o
      conn pin=dbg_ack_o sig=dbg_ack_o
      conn pin=reg_d_alu_is_reg_a_i sig=reg_d_alu_is_reg_a_id
      conn pin=regfile_waddr_ex_i sig=regfile_waddr_ex_o
      conn pin=irq_id_o sig=irq_id_o
      conn pin=reg_d_alu_is_reg_b_i sig=reg_d_alu_is_reg_b_id
      conn pin=load_stall_o sig=load_stall
      conn pin=perf_jump_o sig=perf_jump_o
      conn pin=current_priv_lvl_i sig=current_priv_lvl_i
      conn pin=csr_irq_sec_o sig=csr_irq_sec_o
      conn pin=reg_d_wb_is_reg_b_i sig=reg_d_wb_is_reg_b_id
      conn pin=ctrl_busy_o sig=ctrl_busy_o
      conn pin=ex_valid_i sig=ex_valid_i
      conn pin=csr_restore_uret_id_o sig=csr_restore_uret_id_o
instance riscv_register_file registers_i
      conn pin=rst_n sig=rst_n
      conn pin=rdata_c_o sig=regfile_data_rc_id
      conn pin=raddr_a_i sig=regfile_addr_ra_id
      conn pin=raddr_b_i sig=regfile_addr_rb_id
      conn pin=clk sig=clk
      conn pin=test_en_i sig=test_en_i
      conn pin=we_a_i sig=regfile_we_wb_i
      conn pin=waddr_b_i sig=['question', ['==', 'dbg_reg_wreq_i', ['bin', '1', '0']], 'regfile_alu_waddr_fw_i', 'dbg_reg_waddr_i']
      conn pin=wdata_b_i sig=['question', ['==', 'dbg_reg_wreq_i', ['bin', '1', '0']], 'regfile_alu_wdata_fw_i', 'dbg_reg_wdata_i']
      conn pin=rdata_a_o sig=regfile_data_ra_id
      conn pin=wdata_a_i sig=regfile_wdata_wb_i
      conn pin=we_b_i sig=['question', ['==', 'dbg_reg_wreq_i', ['bin', '1', '0']], 'regfile_alu_we_fw_i', ['bin', '1', '1']]
      conn pin=raddr_c_i sig=['question', ['==', 'dbg_reg_rreq_i', ['bin', '1', '0']], 'regfile_addr_rc_id', 'dbg_reg_raddr_i']
      conn pin=waddr_a_i sig=regfile_waddr_wb_i
      conn pin=rdata_b_o sig=regfile_data_rb_id
instance riscv_hwloop_regs hwloop_regs_i
      conn pin=rst_n sig=rst_n
      conn pin=hwlp_we_i sig=hwloop_we
      conn pin=hwlp_end_addr_o sig=hwlp_end_o
      conn pin=hwlp_counter_o sig=hwlp_cnt_o
      conn pin=hwlp_cnt_data_i sig=hwloop_cnt
      conn pin=clk sig=clk
      conn pin=hwlp_dec_cnt_i sig=hwlp_dec_cnt_i
      conn pin=hwlp_start_data_i sig=hwloop_start
      conn pin=hwlp_end_data_i sig=hwloop_end
      conn pin=hwlp_regid_i sig=hwloop_regid
      conn pin=valid_i sig=hwloop_valid
      conn pin=hwlp_start_addr_o sig=hwlp_start_o
instance riscv_decoder decoder_i
      conn pin=data_req_o sig=data_req_id
      conn pin=apu_flags_src_o sig=apu_flags_src
      conn pin=mult_imm_mux_o sig=mult_imm_mux
      conn pin=mult_operator_o sig=mult_operator
      conn pin=csr_status_o sig=csr_status
      conn pin=rega_used_o sig=rega_used_dec
      conn pin=reg_fp_d_o sig=regfile_fp_d
      conn pin=apu_type_o sig=apu_type
      conn pin=data_reg_offset_o sig=data_reg_offset_id
      conn pin=mult_sel_subword_o sig=mult_sel_subword
      conn pin=mult_dot_en_o sig=mult_dot_en
      conn pin=hwloop_cnt_mux_sel_o sig=hwloop_cnt_mux_sel
      conn pin=data_sign_extension_o sig=data_sign_ext_id
      conn pin=fp_rnd_mode_o sig=fp_rnd_mode
      conn pin=alu_bmask_b_mux_sel_o sig=alu_bmask_b_mux_sel
      conn pin=regfile_alu_waddr_sel_o sig=regfile_alu_waddr_mux_sel
      conn pin=regfile_mem_we_o sig=regfile_we_id
      conn pin=apu_en_o sig=apu_en
      conn pin=scalar_replication_o sig=scalar_replication
      conn pin=mult_dot_signed_o sig=mult_dot_signed
      conn pin=hwloop_we_o sig=hwloop_we_int
      conn pin=hwloop_target_mux_sel_o sig=hwloop_target_mux_sel
      conn pin=uret_insn_o sig=uret_insn_dec
      conn pin=jump_in_id_o sig=jump_in_id
      conn pin=pipe_flush_o sig=pipe_flush_dec
      conn pin=alu_operator_o sig=alu_operator
      conn pin=alu_bmask_a_mux_sel_o sig=alu_bmask_a_mux_sel
      conn pin=imm_b_mux_sel_o sig=imm_b_mux_sel
      conn pin=ecall_insn_o sig=ecall_insn_dec
      conn pin=apu_lat_o sig=apu_lat
      conn pin=data_type_o sig=data_type_id
      conn pin=data_we_o sig=data_we_id
      conn pin=alu_en_o sig=alu_en
      conn pin=fpu_op_o sig=fpu_op
      conn pin=alu_op_c_mux_sel_o sig=alu_op_c_mux_sel
      conn pin=reg_fp_b_o sig=regfile_fp_b
      conn pin=bmask_a_mux_o sig=bmask_a_mux
      conn pin=deassert_we_i sig=deassert_we
      conn pin=csr_access_o sig=csr_access
      conn pin=regc_mux_o sig=regc_mux
      conn pin=illegal_c_insn_i sig=illegal_c_insn_i
      conn pin=data_load_event_o sig=data_load_event_id
      conn pin=apu_op_o sig=apu_op
      conn pin=mult_int_en_o sig=mult_int_en
      conn pin=prepost_useincr_o sig=prepost_useincr
      conn pin=ebrk_insn_o sig=ebrk_insn
      conn pin=regfile_alu_we_o sig=regfile_alu_we_id
      conn pin=reg_fp_c_o sig=regfile_fp_c
      conn pin=data_misaligned_i sig=data_misaligned_i
      conn pin=instr_multicycle_o sig=instr_multicycle
      conn pin=illegal_insn_o sig=illegal_insn_dec
      conn pin=instr_rdata_i sig=instr
      conn pin=bmask_b_mux_o sig=bmask_b_mux
      conn pin=alu_op_b_mux_sel_o sig=alu_op_b_mux_sel
      conn pin=jump_in_dec_o sig=jump_in_dec
      conn pin=mult_multicycle_i sig=mult_multicycle_i
      conn pin=mret_insn_o sig=mret_insn_dec
      conn pin=reg_fp_a_o sig=regfile_fp_a
      conn pin=imm_a_mux_sel_o sig=imm_a_mux_sel
      conn pin=hwloop_start_mux_sel_o sig=hwloop_start_mux_sel
      conn pin=csr_op_o sig=csr_op
      conn pin=jump_target_mux_sel_o sig=jump_target_mux_sel
      conn pin=regc_used_o sig=regc_used_dec
      conn pin=mult_signed_mode_o sig=mult_signed_mode
      conn pin=current_priv_lvl_i sig=current_priv_lvl_i
      conn pin=regb_used_o sig=regb_used_dec
      conn pin=alu_op_a_mux_sel_o sig=alu_op_a_mux_sel
      conn pin=alu_vec_mode_o sig=alu_vec_mode
instance riscv_int_controller int_controller_i
      conn pin=u_IE_i sig=u_irq_enable_i
      conn pin=rst_n sig=rst_n
      conn pin=ctrl_ack_i sig=exc_ack
      conn pin=clk sig=clk
      conn pin=irq_sec_i sig=irq_sec_i
      conn pin=ctrl_kill_i sig=exc_kill
      conn pin=irq_i sig=irq_i
      conn pin=m_IE_i sig=m_irq_enable_i
      conn pin=irq_id_i sig=irq_id_i
      conn pin=irq_id_ctrl_o sig=irq_id_ctrl
      conn pin=current_priv_lvl_i sig=current_priv_lvl_i
      conn pin=irq_sec_ctrl_o sig=irq_sec_ctrl
      conn pin=irq_req_ctrl_o sig=irq_req_ctrl
endmodule
