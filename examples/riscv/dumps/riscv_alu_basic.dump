module riscv_alu_basic
    net imm_vec_ext_i ('input', (1, 0))
    net shift_amt ('wire', (31, 0))
    net shift_result ('wire', (31, 0))
    net is_equal ('reg', (3, 0))
    net result_o ('output reg', (31, 0))
    net cmp_result ('reg', (3, 0))
    net adder_in_a ('wire', (35, 0))
    net adder_in_b ('wire', (35, 0))
    net clk ('input', 0)
    net comparison_result_o ('output', 0)
    net ready_o ('output', 0)
    net operand_c_i ('input', (31, 0))
    net bmask_a_i ('input', (4, 0))
    net shift_amt_int ('wire', (31, 0))
    net is_greater_vec ('wire', (3, 0))
    net bmask ('wire', (31, 0))
    net operand_a_rev ('wire', (31, 0))
    net adder_result_expanded ('wire', (35, 0))
    net operand_b_i ('input', (31, 0))
    net bmask_b_i ('input', (4, 0))
    net is_equal_vec ('wire', (3, 0))
    net vector_mode_i ('input', (1, 0))
    net rst_n ('input', 0)
    net shift_right_result ('wire', (31, 0))
    net shift_op_a_ext ('wire', (32, 0))
    net shift_left ('wire', 0)
    net adder_op_b_negate ('wire', 0)
    net is_greater ('reg', (3, 0))
    net adder_result ('wire', (31, 0))
    net operand_a_i ('input', (31, 0))
    net cmp_signed ('reg', (3, 0))
    net shift_amt_left ('wire', (31, 0))
    net operand_a_neg ('wire', (31, 0))
    net operand_b_neg ('wire', (31, 0))
    net operand_a_neg_rev ('wire', (31, 0))
    net operator_i ('input', (['-', 'ALU_OP_WIDTH', 1], 0))
    net shift_op_a ('wire', (31, 0))
    net ex_ready_i ('input', 0)
    net shift_left_result ('wire', (31, 0))
    net shift_arithmetic ('wire', 0)
    net adder_op_a ('wire', (31, 0))
    net adder_op_b ('wire', (31, 0))
    assign ('operand_a_neg', ['~', 'operand_a_i'], '', '')
    assign ('operand_b_neg', ['~', 'operand_b_i'], '', '')
    assign ('adder_op_b_negate', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_SUB'], ['==', 'operator_i', 'ALU_SUBR']], ['==', 'operator_i', 'ALU_SUBU']], ['==', 'operator_i', 'ALU_SUBR']], '', '')
    assign ('adder_op_a', ['question', ['==', 'operator_i', 'ALU_ABS'], 'operand_a_neg', 'operand_a_i'], '', '')
    assign ('adder_op_b', ['question', 'adder_op_b_negate', 'operand_b_neg', 'operand_b_i'], '', '')
    assign ('adder_result', ['+', ['+', 'adder_op_a', 'adder_op_b'], 'adder_op_b_negate'], '', '')
    assign ('shift_amt', 'operand_b_i', '', '')
    assign (['subbus', 'shift_amt_left', (31, 0)], ['subbus', 'shift_amt', [31, 0]], '', '')
    assign ('shift_left', ['==', 'operator_i', 'ALU_SLL'], '', '')
    assign ('shift_arithmetic', ['==', 'operator_i', 'ALU_SRA'], '', '')
    assign ('shift_op_a', ['question', 'shift_left', 'operand_a_rev', 'operand_a_i'], '', '')
    assign ('shift_amt_int', ['question', 'shift_left', 'shift_amt_left', 'shift_amt'], '', '')
    assign ('shift_op_a_ext', ['question', 'shift_arithmetic', ['curly', ['subbit', 'shift_op_a', 31], 'shift_op_a'], ['curly', ['bin', '1', '0'], 'shift_op_a']], '', '')
    assign ('shift_right_result', ['>>>', ['functioncall', '$signed', ['shift_op_a_ext']], ['subbus', 'shift_amt_int', [4, 0]]], '', '')
    assign ('shift_result', ['question', 'shift_left', 'shift_left_result', 'shift_right_result'], '', '')
    assign ('comparison_result_o', ['subbit', 'cmp_result', 3], '', '')
    assign ('ready_o', ['bin', '1', '1'], '', '')
    always ['*', ['list', ['=', 'cmp_signed', ['bin', '4', '0']], ['case', 'operator_i', [[['ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES', 'ALU_SLTS', 'ALU_SLETS', 'ALU_MIN', 'ALU_MAX', 'ALU_ABS', 'ALU_CLIP', 'ALU_CLIPU'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1111']]], [['VEC_MODE16'], ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1010']]], ['default', ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1000']]]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', ['subbus', 'is_equal', (3, 0)], ['curly', 'repeat', 4, ['curly', ['&', ['&', ['&', ['subbit', 'is_equal_vec', 3], ['subbit', 'is_equal_vec', 2]], ['subbit', 'is_equal_vec', 1]], ['subbit', 'is_equal_vec', 0]]]]], ['=', ['subbus', 'is_greater', (3, 0)], ['curly', 'repeat', 4, ['curly', ['|', ['subbit', 'is_greater_vec', 3], ['&', ['subbit', 'is_equal_vec', 3], ['|', ['subbit', 'is_greater_vec', 2], ['&', ['subbit', 'is_equal_vec', 2], ['|', ['subbit', 'is_greater_vec', 1], ['&', ['subbit', 'is_equal_vec', 1], ['subbit', 'is_greater_vec', 0]]]]]]]]]], ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbus', 'is_equal', (1, 0)], ['curly', 'repeat', 2, ['curly', ['&', ['subbit', 'is_equal_vec', 0], ['subbit', 'is_equal_vec', 1]]]]], ['=', ['subbus', 'is_equal', (3, 2)], ['curly', 'repeat', 2, ['curly', ['&', ['subbit', 'is_equal_vec', 2], ['subbit', 'is_equal_vec', 3]]]]], ['=', ['subbus', 'is_greater', (1, 0)], ['curly', 'repeat', 2, ['curly', ['|', ['subbit', 'is_greater_vec', 1], ['&', ['subbit', 'is_equal_vec', 1], ['subbit', 'is_greater_vec', 0]]]]]], ['=', ['subbus', 'is_greater', (3, 2)], ['curly', 'repeat', 2, ['curly', ['|', ['subbit', 'is_greater_vec', 3], ['&', ['subbit', 'is_equal_vec', 3], ['subbit', 'is_greater_vec', 2]]]]]]]], [['VEC_MODE8'], ['list', ['=', ['subbus', 'is_equal', (3, 0)], ['subbus', 'is_equal_vec', [3, 0]]], ['=', ['subbus', 'is_greater', (3, 0)], ['subbus', 'is_greater_vec', [3, 0]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'cmp_result', 'is_equal'], ['case', 'operator_i', [[['ALU_EQ'], ['=', 'cmp_result', 'is_equal']], [['ALU_NE'], ['=', 'cmp_result', ['~', 'is_equal']]], [['ALU_GTS', 'ALU_GTU'], ['=', 'cmp_result', 'is_greater']], [['ALU_GES', 'ALU_GEU'], ['=', 'cmp_result', ['|', 'is_greater', 'is_equal']]], [['ALU_LTS', 'ALU_SLTS', 'ALU_LTU', 'ALU_SLTU'], ['=', 'cmp_result', ['~', ['|', 'is_greater', 'is_equal']]]], [['ALU_SLETS', 'ALU_SLETU', 'ALU_LES', 'ALU_LEU'], ['=', 'cmp_result', ['~', 'is_greater']]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'result_o', ['bin', 32, 'x']], ['case', 'operator_i', [[['ALU_AND'], ['=', 'result_o', ['&', 'operand_a_i', 'operand_b_i']]], [['ALU_OR'], ['=', 'result_o', ['|', 'operand_a_i', 'operand_b_i']]], [['ALU_XOR'], ['=', 'result_o', ['^', 'operand_a_i', 'operand_b_i']]], [['ALU_ADD', 'ALU_SUB'], ['=', 'result_o', 'adder_result']], [['ALU_SLL', 'ALU_SRL', 'ALU_SRA'], ['=', 'result_o', 'shift_result']], [['ALU_EQ', 'ALU_NE', 'ALU_GTU', 'ALU_GEU', 'ALU_LTU', 'ALU_LEU', 'ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES'], ['list', ['=', ['subbus', 'result_o', (31, 24)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 3]]]], ['=', ['subbus', 'result_o', (23, 16)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 2]]]], ['=', ['subbus', 'result_o', (15, 8)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 1]]]], ['=', ['subbus', 'result_o', (7, 0)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 0]]]]]], [['ALU_SLTS', 'ALU_SLTU', 'ALU_SLETS', 'ALU_SLETU'], ['=', 'result_o', ['curly', ['bin', '31', '0'], 'comparison_result_o']]], ['default', ['empty_begin_end']]]]], 'always']
    generate [['genvar', 'k'], ['for', ['list', ['=', 'k', 0]], ['<', 'k', 32], ['list', ['=', 'k', ['+', 'k', 1]]], ['list', ['assigns', ['=', ['subbit', 'operand_a_rev', 'k'], ['subbit', 'operand_a_i', ['-', 31, 'k']]]]]]]
    generate [['genvar', 'm'], ['for', ['list', ['=', 'm', 0]], ['<', 'm', 32], ['list', ['=', 'm', ['+', 'm', 1]]], ['list', ['assigns', ['=', ['subbit', 'operand_a_neg_rev', 'm'], ['subbit', 'operand_a_neg', ['-', 31, 'm']]]]]]]
    generate ['for', ['list', ['=', 'j', 0]], ['<', 'j', 32], ['list', ['=', 'j', ['+', 'j', 1]]], ['list', ['assigns', ['=', ['subbit', 'shift_left_result', 'j'], ['subbit', 'shift_right_result', ['-', 31, 'j']]]]]]
    generate ['for', ['list', ['=', 'i', 0]], ['<', 'i', 4], ['list', ['=', 'i', ['+', 'i', 1]]], ['list', ['assigns', ['=', ['subbit', 'is_equal_vec', 'i'], ['==', ['subbus', 'operand_a_i', [['+', ['*', 8, 'i'], 7], ['*', 8, 'i']]], ['subbus', 'operand_b_i', [['+', ['*', 8, 'i'], 7], ['*', 'i', 8]]]]]], ['assigns', ['=', ['subbit', 'is_greater_vec', 'i'], ['>', ['functioncall', '$signed', [['curly', ['&', ['subbit', 'operand_a_i', ['+', ['*', 8, 'i'], 7]], ['subbit', 'cmp_signed', 'i']], ['subbus', 'operand_a_i', (['+', ['*', 8, 'i'], 7], ['*', 8, 'i'])]]]], ['functioncall', '$signed', [['curly', ['&', ['subbit', 'operand_b_i', ['+', ['*', 8, 'i'], 7]], ['subbit', 'cmp_signed', 'i']], ['subbus', 'operand_b_i', (['+', ['*', 8, 'i'], 7], ['*', 'i', 8])]]]]]]]]]
endmodule
