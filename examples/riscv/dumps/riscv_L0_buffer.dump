module riscv_L0_buffer
    parameter RDATA_IN_WIDTH 128
    net addr_q ('reg', (31, 0))
    net hwlp_addr_i ('input', (31, 0))
    net fetch_gnt_o ('output', 0)
    net addr_o ('output', (31, 0))
    net instr_gnt_i ('input', 0)
    net clk ('input', 0)
    net prefetch_addr_i ('input', (31, 0))
    net valid ('reg', 0)
    net fetch_valid_o ('output reg', 0)
    net NS ('reg', (2, 0))
    net hwlp_i ('input', 0)
    net rst_n ('input', 0)
    net instr_addr_int ('reg', (31, 0))
    net branch_i ('input', 0)
    net instr_req_o ('output reg', 0)
    net instr_addr_o ('output', (31, 0))
    net rdata_o ('output', ('packed', (['-', ['/', 'RDATA_IN_WIDTH', 32], 1], 0), (31, 0)))
    net busy_o ('output', 0)
    net CS ('reg', (2, 0))
    net prefetch_i ('input', 0)
    net valid_o ('output', 0)
    net instr_rdata_i ('input', ('packed', (['-', ['/', 'RDATA_IN_WIDTH', 32], 1], 0), (31, 0)))
    net branch_addr_i ('input', (31, 0))
    net L0_buffer ('reg', ('packed', (3, 0), (31, 0)))
    net instr_rvalid_i ('input', 0)
    assign ('instr_addr_o', ['curly', ['subbus', 'instr_addr_int', [31, 4]], ['bin', '4', '0000']], '', '')
    assign ('rdata_o', ['question', 'instr_rvalid_i', 'instr_rdata_i', 'L0_buffer'], '', '')
    assign ('addr_o', 'addr_q', '', '')
    assign ('valid_o', ['&', 'valid', ['~', 'branch_i']], '', '')
    assign ('busy_o', ['&&', ['!=', 'CS', 'EMPTY'], ['||', ['!=', 'CS', 'VALID_L0'], 'instr_req_o']], '', '')
    assign ('fetch_gnt_o', 'instr_gnt_i', '', '')
    always ['*', ['list', ['=', 'NS', 'CS'], ['=', 'valid', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'instr_addr_int', ['dig', 32, '0']], ['=', 'fetch_valid_o', ['bin', '1', '0']], ['case', 'CS', [[['EMPTY'], ['list', ['ifelse', 'branch_i', ['=', 'instr_addr_int', 'branch_addr_i'], ['ifelse', 'hwlp_i', ['=', 'instr_addr_int', 'hwlp_addr_i'], ['=', 'instr_addr_int', 'prefetch_addr_i']]], ['if', ['|', ['|', 'branch_i', 'hwlp_i'], 'prefetch_i'], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]]]]], [['WAIT_GNT'], ['list', ['ifelse', 'branch_i', ['=', 'instr_addr_int', 'branch_addr_i'], ['ifelse', 'hwlp_i', ['=', 'instr_addr_int', 'hwlp_addr_i'], ['=', 'instr_addr_int', 'addr_q']]], ['ifelse', 'branch_i', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]]]]], [['WAIT_RVALID'], ['list', ['=', 'valid', 'instr_rvalid_i'], ['ifelse', 'branch_i', ['=', 'instr_addr_int', 'branch_addr_i'], ['ifelse', 'hwlp_i', ['=', 'instr_addr_int', 'hwlp_addr_i'], ['=', 'instr_addr_int', 'prefetch_addr_i']]], ['ifelse', 'branch_i', ['list', ['ifelse', 'instr_rvalid_i', ['list', ['=', 'fetch_valid_o', ['bin', '1', '1']], ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]], ['list', ['=', 'NS', 'ABORTED_BRANCH']]]], ['list', ['if', 'instr_rvalid_i', ['list', ['=', 'fetch_valid_o', ['bin', '1', '1']], ['ifelse', ['|', 'prefetch_i', 'hwlp_i'], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]], ['list', ['=', 'NS', 'VALID_L0']]]]]]]]], [['VALID_L0'], ['list', ['=', 'valid', ['bin', '1', '1']], ['ifelse', 'branch_i', ['=', 'instr_addr_int', 'branch_addr_i'], ['ifelse', 'hwlp_i', ['=', 'instr_addr_int', 'hwlp_addr_i'], ['=', 'instr_addr_int', 'prefetch_addr_i']]], ['if', ['|', ['|', 'branch_i', 'hwlp_i'], 'prefetch_i'], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]]]]], [['ABORTED_BRANCH'], ['list', ['ifelse', 'branch_i', ['=', 'instr_addr_int', 'branch_addr_i'], ['=', 'instr_addr_int', 'addr_q']], ['if', 'instr_rvalid_i', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]]]]], ['default', ['list', ['=', 'NS', 'EMPTY']]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'CS', 'EMPTY'], ['<=', 'L0_buffer', ['dig', 32, '0']], ['<=', 'addr_q', ['dig', 32, '0']]], ['list', ['<=', 'CS', 'NS'], ['if', 'instr_rvalid_i', ['list', ['<=', 'L0_buffer', 'instr_rdata_i']]], ['if', ['|', ['|', 'branch_i', 'hwlp_i'], 'prefetch_i'], ['<=', 'addr_q', 'instr_addr_int']]]]], 'always']
endmodule
