module riscv_mult
    parameter SHARED_DSP_MULT 1
    net dot_short_result ('wire', (31, 0))
    net mulh_ready ('reg', 0)
    net dot_op_c_i ('input', (31, 0))
    net short_mac_msb1 ('wire', 0)
    net short_mac_msb0 ('wire', 0)
    net short_signed ('wire', (1, 0))
    net short_subword_i ('input', 0)
    net dot_char_result ('wire', (31, 0))
    net enable_i ('input', 0)
    net result_o ('output reg', (31, 0))
    net int_op_a_msu ('wire', (31, 0))
    net mulh_shift_arith ('reg', 0)
    net mulh_clearcarry ('reg', 0)
    net int_op_b_msu ('wire', (31, 0))
    net short_result ('wire', (33, 0))
    net clk ('input', 0)
    net mulh_signed ('reg', (1, 0))
    net ready_o ('output', 0)
    net dot_op_b_i ('input', (31, 0))
    net short_signed_i ('input', (1, 0))
    net short_mac ('wire', (33, 0))
    net mulh_CS ('reg', (2, 0))
    net short_shift_arith ('wire', 0)
    net mulh_active ('reg', 0)
    net short_op_c ('wire', (32, 0))
    net short_op_b ('wire', (16, 0))
    net short_op_a ('wire', (16, 0))
    net short_subword ('wire', (1, 0))
    net rst_n ('input', 0)
    net short_mul ('wire', (33, 0))
    net op_c_i ('input', (31, 0))
    net dot_signed_i ('input', (1, 0))
    net mulh_save ('reg', 0)
    net short_imm ('wire', (4, 0))
    net mulh_carry_q ('reg', 0)
    net op_a_i ('input', (31, 0))
    net int_is_msu ('wire', 0)
    net dot_op_a_i ('input', (31, 0))
    net imm_i ('input', (4, 0))
    net op_b_i ('input', (31, 0))
    net mulh_subword ('reg', (1, 0))
    net short_round_tmp ('wire', (31, 0))
    net int_result ('wire', (31, 0))
    net short_round ('wire', (31, 0))
    net operator_i ('input', (2, 0))
    net mulh_NS ('reg', (2, 0))
    net mulh_imm ('reg', (4, 0))
    net ex_ready_i ('input', 0)
    net multicycle_o ('output reg', 0)
    assign ('short_round_tmp', ['<<', ['hex', '32', '00000001'], 'imm_i'], '', '')
    assign ('short_round', ['question', ['==', 'operator_i', 'MUL_IR'], ['curly', ['bin', '1', '0'], ['subbus', 'short_round_tmp', [31, 1]]], ['dig', 32, '0']], '', '')
    assign (['subbus', 'short_op_a', (15, 0)], ['question', ['subbit', 'short_subword', 0], ['subbus', 'op_a_i', [31, 16]], ['subbus', 'op_a_i', [15, 0]]], '', '')
    assign (['subbus', 'short_op_b', (15, 0)], ['question', ['subbit', 'short_subword', 1], ['subbus', 'op_b_i', [31, 16]], ['subbus', 'op_b_i', [15, 0]]], '', '')
    assign (['subbit', 'short_op_a', 16], ['&', ['subbit', 'short_signed', 0], ['subbit', 'short_op_a', 15]], '', '')
    assign (['subbit', 'short_op_b', 16], ['&', ['subbit', 'short_signed', 1], ['subbit', 'short_op_b', 15]], '', '')
    assign ('short_op_c', ['question', 'mulh_active', ['functioncall', '$signed', [['curly', 'mulh_carry_q', 'op_c_i']]], ['functioncall', '$signed', ['op_c_i']]], '', '')
    assign ('short_mul', ['*', ['functioncall', '$signed', ['short_op_a']], ['functioncall', '$signed', ['short_op_b']]], '', '')
    assign ('short_mac', ['+', ['+', ['functioncall', '$signed', ['short_op_c']], ['functioncall', '$signed', ['short_mul']]], ['functioncall', '$signed', ['short_round']]], '', '')
    assign ('short_result', ['>>>', ['functioncall', '$signed', [['curly', ['&', 'short_shift_arith', 'short_mac_msb1'], ['&', 'short_shift_arith', 'short_mac_msb0'], ['subbus', 'short_mac', (31, 0)]]]], 'short_imm'], '', '')
    assign ('short_imm', ['question', 'mulh_active', 'mulh_imm', 'imm_i'], '', '')
    assign ('short_subword', ['question', 'mulh_active', 'mulh_subword', ['curly', 'repeat', 2, ['curly', 'short_subword_i']]], '', '')
    assign ('short_signed', ['question', 'mulh_active', 'mulh_signed', 'short_signed_i'], '', '')
    assign ('short_shift_arith', ['question', 'mulh_active', 'mulh_shift_arith', ['subbit', 'short_signed_i', 0]], '', '')
    assign ('short_mac_msb1', ['question', 'mulh_active', ['subbit', 'short_mac', 33], ['subbit', 'short_mac', 31]], '', '')
    assign ('short_mac_msb0', ['question', 'mulh_active', ['subbit', 'short_mac', 32], ['subbit', 'short_mac', 31]], '', '')
    assign ('int_is_msu', ['==', 'operator_i', 'MUL_MSU32'], '', '')
    assign ('int_op_a_msu', ['^', 'op_a_i', ['curly', 'repeat', 32, ['curly', 'int_is_msu']]], '', '')
    assign ('int_op_b_msu', ['&', 'op_b_i', ['curly', 'repeat', 32, ['curly', 'int_is_msu']]], '', '')
    assign ('int_result', ['+', ['+', ['functioncall', '$signed', ['op_c_i']], ['functioncall', '$signed', ['int_op_b_msu']]], ['*', ['functioncall', '$signed', ['int_op_a_msu']], ['functioncall', '$signed', ['op_b_i']]]], '', '')
    assign ('ready_o', 'mulh_ready', '', '')
    always ['*', ['list', ['=', 'mulh_NS', 'mulh_CS'], ['=', 'mulh_imm', ['dig', '5', '0']], ['=', 'mulh_subword', ['bin', '2', '00']], ['=', 'mulh_signed', ['bin', '2', '00']], ['=', 'mulh_shift_arith', ['bin', '1', '0']], ['=', 'mulh_ready', ['bin', '1', '0']], ['=', 'mulh_active', ['bin', '1', '1']], ['=', 'mulh_save', ['bin', '1', '0']], ['=', 'mulh_clearcarry', ['bin', '1', '0']], ['=', 'multicycle_o', ['bin', '1', '0']], ['case', 'mulh_CS', [[['IDLE'], ['list', ['=', 'mulh_active', ['bin', '1', '0']], ['=', 'mulh_ready', ['bin', '1', '1']], ['=', 'mulh_save', ['bin', '1', '0']], ['if', ['&&', ['==', 'operator_i', 'MUL_H'], 'enable_i'], ['list', ['=', 'mulh_ready', ['bin', '1', '0']], ['=', 'mulh_NS', 'STEP0']]]]], [['STEP0'], ['list', ['=', 'multicycle_o', ['bin', '1', '1']], ['=', 'mulh_imm', ['dig', '5', '16']], ['=', 'mulh_active', ['bin', '1', '1']], ['=', 'mulh_save', ['bin', '1', '0']], ['=', 'mulh_NS', 'STEP1']]], [['STEP1'], ['list', ['=', 'multicycle_o', ['bin', '1', '1']], ['=', 'mulh_signed', ['curly', ['subbit', 'short_signed_i', 1], ['bin', '1', '0']]], ['=', 'mulh_subword', ['bin', '2', '10']], ['=', 'mulh_save', ['bin', '1', '1']], ['=', 'mulh_shift_arith', ['bin', '1', '1']], ['=', 'mulh_NS', 'STEP2']]], [['STEP2'], ['list', ['=', 'multicycle_o', ['bin', '1', '1']], ['=', 'mulh_signed', ['curly', ['bin', '1', '0'], ['subbit', 'short_signed_i', 0]]], ['=', 'mulh_subword', ['bin', '2', '01']], ['=', 'mulh_imm', ['dig', '5', '16']], ['=', 'mulh_save', ['bin', '1', '1']], ['=', 'mulh_clearcarry', ['bin', '1', '1']], ['=', 'mulh_shift_arith', ['bin', '1', '1']], ['=', 'mulh_NS', 'FINISH']]], [['FINISH'], ['list', ['=', 'mulh_signed', 'short_signed_i'], ['=', 'mulh_subword', ['bin', '2', '11']], ['=', 'mulh_ready', ['bin', '1', '1']], ['if', 'ex_ready_i', ['=', 'mulh_NS', 'IDLE']]]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'mulh_CS', 'IDLE'], ['<=', 'mulh_carry_q', ['bin', '1', '0']]], ['list', ['<=', 'mulh_CS', 'mulh_NS'], ['ifelse', 'mulh_save', ['<=', 'mulh_carry_q', ['&', ['~', 'mulh_clearcarry'], ['subbit', 'short_mac', 32]]], ['if', 'ex_ready_i', ['<=', 'mulh_carry_q', ['bin', '1', '0']]]]]]], 'always']
    always ['*', ['list', ['=', 'result_o', ['dig', 32, '0']], ['case', 'operator_i', [[['MUL_MAC32', 'MUL_MSU32'], ['=', 'result_o', ['subbus', 'int_result', [31, 0]]]], [['MUL_I', 'MUL_IR', 'MUL_H'], ['=', 'result_o', ['subbus', 'short_result', [31, 0]]]], [['MUL_DOT8'], ['=', 'result_o', ['subbus', 'dot_char_result', [31, 0]]]], [['MUL_DOT16'], ['=', 'result_o', ['subbus', 'dot_short_result', [31, 0]]]], ['default', ['empty_begin_end']]]]], 'always']
    generate ['ifelse', ['==', 'SHARED_DSP_MULT', 0], ['list', [('declare', 'wire', 'dot_char_op_a', ('packed', (3, 0), (8, 0)))], [('declare', 'wire', 'dot_char_op_b', ('packed', (3, 0), (8, 0)))], [('declare', 'wire', 'dot_char_mul', ('packed', (3, 0), (17, 0)))], [('declare', 'wire', 'dot_short_op_a', ('packed', (1, 0), (16, 0)))], [('declare', 'wire', 'dot_short_op_b', ('packed', (1, 0), (16, 0)))], [('declare', 'wire', 'dot_short_mul', ('packed', (1, 0), (33, 0)))], ['assigns', ['=', ['subbit', 'dot_char_op_a', 0], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 7]], ['subbus', 'dot_op_a_i', [7, 0]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_a', 1], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 15]], ['subbus', 'dot_op_a_i', [15, 8]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_a', 2], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 23]], ['subbus', 'dot_op_a_i', [23, 16]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_a', 3], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 31]], ['subbus', 'dot_op_a_i', [31, 24]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_b', 0], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 7]], ['subbus', 'dot_op_b_i', [7, 0]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_b', 1], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 15]], ['subbus', 'dot_op_b_i', [15, 8]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_b', 2], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 23]], ['subbus', 'dot_op_b_i', [23, 16]]]]], ['assigns', ['=', ['subbit', 'dot_char_op_b', 3], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 31]], ['subbus', 'dot_op_b_i', [31, 24]]]]], ['assigns', ['=', ['subbit', 'dot_char_mul', 0], ['*', ['functioncall', '$signed', [['subbit', 'dot_char_op_a', 0]]], ['functioncall', '$signed', [['subbit', 'dot_char_op_b', 0]]]]]], ['assigns', ['=', ['subbit', 'dot_char_mul', 1], ['*', ['functioncall', '$signed', [['subbit', 'dot_char_op_a', 1]]], ['functioncall', '$signed', [['subbit', 'dot_char_op_b', 1]]]]]], ['assigns', ['=', ['subbit', 'dot_char_mul', 2], ['*', ['functioncall', '$signed', [['subbit', 'dot_char_op_a', 2]]], ['functioncall', '$signed', [['subbit', 'dot_char_op_b', 2]]]]]], ['assigns', ['=', ['subbit', 'dot_char_mul', 3], ['*', ['functioncall', '$signed', [['subbit', 'dot_char_op_a', 3]]], ['functioncall', '$signed', [['subbit', 'dot_char_op_b', 3]]]]]], ['assigns', ['=', 'dot_char_result', ['+', ['+', ['+', ['+', ['functioncall', '$signed', [['subbit', 'dot_char_mul', 0]]], ['functioncall', '$signed', [['subbit', 'dot_char_mul', 1]]]], ['functioncall', '$signed', [['subbit', 'dot_char_mul', 2]]]], ['functioncall', '$signed', [['subbit', 'dot_char_mul', 3]]]], ['functioncall', '$signed', ['dot_op_c_i']]]]], ['assigns', ['=', ['subbit', 'dot_short_op_a', 0], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 15]], ['subbus', 'dot_op_a_i', [15, 0]]]]], ['assigns', ['=', ['subbit', 'dot_short_op_a', 1], ['curly', ['&', ['subbit', 'dot_signed_i', 1], ['subbit', 'dot_op_a_i', 31]], ['subbus', 'dot_op_a_i', [31, 16]]]]], ['assigns', ['=', ['subbit', 'dot_short_op_b', 0], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 15]], ['subbus', 'dot_op_b_i', [15, 0]]]]], ['assigns', ['=', ['subbit', 'dot_short_op_b', 1], ['curly', ['&', ['subbit', 'dot_signed_i', 0], ['subbit', 'dot_op_b_i', 31]], ['subbus', 'dot_op_b_i', [31, 16]]]]], ['assigns', ['=', ['subbit', 'dot_short_mul', 0], ['*', ['functioncall', '$signed', [['subbit', 'dot_short_op_a', 0]]], ['functioncall', '$signed', [['subbit', 'dot_short_op_b', 0]]]]]], ['assigns', ['=', ['subbit', 'dot_short_mul', 1], ['*', ['functioncall', '$signed', [['subbit', 'dot_short_op_a', 1]]], ['functioncall', '$signed', [['subbit', 'dot_short_op_b', 1]]]]]], ['assigns', ['=', 'dot_short_result', ['+', ['+', ['functioncall', '$signed', [['sub_slice', 'dot_short_mul', 0, (31, 0)]]], ['functioncall', '$signed', [['sub_slice', 'dot_short_mul', 1, (31, 0)]]]], ['functioncall', '$signed', ['dot_op_c_i']]]]]], ['list', ['assigns', ['=', 'dot_char_result', ['dig', 32, '0']]], ['assigns', ['=', 'dot_short_result', ['dig', 32, '0']]]]]
endmodule
