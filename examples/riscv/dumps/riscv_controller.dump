module riscv_controller
    parameter FPU 0
    net reg_d_alu_is_reg_a_i ('input', 0)
    net m_IE_i ('input', 0)
    net reg_d_wb_is_reg_c_i ('input', 0)
    net exc_kill_o ('output reg', 0)
    net perf_jr_stall_o ('output', 0)
    net first_fetch_o ('output reg', 0)
    net apu_en_i ('input', 0)
    net irq_ack_o ('output reg', 0)
    net u_IE_i ('input', 0)
    net operand_a_fw_mux_sel_o ('output reg', (1, 0))
    net jump_in_id_i ('input', (1, 0))
    net clk ('input', 0)
    net dbg_trap_o ('output reg', 0)
    net pipe_flush_i ('input', 0)
    net irq_enable_int ('reg', 0)
    net irq_sec_ctrl_i ('input', 0)
    net apu_write_dep_i ('input', 0)
    net boot_done ('reg', 0)
    net jr_stall_o ('output reg', 0)
    net operand_b_fw_mux_sel_o ('output reg', (1, 0))
    net dbg_stall_i ('input', 0)
    net apu_read_dep_i ('input', 0)
    net ebrk_insn_i ('input', 0)
    net data_misaligned_i ('input', 0)
    net pc_set_o ('output reg', 0)
    net mult_multicycle_i ('input', 0)
    net perf_jump_o ('output', 0)
    net data_req_ex_i ('input', 0)
    net reg_d_alu_is_reg_b_i ('input', 0)
    net load_stall_o ('output reg', 0)
    net csr_irq_sec_o ('output reg', 0)
    net csr_restore_uret_id_o ('output reg', 0)
    net csr_status_i ('input', 0)
    net apu_stall_o ('output', 0)
    net dbg_req_i ('input', 0)
    net jump_done ('reg', 0)
    net halt_if_o ('output reg', 0)
    net dbg_ack_o ('output reg', 0)
    net csr_restore_mret_id_o ('output reg', 0)
    net dbg_jump_req_i ('input', 0)
    net id_ready_i ('input', 0)
    net ctrl_fsm_ns ('reg', (4, 0))
    net jump_in_dec ('reg', 0)
    net csr_save_cause_o ('output reg', 0)
    net exc_pc_mux_o ('output reg', (1, 0))
    net boot_done_q ('reg', 0)
    net instr_valid_i ('input', 0)
    net regfile_we_ex_i ('input', 0)
    net instr_req_o ('output reg', 0)
    net halt_id_o ('output reg', 0)
    net instr_multicycle_i ('input', 0)
    net reg_d_alu_is_reg_c_i ('input', 0)
    net branch_in_id ('reg', 0)
    net regfile_waddr_ex_i ('input', (5, 0))
    net jump_in_dec_i ('input', (1, 0))
    net fetch_enable_i ('input', 0)
    net is_decoding_o ('output reg', 0)
    net pc_mux_o ('output reg', (2, 0))
    net reg_d_wb_is_reg_a_i ('input', 0)
    net misaligned_stall_o ('output', 0)
    net dbg_settings_i ('input', (['-', 'DBG_SETS_W', 1], 0))
    net rst_n ('input', 0)
    net regfile_we_wb_i ('input', 0)
    net csr_cause_o ('output reg', (5, 0))
    net irq_id_ctrl_i ('input', (4, 0))
    net reg_d_ex_is_reg_b_i ('input', 0)
    net illegal_insn_i ('input', 0)
    net mret_insn_i ('input', 0)
    net irq_id_o ('output reg', (4, 0))
    net reg_d_wb_is_reg_b_i ('input', 0)
    net trap_addr_mux_o ('output reg', 0)
    net deassert_we_o ('output reg', 0)
    net exc_ack_o ('output reg', 0)
    net uret_insn_i ('input', 0)
    net perf_ld_stall_o ('output', 0)
    net operand_c_fw_mux_sel_o ('output reg', (1, 0))
    net ecall_insn_i ('input', 0)
    net irq_req_ctrl_i ('input', 0)
    net regfile_alu_waddr_id_i ('input', (5, 0))
    net exc_cause_o ('output reg', (5, 0))
    net regfile_alu_we_fw_i ('input', 0)
    net data_load_event_i ('input', 0)
    net csr_save_if_o ('output reg', 0)
    net ctrl_fsm_cs ('reg', (4, 0))
    net csr_save_id_o ('output reg', 0)
    net branch_taken_ex_i ('input', 0)
    net reg_d_ex_is_reg_c_i ('input', 0)
    net jump_done_q ('reg', 0)
    net wb_ready_i ('input', 0)
    net ctrl_busy_o ('output reg', 0)
    net current_priv_lvl_i ('input', (1, 0))
    net reg_d_ex_is_reg_a_i ('input', 0)
    net ex_valid_i ('input', 0)
    assign ('misaligned_stall_o', 'data_misaligned_i', '', '')
    assign ('apu_stall_o', ['|', 'apu_read_dep_i', ['&', 'apu_write_dep_i', ['~', 'apu_en_i']]], '', '')
    assign ('perf_jump_o', ['||', ['==', 'jump_in_id_i', 'BRANCH_JAL'], ['==', 'jump_in_id_i', 'BRANCH_JALR']], '', '')
    assign ('perf_jr_stall_o', 'jr_stall_o', '', '')
    assign ('perf_ld_stall_o', 'load_stall_o', '', '')
    always ['*', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'exc_ack_o', ['bin', '1', '0']], ['=', 'exc_kill_o', ['bin', '1', '0']], ['=', 'csr_save_if_o', ['bin', '1', '0']], ['=', 'csr_save_id_o', ['bin', '1', '0']], ['=', 'csr_restore_mret_id_o', ['bin', '1', '0']], ['=', 'csr_restore_uret_id_o', ['bin', '1', '0']], ['=', 'csr_save_cause_o', ['bin', '1', '0']], ['=', 'exc_cause_o', ['dig', 32, '0']], ['=', 'exc_pc_mux_o', 'EXC_PC_IRQ'], ['=', 'trap_addr_mux_o', 'TRAP_MACHINE'], ['=', 'csr_cause_o', ['dig', 32, '0']], ['=', 'csr_irq_sec_o', ['bin', '1', '0']], ['=', 'pc_mux_o', 'PC_BOOT'], ['=', 'pc_set_o', ['bin', '1', '0']], ['=', 'jump_done', 'jump_done_q'], ['=', 'ctrl_fsm_ns', 'ctrl_fsm_cs'], ['=', 'ctrl_busy_o', ['bin', '1', '1']], ['=', 'first_fetch_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '0']], ['=', 'halt_id_o', ['bin', '1', '0']], ['=', 'dbg_ack_o', ['bin', '1', '0']], ['=', 'irq_ack_o', ['bin', '1', '0']], ['=', 'irq_id_o', 'irq_id_ctrl_i'], ['=', 'boot_done', ['bin', '1', '0']], ['=', 'jump_in_dec', ['||', ['==', 'jump_in_dec_i', 'BRANCH_JALR'], ['==', 'jump_in_dec_i', 'BRANCH_JAL']]], ['=', 'branch_in_id', ['==', 'jump_in_id_i', 'BRANCH_COND']], ['=', 'irq_enable_int', ['|', ['&', ['|', 'u_IE_i', 'irq_sec_ctrl_i'], ['==', 'current_priv_lvl_i', 'PRIV_LVL_U']], ['&', 'm_IE_i', ['==', 'current_priv_lvl_i', 'PRIV_LVL_M']]]], ['=', 'dbg_trap_o', ['bin', '1', '0']], ['case', 'ctrl_fsm_cs', [[['RESET'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['ifelse', 'fetch_enable_i', ['=', 'ctrl_fsm_ns', 'BOOT_SET'], ['if', 'dbg_req_i', ['list', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]]]], [['BOOT_SET'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'pc_mux_o', 'PC_BOOT'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'boot_done', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'FIRST_FETCH']]], [['WAIT_SLEEP'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'SLEEP']]], [['SLEEP'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'ctrl_busy_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']], ['ifelse', 'dbg_req_i', ['list', ['ifelse', ['||', 'fetch_enable_i', 'irq_req_ctrl_i'], ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL'], ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL_SLEEP']]], ['list', ['if', ['||', 'fetch_enable_i', 'irq_req_ctrl_i'], ['list', ['=', 'ctrl_fsm_ns', 'FIRST_FETCH']]]]]]], [['FIRST_FETCH'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'first_fetch_o', ['bin', '1', '1']], ['if', ['&&', 'id_ready_i', ['~', 'dbg_stall_i']], ['list', ['=', 'ctrl_fsm_ns', 'DECODE']]], ['if', ['&', 'irq_req_ctrl_i', 'irq_enable_int'], ['list', ['=', 'ctrl_fsm_ns', 'IRQ_TAKEN_IF'], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']]]]]], [['DECODE'], ['list', ['ifelse', 'branch_taken_ex_i', ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'pc_mux_o', 'PC_BRANCH'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']], ['if', 'dbg_req_i', ['list', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]], ['ifelse', 'instr_valid_i', ['list', ['=', 'is_decoding_o', ['bin', '1', '1']], ['case', ['bin', '1', '1'], [[[['&', 'irq_req_ctrl_i', 'irq_enable_int']], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'IRQ_FLUSH']]], ['default', ['list', ['=', 'exc_kill_o', ['question', 'irq_req_ctrl_i', ['bin', '1', '1'], ['bin', '1', '0']]], ['case', ['bin', '1', '1'], [[['jump_in_dec'], ['list', ['=', 'pc_mux_o', 'PC_JUMP'], ['if', ['&&', ['~', 'jr_stall_o'], ['~', 'jump_done_q']], ['list', ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'jump_done', ['bin', '1', '1']]]], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [[['|', ['|', ['|', ['|', ['|', 'mret_insn_i', 'uret_insn_i'], 'ecall_insn_i'], 'pipe_flush_i'], 'ebrk_insn_i'], 'illegal_insn_i']], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'FLUSH_EX']]], [['csr_status_i'], ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', ['question', 'id_ready_i', 'FLUSH_EX', 'DECODE']]]], [['data_load_event_i'], ['list', ['=', 'ctrl_fsm_ns', ['question', 'id_ready_i', 'ELW_EXE', 'DECODE']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], ['default', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]]], ['if', 'dbg_req_i', ['list', ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'id_ready_i', ['list', ['case', ['bin', '1', '1'], [[['branch_in_id'], ['=', 'ctrl_fsm_ns', 'DBG_WAIT_BRANCH']], [[['|', ['|', ['|', ['|', ['|', ['|', ['|', 'mret_insn_i', 'uret_insn_i'], 'ecall_insn_i'], 'pipe_flush_i'], 'ebrk_insn_i'], 'illegal_insn_i'], 'csr_status_i'], 'instr_multicycle_i']], ['=', 'ctrl_fsm_ns', 'FLUSH_EX']], ['default', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]]]]]]]]]]]], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']]]]]]], [['DBG_WAIT_BRANCH'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'branch_taken_ex_i', ['list', ['=', 'pc_mux_o', 'PC_BRANCH'], ['=', 'pc_set_o', ['bin', '1', '1']]]], ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL']]], [['DBG_SIGNAL'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'dbg_ack_o', ['bin', '1', '1']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], [['DBG_SIGNAL_SLEEP'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'dbg_ack_o', ['bin', '1', '1']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT_SLEEP']]], [['DBG_SIGNAL_ELW'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'dbg_ack_o', ['bin', '1', '1']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT_ELW']]], [['DBG_WAIT_ELW'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'dbg_jump_req_i', ['list', ['=', 'pc_mux_o', 'PC_DBG_NPC'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], ['if', ['~', 'dbg_stall_i'], ['list', ['=', 'ctrl_fsm_ns', 'ELW_EXE']]]]], [['DBG_WAIT_SLEEP'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'dbg_jump_req_i', ['list', ['=', 'pc_mux_o', 'PC_DBG_NPC'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], ['if', ['~', 'dbg_stall_i'], ['list', ['=', 'ctrl_fsm_ns', 'SLEEP']]]]], [['DBG_WAIT'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['if', 'dbg_jump_req_i', ['list', ['=', 'pc_mux_o', 'PC_DBG_NPC'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DBG_WAIT']]], ['if', ['~', 'dbg_stall_i'], ['list', ['=', 'ctrl_fsm_ns', ['question', 'boot_done_q', 'DECODE', 'RESET']]]]]], [['FLUSH_EX'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['if', 'ex_valid_i', ['=', 'ctrl_fsm_ns', 'FLUSH_WB']]]], [['IRQ_FLUSH'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['ifelse', ['&', 'irq_req_ctrl_i', 'irq_enable_int'], ['list', ['=', 'ctrl_fsm_ns', 'IRQ_TAKEN_ID']], ['list', ['=', 'ctrl_fsm_ns', 'DECODE']]]]], [['ELW_EXE'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['ifelse', 'id_ready_i', ['=', 'ctrl_fsm_ns', 'IRQ_FLUSH'], ['ifelse', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL_ELW'], ['=', 'ctrl_fsm_ns', 'ELW_EXE']]]]], [['IRQ_TAKEN_ID'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'exc_pc_mux_o', 'EXC_PC_IRQ'], ['=', 'exc_cause_o', ['curly', ['bin', '1', '0'], 'irq_id_ctrl_i']], ['=', 'csr_irq_sec_o', 'irq_sec_ctrl_i'], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'csr_cause_o', ['curly', ['bin', '1', '1'], 'irq_id_ctrl_i']], ['=', 'csr_save_id_o', ['bin', '1', '1']], ['ifelse', 'irq_sec_ctrl_i', ['=', 'trap_addr_mux_o', 'TRAP_MACHINE'], ['=', 'trap_addr_mux_o', ['question', ['==', 'current_priv_lvl_i', 'PRIV_LVL_U'], 'TRAP_USER', 'TRAP_MACHINE']]], ['=', 'irq_ack_o', ['bin', '1', '1']], ['=', 'exc_ack_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DECODE']]], [['IRQ_TAKEN_IF'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'exc_pc_mux_o', 'EXC_PC_IRQ'], ['=', 'exc_cause_o', ['curly', ['bin', '1', '0'], 'irq_id_ctrl_i']], ['=', 'csr_irq_sec_o', 'irq_sec_ctrl_i'], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'csr_cause_o', ['curly', ['bin', '1', '1'], 'irq_id_ctrl_i']], ['=', 'csr_save_if_o', ['bin', '1', '1']], ['ifelse', 'irq_sec_ctrl_i', ['=', 'trap_addr_mux_o', 'TRAP_MACHINE'], ['=', 'trap_addr_mux_o', ['question', ['==', 'current_priv_lvl_i', 'PRIV_LVL_U'], 'TRAP_USER', 'TRAP_MACHINE']]], ['=', 'irq_ack_o', ['bin', '1', '1']], ['=', 'exc_ack_o', ['bin', '1', '1']], ['=', 'ctrl_fsm_ns', 'DECODE']]], [['FLUSH_WB'], ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'halt_if_o', ['bin', '1', '1']], ['=', 'halt_id_o', ['bin', '1', '1']], ['case', ['bin', '1', '1'], [[['ecall_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_save_id_o', ['bin', '1', '1']], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'trap_addr_mux_o', 'TRAP_MACHINE'], ['=', 'exc_pc_mux_o', 'EXC_PC_ECALL'], ['=', 'exc_cause_o', 'EXC_CAUSE_ECALL_MMODE'], ['=', 'csr_cause_o', ['question', ['==', 'current_priv_lvl_i', 'PRIV_LVL_U'], 'EXC_CAUSE_ECALL_UMODE', 'EXC_CAUSE_ECALL_MMODE']], ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_ECALL'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]]], [['illegal_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_EXCEPTION'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_save_id_o', ['bin', '1', '1']], ['=', 'csr_save_cause_o', ['bin', '1', '1']], ['=', 'trap_addr_mux_o', 'TRAP_MACHINE'], ['=', 'exc_pc_mux_o', 'EXC_PC_ILLINSN'], ['=', 'exc_cause_o', 'EXC_CAUSE_ILLEGAL_INSN'], ['=', 'csr_cause_o', 'EXC_CAUSE_ILLEGAL_INSN'], ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_EILL'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]]], [['mret_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_ERET'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_restore_mret_id_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [['uret_insn_i'], ['list', ['=', 'pc_mux_o', 'PC_ERET'], ['=', 'pc_set_o', ['bin', '1', '1']], ['=', 'csr_restore_uret_id_o', ['bin', '1', '1']], ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [['ebrk_insn_i'], ['list', ['=', 'dbg_trap_o', ['|', ['subbit', 'dbg_settings_i', 'DBG_SETS_EBRK'], ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]], ['=', 'exc_cause_o', 'EXC_CAUSE_BREAKPOINT']]], [['csr_status_i'], ['list', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], [['pipe_flush_i'], ['list', ['=', 'dbg_trap_o', ['subbit', 'dbg_settings_i', 'DBG_SETS_SSTE']]]], ['default', ['empty_begin_end']]]], ['ifelse', 'fetch_enable_i', ['list', ['ifelse', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL'], ['=', 'ctrl_fsm_ns', 'DECODE']]], ['list', ['ifelse', 'dbg_req_i', ['=', 'ctrl_fsm_ns', 'DBG_SIGNAL_SLEEP'], ['=', 'ctrl_fsm_ns', ['question', ['|', ['|', 'uret_insn_i', 'mret_insn_i'], 'pipe_flush_i'], 'WAIT_SLEEP', 'DECODE']]]]]]], ['default', ['list', ['=', 'is_decoding_o', ['bin', '1', '0']], ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'ctrl_fsm_ns', 'RESET']]]]]], 'always']
    always ['*', ['list', ['=', 'load_stall_o', ['bin', '1', '0']], ['=', 'jr_stall_o', ['bin', '1', '0']], ['=', 'deassert_we_o', ['bin', '1', '0']], ['if', ['~', 'is_decoding_o'], ['=', 'deassert_we_o', ['bin', '1', '1']]], ['if', 'illegal_insn_i', ['=', 'deassert_we_o', ['bin', '1', '1']]], ['if', ['&&', ['&&', ['&&', 'data_req_ex_i', ['||', 'regfile_we_ex_i', ['~', 'wb_ready_i']]], 'regfile_we_wb_i'], ['||', ['||', ['||', 'reg_d_ex_is_reg_a_i', 'reg_d_ex_is_reg_b_i'], 'reg_d_ex_is_reg_c_i'], ['==', 'regfile_waddr_ex_i', 'regfile_alu_waddr_id_i']]], ['list', ['=', 'deassert_we_o', ['bin', '1', '1']], ['=', 'load_stall_o', ['bin', '1', '1']]]], ['if', ['&&', ['==', 'jump_in_dec_i', 'BRANCH_JALR'], ['||', ['||', ['&&', 'regfile_we_wb_i', 'reg_d_wb_is_reg_a_i'], ['&&', 'regfile_we_ex_i', 'reg_d_ex_is_reg_a_i']], ['&&', 'regfile_alu_we_fw_i', 'reg_d_alu_is_reg_a_i']]], ['list', ['=', 'jr_stall_o', ['bin', '1', '1']], ['=', 'deassert_we_o', ['bin', '1', '1']]]]], 'always']
    always ['*', ['list', ['=', 'operand_a_fw_mux_sel_o', 'SEL_REGFILE'], ['=', 'operand_b_fw_mux_sel_o', 'SEL_REGFILE'], ['=', 'operand_c_fw_mux_sel_o', 'SEL_REGFILE'], ['if', 'regfile_we_wb_i', ['list', ['if', 'reg_d_wb_is_reg_a_i', ['=', 'operand_a_fw_mux_sel_o', 'SEL_FW_WB']], ['if', 'reg_d_wb_is_reg_b_i', ['=', 'operand_b_fw_mux_sel_o', 'SEL_FW_WB']], ['if', 'reg_d_wb_is_reg_c_i', ['=', 'operand_c_fw_mux_sel_o', 'SEL_FW_WB']]]], ['if', 'regfile_alu_we_fw_i', ['list', ['if', 'reg_d_alu_is_reg_a_i', ['=', 'operand_a_fw_mux_sel_o', 'SEL_FW_EX']], ['if', 'reg_d_alu_is_reg_b_i', ['=', 'operand_b_fw_mux_sel_o', 'SEL_FW_EX']], ['if', 'reg_d_alu_is_reg_c_i', ['=', 'operand_c_fw_mux_sel_o', 'SEL_FW_EX']]]], ['ifelse', 'data_misaligned_i', ['list', ['=', 'operand_a_fw_mux_sel_o', 'SEL_FW_EX'], ['=', 'operand_b_fw_mux_sel_o', 'SEL_REGFILE']], ['if', 'mult_multicycle_i', ['list', ['=', 'operand_c_fw_mux_sel_o', 'SEL_FW_EX']]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'UPDATE_REGS', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'ctrl_fsm_cs', 'RESET'], ['<=', 'jump_done_q', ['bin', '1', '0']], ['<=', 'boot_done_q', ['bin', '1', '0']]], ['list', ['<=', 'ctrl_fsm_cs', 'ctrl_fsm_ns'], ['<=', 'boot_done_q', ['|', 'boot_done', ['&', ['~', 'boot_done'], 'boot_done_q']]], ['<=', 'jump_done_q', ['&', 'jump_done', ['~', 'id_ready_i']]]]]]], 'always']
endmodule
