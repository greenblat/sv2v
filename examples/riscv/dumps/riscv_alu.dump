module riscv_alu
    parameter FPU 0
    parameter SHARED_INT_DIV 0
    net div_valid ('wire', 0)
    net result_minmax ('wire', (31, 0))
    net shift_amt ('wire', (31, 0))
    net fclass_result ('wire', (31, 0))
    net comparison_result_o ('output', 0)
    net shift_amt_int ('wire', (31, 0))
    net bset_result ('wire', (31, 0))
    net minmax_is_fp_special ('wire', 0)
    net bmask_b_i ('input', (4, 0))
    net imm_vec_ext_i ('input', (1, 0))
    net do_min ('wire', 0)
    net fl1_result ('wire', (4, 0))
    net shift_left ('wire', 0)
    net adder_result ('wire', (31, 0))
    net bmask_first ('wire', (31, 0))
    net ff_input ('reg', (31, 0))
    net operator_i ('input', (['-', 'ALU_OP_WIDTH', 1], 0))
    net ex_ready_i ('input', 0)
    net bclr_result ('wire', (31, 0))
    net shift_amt_left ('reg', (31, 0))
    net is_equal ('reg', (3, 0))
    net shuffle_through ('reg', (3, 0))
    net pack_result ('wire', (31, 0))
    net adder_in_a ('reg', (35, 0))
    net adder_in_b ('reg', (35, 0))
    net shuffle_r0 ('wire', (31, 0))
    net shuffle_r1 ('wire', (31, 0))
    net ready_o ('output', 0)
    net bmask_a_i ('input', (4, 0))
    net shift_right_result ('reg', (31, 0))
    net bmask_inv ('wire', (31, 0))
    net shuffle_r0_in ('wire', (31, 0))
    net bextins_and ('wire', (31, 0))
    net extract_sign ('wire', 0)
    net ff_no_one ('wire', 0)
    net fp_canonical_nan ('wire', (31, 0))
    net shuffle_byte_sel ('reg', ('packed', (3, 0), (1, 0)))
    net clk ('input', 0)
    net shift_op_a_32 ('wire', (63, 0))
    net shift_left_result ('wire', (31, 0))
    net shift_amt_norm ('wire', (31, 0))
    net shift_arithmetic ('wire', 0)
    net clip_result ('wire', (31, 0))
    net adder_round_value ('wire', (31, 0))
    net f_is_nan ('reg', (3, 0))
    net bextins_result ('wire', (31, 0))
    net shift_result ('wire', (31, 0))
    net shuffle_reg1_sel ('reg', (1, 0))
    net operand_a_neg_rev ('wire', (31, 0))
    net ff1_result ('wire', (4, 0))
    net operand_c_i ('input', (31, 0))
    net extract_is_signed ('wire', 0)
    net adder_result_expanded ('wire', (36, 0))
    net result_div ('wire', (31, 0))
    net vector_mode_i ('input', (1, 0))
    net rst_n ('input', 0)
    net is_greater_vec ('wire', (3, 0))
    net div_shift ('wire', (5, 0))
    net adder_op_b_negate ('wire', 0)
    net clb_result ('wire', (5, 0))
    net operand_a_i ('input', (31, 0))
    net f_sign_inject_result ('reg', (31, 0))
    net sel_minmax ('wire', (3, 0))
    net clip_is_lower_u ('wire', 0)
    net cnt_result ('wire', (5, 0))
    net operand_a_neg ('wire', (31, 0))
    net shuffle_reg0_sel ('reg', (1, 0))
    net is_greater ('reg', (3, 0))
    net bitop_result ('reg', (5, 0))
    net f_is_snan ('wire', 0)
    net shift_use_round ('wire', 0)
    net shuffle_result ('wire', (31, 0))
    net is_equal_vec ('wire', (3, 0))
    net adder_round_result ('wire', (31, 0))
    net div_ready ('wire', 0)
    net enable_i ('input', 0)
    net result_o ('output reg', (31, 0))
    net cmp_result ('reg', (3, 0))
    net minmax_b ('wire', (31, 0))
    net f_is_qnan ('wire', 0)
    net bmask ('wire', (31, 0))
    net operand_a_rev ('wire', (31, 0))
    net operand_b_i ('input', (31, 0))
    net shuffle_reg_sel ('reg', (3, 0))
    net cmp_signed ('reg', (3, 0))
    net f_is_greater ('wire', (3, 0))
    net shift_op_a ('wire', (31, 0))
    net operand_b_neg ('wire', (31, 0))
    net shuffle_r1_in ('wire', (31, 0))
    net clip_is_lower_neg ('wire', 0)
    net adder_op_a ('wire', (31, 0))
    net adder_op_b ('wire', (31, 0))
    assign ('operand_a_neg', ['~', 'operand_a_i'], '', '')
    assign ('operand_b_neg', ['~', 'operand_b_i'], '', '')
    assign ('adder_op_b_negate', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_SUB'], ['==', 'operator_i', 'ALU_SUBR']], ['==', 'operator_i', 'ALU_SUBU']], ['==', 'operator_i', 'ALU_SUBUR']], '', '')
    assign ('adder_op_a', ['question', ['==', 'operator_i', 'ALU_ABS'], 'operand_a_neg', 'operand_a_i'], '', '')
    assign ('adder_op_b', ['question', 'adder_op_b_negate', 'operand_b_neg', 'operand_b_i'], '', '')
    assign ('adder_result_expanded', ['+', ['functioncall', '$signed', ['adder_in_a']], ['functioncall', '$signed', ['adder_in_b']]], '', '')
    assign ('adder_result', ['curly', ['subbus', 'adder_result_expanded', [35, 28]], ['subbus', 'adder_result_expanded', [26, 19]], ['subbus', 'adder_result_expanded', [17, 10]], ['subbus', 'adder_result_expanded', [8, 1]]], '', '')
    assign ('adder_round_value', ['question', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_ADDR'], ['==', 'operator_i', 'ALU_SUBR']], ['==', 'operator_i', 'ALU_ADDUR']], ['==', 'operator_i', 'ALU_SUBUR']], ['curly', ['bin', '1', '0'], ['subbus', 'bmask', [31, 1]]], ['dig', 32, '0']], '', '')
    assign ('adder_round_result', ['+', 'adder_result', 'adder_round_value'], '', '')
    assign ('shift_amt', ['question', 'div_valid', 'div_shift', 'operand_b_i'], '', '')
    assign ('shift_left', ['||', ['||', ['||', ['||', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_SLL'], ['==', 'operator_i', 'ALU_BINS']], ['==', 'operator_i', 'ALU_FL1']], ['==', 'operator_i', 'ALU_CLB']], ['==', 'operator_i', 'ALU_DIV']], ['==', 'operator_i', 'ALU_DIVU']], ['==', 'operator_i', 'ALU_REM']], ['==', 'operator_i', 'ALU_REMU']], '', '')
    assign ('shift_use_round', ['||', ['||', ['||', ['||', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_ADD'], ['==', 'operator_i', 'ALU_SUB']], ['==', 'operator_i', 'ALU_ADDR']], ['==', 'operator_i', 'ALU_SUBR']], ['==', 'operator_i', 'ALU_ADDU']], ['==', 'operator_i', 'ALU_SUBU']], ['==', 'operator_i', 'ALU_ADDUR']], ['==', 'operator_i', 'ALU_SUBUR']], '', '')
    assign ('shift_arithmetic', ['||', ['||', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_SRA'], ['==', 'operator_i', 'ALU_BEXT']], ['==', 'operator_i', 'ALU_ADD']], ['==', 'operator_i', 'ALU_SUB']], ['==', 'operator_i', 'ALU_ADDR']], ['==', 'operator_i', 'ALU_SUBR']], '', '')
    assign ('shift_op_a', ['question', 'shift_left', 'operand_a_rev', ['question', 'shift_use_round', 'adder_round_result', 'operand_a_i']], '', '')
    assign ('shift_amt_int', ['question', 'shift_use_round', 'shift_amt_norm', ['question', 'shift_left', 'shift_amt_left', 'shift_amt']], '', '')
    assign ('shift_amt_norm', ['curly', 'repeat', 4, ['curly', ['bin', '3', '000'], 'bmask_b_i']], '', '')
    assign ('shift_op_a_32', ['question', ['==', 'operator_i', 'ALU_ROR'], ['curly', 'shift_op_a', 'shift_op_a'], ['functioncall', '$signed', [['curly', ['curly', 'repeat', 32, ['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 31]]]], 'shift_op_a']]]], '', '')
    assign ('shift_result', ['question', 'shift_left', 'shift_left_result', 'shift_right_result'], '', '')
    assign (['subbus', 'f_is_greater', (3, 0)], ['curly', 'repeat', 4, ['curly', ['^', ['subbit', 'is_greater', 3], ['&', ['&', ['subbit', 'operand_a_i', 31], ['subbit', 'operand_b_i', 31]], ['!', ['subbit', 'is_equal', 3]]]]]], '', '')
    assign ('comparison_result_o', ['subbit', 'cmp_result', 3], '', '')
    assign ('minmax_b', ['question', ['==', 'operator_i', 'ALU_ABS'], 'adder_result', 'operand_b_i'], '', '')
    assign ('do_min', ['||', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_MIN'], ['==', 'operator_i', 'ALU_MINU']], ['==', 'operator_i', 'ALU_CLIP']], ['==', 'operator_i', 'ALU_CLIPU']], ['==', 'operator_i', 'ALU_FMIN']], '', '')
    assign (['subbus', 'sel_minmax', (3, 0)], ['^', ['question', ['||', ['==', 'operator_i', 'ALU_FMIN'], ['==', 'operator_i', 'ALU_FMAX']], 'f_is_greater', 'is_greater'], ['curly', 'repeat', 4, ['curly', 'do_min']]], '', '')
    assign (['subbus', 'result_minmax', (31, 24)], ['question', ['subbit', 'sel_minmax', 3], ['subbus', 'operand_a_i', [31, 24]], ['subbus', 'minmax_b', [31, 24]]], '', '')
    assign (['subbus', 'result_minmax', (23, 16)], ['question', ['subbit', 'sel_minmax', 2], ['subbus', 'operand_a_i', [23, 16]], ['subbus', 'minmax_b', [23, 16]]], '', '')
    assign (['subbus', 'result_minmax', (15, 8)], ['question', ['subbit', 'sel_minmax', 1], ['subbus', 'operand_a_i', [15, 8]], ['subbus', 'minmax_b', [15, 8]]], '', '')
    assign (['subbus', 'result_minmax', (7, 0)], ['question', ['subbit', 'sel_minmax', 0], ['subbus', 'operand_a_i', [7, 0]], ['subbus', 'minmax_b', [7, 0]]], '', '')
    assign ('clip_is_lower_neg', ['subbit', 'adder_result_expanded', 36], '', '')
    assign ('clip_is_lower_u', ['&&', ['==', 'operator_i', 'ALU_CLIPU'], ['subbit', 'operand_a_i', 31]], '', '')
    assign ('clip_result', ['question', 'is_greater', 'result_minmax', ['question', 'clip_is_lower_u', ['dig', 32, '0'], ['question', 'clip_is_lower_neg', 'operand_b_neg', 'result_minmax']]], '', '')
    assign ('shuffle_r0_in', ['question', ['subbit', 'shuffle_reg0_sel', 1], 'operand_a_i', ['question', ['subbit', 'shuffle_reg0_sel', 0], ['curly', 'repeat', 2, ['curly', ['subbus', 'operand_a_i', [15, 0]]]], ['curly', 'repeat', 4, ['curly', ['subbus', 'operand_a_i', [7, 0]]]]]], '', '')
    assign ('shuffle_r1_in', ['question', ['subbit', 'shuffle_reg1_sel', 1], ['curly', ['curly', 'repeat', 8, ['curly', ['subbit', 'operand_a_i', 31]]], ['curly', 'repeat', 8, ['curly', ['subbit', 'operand_a_i', 23]]], ['curly', 'repeat', 8, ['curly', ['subbit', 'operand_a_i', 15]]], ['curly', 'repeat', 8, ['curly', ['subbit', 'operand_a_i', 7]]]], ['question', ['subbit', 'shuffle_reg1_sel', 0], 'operand_c_i', 'operand_b_i']], '', '')
    assign (['subbus', 'shuffle_r0', (31, 24)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 0], ['subbus', 'shuffle_r0_in', [31, 24]], ['subbus', 'shuffle_r0_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 0], ['subbus', 'shuffle_r0_in', [15, 8]], ['subbus', 'shuffle_r0_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r0', (23, 16)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 0], ['subbus', 'shuffle_r0_in', [31, 24]], ['subbus', 'shuffle_r0_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 0], ['subbus', 'shuffle_r0_in', [15, 8]], ['subbus', 'shuffle_r0_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r0', (15, 8)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 0], ['subbus', 'shuffle_r0_in', [31, 24]], ['subbus', 'shuffle_r0_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 0], ['subbus', 'shuffle_r0_in', [15, 8]], ['subbus', 'shuffle_r0_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r0', (7, 0)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 0], ['subbus', 'shuffle_r0_in', [31, 24]], ['subbus', 'shuffle_r0_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 0], ['subbus', 'shuffle_r0_in', [15, 8]], ['subbus', 'shuffle_r0_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r1', (31, 24)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 0], ['subbus', 'shuffle_r1_in', [31, 24]], ['subbus', 'shuffle_r1_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 3, 0], ['subbus', 'shuffle_r1_in', [15, 8]], ['subbus', 'shuffle_r1_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r1', (23, 16)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 0], ['subbus', 'shuffle_r1_in', [31, 24]], ['subbus', 'shuffle_r1_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 2, 0], ['subbus', 'shuffle_r1_in', [15, 8]], ['subbus', 'shuffle_r1_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r1', (15, 8)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 0], ['subbus', 'shuffle_r1_in', [31, 24]], ['subbus', 'shuffle_r1_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 1, 0], ['subbus', 'shuffle_r1_in', [15, 8]], ['subbus', 'shuffle_r1_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_r1', (7, 0)], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 1], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 0], ['subbus', 'shuffle_r1_in', [31, 24]], ['subbus', 'shuffle_r1_in', [23, 16]]], ['question', ['sub_slicebit', 'shuffle_byte_sel', 0, 0], ['subbus', 'shuffle_r1_in', [15, 8]], ['subbus', 'shuffle_r1_in', [7, 0]]]], '', '')
    assign (['subbus', 'shuffle_result', (31, 24)], ['question', ['subbit', 'shuffle_reg_sel', 3], ['subbus', 'shuffle_r1', [31, 24]], ['subbus', 'shuffle_r0', [31, 24]]], '', '')
    assign (['subbus', 'shuffle_result', (23, 16)], ['question', ['subbit', 'shuffle_reg_sel', 2], ['subbus', 'shuffle_r1', [23, 16]], ['subbus', 'shuffle_r0', [23, 16]]], '', '')
    assign (['subbus', 'shuffle_result', (15, 8)], ['question', ['subbit', 'shuffle_reg_sel', 1], ['subbus', 'shuffle_r1', [15, 8]], ['subbus', 'shuffle_r0', [15, 8]]], '', '')
    assign (['subbus', 'shuffle_result', (7, 0)], ['question', ['subbit', 'shuffle_reg_sel', 0], ['subbus', 'shuffle_r1', [7, 0]], ['subbus', 'shuffle_r0', [7, 0]]], '', '')
    assign (['subbus', 'pack_result', (31, 24)], ['question', ['subbit', 'shuffle_through', 3], ['subbus', 'shuffle_result', [31, 24]], ['subbus', 'operand_c_i', [31, 24]]], '', '')
    assign (['subbus', 'pack_result', (23, 16)], ['question', ['subbit', 'shuffle_through', 2], ['subbus', 'shuffle_result', [23, 16]], ['subbus', 'operand_c_i', [23, 16]]], '', '')
    assign (['subbus', 'pack_result', (15, 8)], ['question', ['subbit', 'shuffle_through', 1], ['subbus', 'shuffle_result', [15, 8]], ['subbus', 'operand_c_i', [15, 8]]], '', '')
    assign (['subbus', 'pack_result', (7, 0)], ['question', ['subbit', 'shuffle_through', 0], ['subbus', 'shuffle_result', [7, 0]], ['subbus', 'operand_c_i', [7, 0]]], '', '')
    assign ('fl1_result', ['-', ['dig', '5', '31'], 'ff1_result'], '', '')
    assign ('clb_result', ['-', 'ff1_result', ['dig', '5', '1']], '', '')
    assign ('bmask_first', ['<<', ['curly', ['hex', '32', 'FFFFFFFE']], 'bmask_a_i'], '', '')
    assign ('bmask', ['<<', ['~', 'bmask_first'], 'bmask_b_i'], '', '')
    assign ('bmask_inv', ['~', 'bmask'], '', '')
    assign ('bextins_and', ['question', ['==', 'operator_i', 'ALU_BINS'], 'operand_c_i', ['curly', 'repeat', 32, ['curly', 'extract_sign']]], '', '')
    assign ('extract_is_signed', ['==', 'operator_i', 'ALU_BEXT'], '', '')
    assign ('extract_sign', ['&', 'extract_is_signed', ['subbit', 'shift_result', 'bmask_a_i']], '', '')
    assign ('bextins_result', ['|', ['&', 'bmask', 'shift_result'], ['&', 'bextins_and', 'bmask_inv']], '', '')
    assign ('bclr_result', ['&', 'operand_a_i', 'bmask_inv'], '', '')
    assign ('bset_result', ['|', 'operand_a_i', 'bmask'], '', '')
    assign ('ready_o', 'div_ready', '', '')
    always ['*', ['list', ['=', ['subbit', 'adder_in_a', 0], ['bin', '1', '1']], ['=', ['subbus', 'adder_in_a', (8, 1)], ['subbus', 'adder_op_a', [7, 0]]], ['=', ['subbit', 'adder_in_a', 9], ['bin', '1', '1']], ['=', ['subbus', 'adder_in_a', (17, 10)], ['subbus', 'adder_op_a', [15, 8]]], ['=', ['subbit', 'adder_in_a', 18], ['bin', '1', '1']], ['=', ['subbus', 'adder_in_a', (26, 19)], ['subbus', 'adder_op_a', [23, 16]]], ['=', ['subbit', 'adder_in_a', 27], ['bin', '1', '1']], ['=', ['subbus', 'adder_in_a', (35, 28)], ['subbus', 'adder_op_a', [31, 24]]], ['=', ['subbit', 'adder_in_b', 0], ['bin', '1', '0']], ['=', ['subbus', 'adder_in_b', (8, 1)], ['subbus', 'adder_op_b', [7, 0]]], ['=', ['subbit', 'adder_in_b', 9], ['bin', '1', '0']], ['=', ['subbus', 'adder_in_b', (17, 10)], ['subbus', 'adder_op_b', [15, 8]]], ['=', ['subbit', 'adder_in_b', 18], ['bin', '1', '0']], ['=', ['subbus', 'adder_in_b', (26, 19)], ['subbus', 'adder_op_b', [23, 16]]], ['=', ['subbit', 'adder_in_b', 27], ['bin', '1', '0']], ['=', ['subbus', 'adder_in_b', (35, 28)], ['subbus', 'adder_op_b', [31, 24]]], ['ifelse', ['||', 'adder_op_b_negate', ['||', ['==', 'operator_i', 'ALU_ABS'], ['==', 'operator_i', 'ALU_CLIP']]], ['list', ['=', ['subbit', 'adder_in_b', 0], ['bin', '1', '1']], ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbit', 'adder_in_b', 18], ['bin', '1', '1']]]], [['VEC_MODE8'], ['list', ['=', ['subbit', 'adder_in_b', 9], ['bin', '1', '1']], ['=', ['subbit', 'adder_in_b', 18], ['bin', '1', '1']], ['=', ['subbit', 'adder_in_b', 27], ['bin', '1', '1']]]]]]], ['list', ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbit', 'adder_in_a', 18], ['bin', '1', '0']]]], [['VEC_MODE8'], ['list', ['=', ['subbit', 'adder_in_a', 9], ['bin', '1', '0']], ['=', ['subbit', 'adder_in_a', 18], ['bin', '1', '0']], ['=', ['subbit', 'adder_in_a', 27], ['bin', '1', '0']]]]]]]]], 'always']
    always ['*', ['list', ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbus', 'shift_amt_left', (15, 0)], ['subbus', 'shift_amt', [31, 16]]], ['=', ['subbus', 'shift_amt_left', (31, 16)], ['subbus', 'shift_amt', [15, 0]]]]], [['VEC_MODE8'], ['list', ['=', ['subbus', 'shift_amt_left', (7, 0)], ['subbus', 'shift_amt', [31, 24]]], ['=', ['subbus', 'shift_amt_left', (15, 8)], ['subbus', 'shift_amt', [23, 16]]], ['=', ['subbus', 'shift_amt_left', (23, 16)], ['subbus', 'shift_amt', [15, 8]]], ['=', ['subbus', 'shift_amt_left', (31, 24)], ['subbus', 'shift_amt', [7, 0]]]]], ['default', ['list', ['=', ['subbus', 'shift_amt_left', (31, 0)], ['subbus', 'shift_amt', [31, 0]]]]]]]], 'always']
    always ['*', ['list', ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbus', 'shift_right_result', (31, 16)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 31]], ['subbus', 'shift_op_a', (31, 16)]]]], ['subbus', 'shift_amt_int', [19, 16]]]], ['=', ['subbus', 'shift_right_result', (15, 0)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 15]], ['subbus', 'shift_op_a', (15, 0)]]]], ['subbus', 'shift_amt_int', [3, 0]]]]]], [['VEC_MODE8'], ['list', ['=', ['subbus', 'shift_right_result', (31, 24)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 31]], ['subbus', 'shift_op_a', (31, 24)]]]], ['subbus', 'shift_amt_int', [26, 24]]]], ['=', ['subbus', 'shift_right_result', (23, 16)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 23]], ['subbus', 'shift_op_a', (23, 16)]]]], ['subbus', 'shift_amt_int', [18, 16]]]], ['=', ['subbus', 'shift_right_result', (15, 8)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 15]], ['subbus', 'shift_op_a', (15, 8)]]]], ['subbus', 'shift_amt_int', [10, 8]]]], ['=', ['subbus', 'shift_right_result', (7, 0)], ['>>>', ['functioncall', '$signed', [['curly', ['&', 'shift_arithmetic', ['subbit', 'shift_op_a', 7]], ['subbus', 'shift_op_a', (7, 0)]]]], ['subbus', 'shift_amt_int', [2, 0]]]]]], ['default', ['list', ['=', 'shift_right_result', ['>>', 'shift_op_a_32', ['subbus', 'shift_amt_int', [4, 0]]]]]]]]], 'always']
    always ['*', ['list', ['=', 'cmp_signed', ['bin', '4', '0']], ['case', 'operator_i', [[['ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES', 'ALU_SLTS', 'ALU_SLETS', 'ALU_MIN', 'ALU_MAX', 'ALU_ABS', 'ALU_CLIP', 'ALU_CLIPU', 'ALU_FLE', 'ALU_FLT', 'ALU_FMAX', 'ALU_FMIN'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1111']]], [['VEC_MODE16'], ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1010']]], ['default', ['=', ['subbus', 'cmp_signed', (3, 0)], ['bin', '4', '1000']]]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', ['subbus', 'is_equal', (3, 0)], ['curly', 'repeat', 4, ['curly', ['&', ['&', ['&', ['subbit', 'is_equal_vec', 3], ['subbit', 'is_equal_vec', 2]], ['subbit', 'is_equal_vec', 1]], ['subbit', 'is_equal_vec', 0]]]]], ['=', ['subbus', 'is_greater', (3, 0)], ['curly', 'repeat', 4, ['curly', ['|', ['subbit', 'is_greater_vec', 3], ['&', ['subbit', 'is_equal_vec', 3], ['|', ['subbit', 'is_greater_vec', 2], ['&', ['subbit', 'is_equal_vec', 2], ['|', ['subbit', 'is_greater_vec', 1], ['&', ['subbit', 'is_equal_vec', 1], ['subbit', 'is_greater_vec', 0]]]]]]]]]], ['case', 'vector_mode_i', [[['VEC_MODE16'], ['list', ['=', ['subbus', 'is_equal', (1, 0)], ['curly', 'repeat', 2, ['curly', ['&', ['subbit', 'is_equal_vec', 0], ['subbit', 'is_equal_vec', 1]]]]], ['=', ['subbus', 'is_equal', (3, 2)], ['curly', 'repeat', 2, ['curly', ['&', ['subbit', 'is_equal_vec', 2], ['subbit', 'is_equal_vec', 3]]]]], ['=', ['subbus', 'is_greater', (1, 0)], ['curly', 'repeat', 2, ['curly', ['|', ['subbit', 'is_greater_vec', 1], ['&', ['subbit', 'is_equal_vec', 1], ['subbit', 'is_greater_vec', 0]]]]]], ['=', ['subbus', 'is_greater', (3, 2)], ['curly', 'repeat', 2, ['curly', ['|', ['subbit', 'is_greater_vec', 3], ['&', ['subbit', 'is_equal_vec', 3], ['subbit', 'is_greater_vec', 2]]]]]]]], [['VEC_MODE8'], ['list', ['=', ['subbus', 'is_equal', (3, 0)], ['subbus', 'is_equal_vec', [3, 0]]], ['=', ['subbus', 'is_greater', (3, 0)], ['subbus', 'is_greater_vec', [3, 0]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'cmp_result', 'is_equal'], ['=', 'f_is_nan', ['curly', 'repeat', 4, ['curly', ['|', 'f_is_qnan', 'f_is_snan']]]], ['case', 'operator_i', [[['ALU_EQ'], ['=', 'cmp_result', 'is_equal']], [['ALU_NE'], ['=', 'cmp_result', ['~', 'is_equal']]], [['ALU_GTS', 'ALU_GTU'], ['=', 'cmp_result', 'is_greater']], [['ALU_GES', 'ALU_GEU'], ['=', 'cmp_result', ['|', 'is_greater', 'is_equal']]], [['ALU_LTS', 'ALU_SLTS', 'ALU_LTU', 'ALU_SLTU'], ['=', 'cmp_result', ['~', ['|', 'is_greater', 'is_equal']]]], [['ALU_SLETS', 'ALU_SLETU', 'ALU_LES', 'ALU_LEU'], ['=', 'cmp_result', ['~', 'is_greater']]], [['ALU_FEQ'], ['=', 'cmp_result', ['&', 'is_equal', ['~', 'f_is_nan']]]], [['ALU_FLE'], ['=', 'cmp_result', ['&', ['~', 'f_is_greater'], ['~', 'f_is_nan']]]], [['ALU_FLT'], ['=', 'cmp_result', ['&', ['~', ['|', 'f_is_greater', 'is_equal']], ['~', 'f_is_nan']]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['ifelse', 'FPU', ['list', ['=', ['subbus', 'f_sign_inject_result', (30, 0)], ['subbus', 'operand_a_i', [30, 0]]], ['=', ['subbit', 'f_sign_inject_result', 31], ['subbit', 'operand_a_i', 31]], ['case', 'operator_i', [[['ALU_FKEEP'], ['=', ['subbit', 'f_sign_inject_result', 31], ['subbit', 'operand_a_i', 31]]], [['ALU_FSGNJ'], ['=', ['subbit', 'f_sign_inject_result', 31], ['subbit', 'operand_b_i', 31]]], [['ALU_FSGNJN'], ['=', ['subbit', 'f_sign_inject_result', 31], ['!', ['subbit', 'operand_b_i', 31]]]], [['ALU_FSGNJX'], ['=', ['subbit', 'f_sign_inject_result', 31], ['^', ['subbit', 'operand_a_i', 31], ['subbit', 'operand_b_i', 31]]]], ['default', ['empty_begin_end']]]]], ['=', 'f_sign_inject_result', ['dig', 32, '0']]]], 'always']
    always ['*', ['list', ['=', 'shuffle_reg_sel', ['dig', 32, '0']], ['=', 'shuffle_reg1_sel', ['bin', '2', '01']], ['=', 'shuffle_reg0_sel', ['bin', '2', '10']], ['=', 'shuffle_through', ['dig', 32, '1']], ['case', 'operator_i', [[['ALU_EXT', 'ALU_EXTS'], ['list', ['if', ['==', 'operator_i', 'ALU_EXTS'], ['=', 'shuffle_reg1_sel', ['bin', '2', '11']]], ['ifelse', ['==', 'vector_mode_i', 'VEC_MODE8'], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 1)], ['bin', '3', '111']], ['=', ['subbit', 'shuffle_reg_sel', 0], ['bin', '1', '0']]], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 2)], ['bin', '2', '11']], ['=', ['subbus', 'shuffle_reg_sel', (1, 0)], ['bin', '2', '00']]]]]], [['ALU_PCKLO'], ['list', ['=', 'shuffle_reg1_sel', ['bin', '2', '00']], ['ifelse', ['==', 'vector_mode_i', 'VEC_MODE8'], ['list', ['=', 'shuffle_through', ['bin', '4', '0011']], ['=', 'shuffle_reg_sel', ['bin', '4', '0001']]], ['list', ['=', 'shuffle_reg_sel', ['bin', '4', '0011']]]]]], [['ALU_PCKHI'], ['list', ['=', 'shuffle_reg1_sel', ['bin', '2', '00']], ['=', 'shuffle_reg_sel', ['bin', '4', '0100']], ['=', 'shuffle_through', ['bin', '4', '1100']]]], [['ALU_SHUF2'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['list', ['=', ['subbit', 'shuffle_reg_sel', 3], ['~', ['subbit', 'operand_b_i', 26]]], ['=', ['subbit', 'shuffle_reg_sel', 2], ['~', ['subbit', 'operand_b_i', 18]]], ['=', ['subbit', 'shuffle_reg_sel', 1], ['~', ['subbit', 'operand_b_i', 10]]], ['=', ['subbit', 'shuffle_reg_sel', 0], ['~', ['subbit', 'operand_b_i', 2]]]]], [['VEC_MODE16'], ['list', ['=', ['subbit', 'shuffle_reg_sel', 3], ['~', ['subbit', 'operand_b_i', 17]]], ['=', ['subbit', 'shuffle_reg_sel', 2], ['~', ['subbit', 'operand_b_i', 17]]], ['=', ['subbit', 'shuffle_reg_sel', 1], ['~', ['subbit', 'operand_b_i', 1]]], ['=', ['subbit', 'shuffle_reg_sel', 0], ['~', ['subbit', 'operand_b_i', 1]]]]], ['default', ['empty_begin_end']]]]]], [['ALU_INS'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['list', ['=', 'shuffle_reg0_sel', ['bin', '2', '00']], ['case', 'imm_vec_ext_i', [[[['bin', '2', '00']], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 0)], ['bin', '4', '1110']]]], [[['bin', '2', '01']], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 0)], ['bin', '4', '1101']]]], [[['bin', '2', '10']], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 0)], ['bin', '4', '1011']]]], [[['bin', '2', '11']], ['list', ['=', ['subbus', 'shuffle_reg_sel', (3, 0)], ['bin', '4', '0111']]]], ['default', ['empty_begin_end']]]]]], [['VEC_MODE16'], ['list', ['=', 'shuffle_reg0_sel', ['bin', '2', '01']], ['=', ['subbit', 'shuffle_reg_sel', 3], ['~', ['subbit', 'imm_vec_ext_i', 0]]], ['=', ['subbit', 'shuffle_reg_sel', 2], ['~', ['subbit', 'imm_vec_ext_i', 0]]], ['=', ['subbit', 'shuffle_reg_sel', 1], ['subbit', 'imm_vec_ext_i', 0]], ['=', ['subbit', 'shuffle_reg_sel', 0], ['subbit', 'imm_vec_ext_i', 0]]]], ['default', ['empty_begin_end']]]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'shuffle_byte_sel', ['dig', 32, '0']], ['case', 'operator_i', [[['ALU_EXTS', 'ALU_EXT'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['subbus', 'imm_vec_ext_i', [1, 0]]], ['=', ['subbit', 'shuffle_byte_sel', 2], ['subbus', 'imm_vec_ext_i', [1, 0]]], ['=', ['subbit', 'shuffle_byte_sel', 1], ['subbus', 'imm_vec_ext_i', [1, 0]]], ['=', ['subbit', 'shuffle_byte_sel', 0], ['subbus', 'imm_vec_ext_i', [1, 0]]]]], [['VEC_MODE16'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['curly', ['subbit', 'imm_vec_ext_i', 0], ['bin', '1', '1']]], ['=', ['subbit', 'shuffle_byte_sel', 2], ['curly', ['subbit', 'imm_vec_ext_i', 0], ['bin', '1', '1']]], ['=', ['subbit', 'shuffle_byte_sel', 1], ['curly', ['subbit', 'imm_vec_ext_i', 0], ['bin', '1', '1']]], ['=', ['subbit', 'shuffle_byte_sel', 0], ['curly', ['subbit', 'imm_vec_ext_i', 0], ['bin', '1', '0']]]]], ['default', ['empty_begin_end']]]]]], [['ALU_PCKLO', 'ALU_PCKHI'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['bin', '2', '00']], ['=', ['subbit', 'shuffle_byte_sel', 2], ['bin', '2', '00']], ['=', ['subbit', 'shuffle_byte_sel', 1], ['bin', '2', '00']], ['=', ['subbit', 'shuffle_byte_sel', 0], ['bin', '2', '00']]]], [['VEC_MODE16'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['bin', '2', '01']], ['=', ['subbit', 'shuffle_byte_sel', 2], ['bin', '2', '00']], ['=', ['subbit', 'shuffle_byte_sel', 1], ['bin', '2', '01']], ['=', ['subbit', 'shuffle_byte_sel', 0], ['bin', '2', '00']]]], ['default', ['empty_begin_end']]]]]], [['ALU_SHUF2', 'ALU_SHUF'], ['list', ['case', 'vector_mode_i', [[['VEC_MODE8'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['subbus', 'operand_b_i', [25, 24]]], ['=', ['subbit', 'shuffle_byte_sel', 2], ['subbus', 'operand_b_i', [17, 16]]], ['=', ['subbit', 'shuffle_byte_sel', 1], ['subbus', 'operand_b_i', [9, 8]]], ['=', ['subbit', 'shuffle_byte_sel', 0], ['subbus', 'operand_b_i', [1, 0]]]]], [['VEC_MODE16'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['curly', ['subbit', 'operand_b_i', 16], ['bin', '1', '1']]], ['=', ['subbit', 'shuffle_byte_sel', 2], ['curly', ['subbit', 'operand_b_i', 16], ['bin', '1', '0']]], ['=', ['subbit', 'shuffle_byte_sel', 1], ['curly', ['subbit', 'operand_b_i', 0], ['bin', '1', '1']]], ['=', ['subbit', 'shuffle_byte_sel', 0], ['curly', ['subbit', 'operand_b_i', 0], ['bin', '1', '0']]]]], ['default', ['empty_begin_end']]]]]], [['ALU_INS'], ['list', ['=', ['subbit', 'shuffle_byte_sel', 3], ['bin', '2', '11']], ['=', ['subbit', 'shuffle_byte_sel', 2], ['bin', '2', '10']], ['=', ['subbit', 'shuffle_byte_sel', 1], ['bin', '2', '01']], ['=', ['subbit', 'shuffle_byte_sel', 0], ['bin', '2', '00']]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'ff_input', ['dig', 32, '0']], ['case', 'operator_i', [[['ALU_FF1'], ['=', 'ff_input', 'operand_a_i']], [['ALU_DIVU', 'ALU_REMU', 'ALU_FL1'], ['=', 'ff_input', 'operand_a_rev']], [['ALU_DIV', 'ALU_REM', 'ALU_CLB'], ['list', ['ifelse', ['subbit', 'operand_a_i', 31], ['=', 'ff_input', 'operand_a_neg_rev'], ['=', 'ff_input', 'operand_a_rev']]]]]]], 'always']
    always ['*', ['list', ['=', 'bitop_result', ['dig', 32, '0']], ['case', 'operator_i', [[['ALU_FF1'], ['=', 'bitop_result', ['question', 'ff_no_one', ['dig', '6', '32'], ['curly', ['bin', '1', '0'], 'ff1_result']]]], [['ALU_FL1'], ['=', 'bitop_result', ['question', 'ff_no_one', ['dig', '6', '32'], ['curly', ['bin', '1', '0'], 'fl1_result']]]], [['ALU_CNT'], ['=', 'bitop_result', 'cnt_result']], [['ALU_CLB'], ['list', ['ifelse', 'ff_no_one', ['list', ['ifelse', ['subbit', 'operand_a_i', 31], ['=', 'bitop_result', ['dig', '6', '31']], ['=', 'bitop_result', ['dig', 32, '0']]]], ['list', ['=', 'bitop_result', 'clb_result']]]]], ['default', ['empty_begin_end']]]]], 'always']
    always ['*', ['list', ['=', 'result_o', ['dig', 32, '0']], ['case', 'operator_i', [[['ALU_AND'], ['=', 'result_o', ['&', 'operand_a_i', 'operand_b_i']]], [['ALU_OR'], ['=', 'result_o', ['|', 'operand_a_i', 'operand_b_i']]], [['ALU_XOR'], ['=', 'result_o', ['^', 'operand_a_i', 'operand_b_i']]], [['ALU_ADD', 'ALU_ADDR', 'ALU_ADDU', 'ALU_ADDUR', 'ALU_SUB', 'ALU_SUBR', 'ALU_SUBU', 'ALU_SUBUR', 'ALU_SLL', 'ALU_SRL', 'ALU_SRA', 'ALU_ROR'], ['=', 'result_o', 'shift_result']], [['ALU_BINS', 'ALU_BEXT', 'ALU_BEXTU'], ['=', 'result_o', 'bextins_result']], [['ALU_BCLR'], ['=', 'result_o', 'bclr_result']], [['ALU_BSET'], ['=', 'result_o', 'bset_result']], [['ALU_SHUF', 'ALU_SHUF2', 'ALU_PCKLO', 'ALU_PCKHI', 'ALU_EXT', 'ALU_EXTS', 'ALU_INS'], ['=', 'result_o', 'pack_result']], [['ALU_MIN', 'ALU_MINU', 'ALU_MAX', 'ALU_MAXU', 'ALU_ABS', 'ALU_FMIN', 'ALU_FMAX'], ['=', 'result_o', ['question', 'minmax_is_fp_special', 'fp_canonical_nan', 'result_minmax']]], [['ALU_CLIP', 'ALU_CLIPU'], ['=', 'result_o', 'clip_result']], [['ALU_EQ', 'ALU_NE', 'ALU_GTU', 'ALU_GEU', 'ALU_LTU', 'ALU_LEU', 'ALU_GTS', 'ALU_GES', 'ALU_LTS', 'ALU_LES'], ['list', ['=', ['subbus', 'result_o', (31, 24)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 3]]]], ['=', ['subbus', 'result_o', (23, 16)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 2]]]], ['=', ['subbus', 'result_o', (15, 8)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 1]]]], ['=', ['subbus', 'result_o', (7, 0)], ['curly', 'repeat', 8, ['curly', ['subbit', 'cmp_result', 0]]]]]], [['ALU_FEQ', 'ALU_FLT', 'ALU_FLE', 'ALU_SLTS', 'ALU_SLTU', 'ALU_SLETS', 'ALU_SLETU'], ['=', 'result_o', ['curly', ['bin', '31', '0'], 'comparison_result_o']]], [['ALU_FF1', 'ALU_FL1', 'ALU_CLB', 'ALU_CNT'], ['=', 'result_o', ['curly', ['hex', '26', '0'], ['subbus', 'bitop_result', [5, 0]]]]], [['ALU_DIV', 'ALU_DIVU', 'ALU_REM', 'ALU_REMU'], ['=', 'result_o', 'result_div']], [['ALU_FCLASS'], ['=', 'result_o', 'fclass_result']], [['ALU_FSGNJ', 'ALU_FSGNJN', 'ALU_FSGNJX', 'ALU_FKEEP'], ['=', 'result_o', 'f_sign_inject_result']], ['default', ['empty_begin_end']]]]], 'always']
    generate [['genvar', 'k'], ['for', ['list', ['=', 'k', 0]], ['<', 'k', 32], ['list', ['=', 'k', ['+', 'k', 1]]], ['list', ['assigns', ['=', ['subbit', 'operand_a_rev', 'k'], ['subbit', 'operand_a_i', ['-', 31, 'k']]]]]]]
    generate [['genvar', 'm'], ['for', ['list', ['=', 'm', 0]], ['<', 'm', 32], ['list', ['=', 'm', ['+', 'm', 1]]], ['list', ['assigns', ['=', ['subbit', 'operand_a_neg_rev', 'm'], ['subbit', 'operand_a_neg', ['-', 31, 'm']]]]]]]
    generate ['for', ['list', ['=', 'j', 0]], ['<', 'j', 32], ['list', ['=', 'j', ['+', 'j', 1]]], ['list', ['assigns', ['=', ['subbit', 'shift_left_result', 'j'], ['subbit', 'shift_right_result', ['-', 31, 'j']]]]]]
    generate ['for', ['list', ['=', 'i', 0]], ['<', 'i', 4], ['list', ['=', 'i', ['+', 'i', 1]]], ['list', ['assigns', ['=', ['subbit', 'is_equal_vec', 'i'], ['==', ['subbus', 'operand_a_i', [['+', ['*', 8, 'i'], 7], ['*', 8, 'i']]], ['subbus', 'operand_b_i', [['+', ['*', 8, 'i'], 7], ['*', 'i', 8]]]]]], ['assigns', ['=', ['subbit', 'is_greater_vec', 'i'], ['>', ['functioncall', '$signed', [['curly', ['&', ['subbit', 'operand_a_i', ['+', ['*', 8, 'i'], 7]], ['subbit', 'cmp_signed', 'i']], ['subbus', 'operand_a_i', (['+', ['*', 8, 'i'], 7], ['*', 8, 'i'])]]]], ['functioncall', '$signed', [['curly', ['&', ['subbit', 'operand_b_i', ['+', ['*', 8, 'i'], 7]], ['subbit', 'cmp_signed', 'i']], ['subbus', 'operand_b_i', (['+', ['*', 8, 'i'], 7], ['*', 'i', 8])]]]]]]]]]
    generate [['ifelse', ['==', 'FPU', 1], ['list', [('declare', 'wire', 'fclass_exponent', (7, 0))], [('declare', 'wire', 'fclass_mantiassa', (22, 0))], [('declare', 'wire', 'fclass_ninf', 0)], [('declare', 'wire', 'fclass_pinf', 0)], [('declare', 'wire', 'fclass_normal', 0)], [('declare', 'wire', 'fclass_subnormal', 0)], [('declare', 'wire', 'fclass_nzero', 0)], [('declare', 'wire', 'fclass_pzero', 0)], [('declare', 'wire', 'fclass_is_negative', 0)], [('declare', 'wire', 'fclass_snan_a', 0)], [('declare', 'wire', 'fclass_qnan_a', 0)], [('declare', 'wire', 'fclass_snan_b', 0)], [('declare', 'wire', 'fclass_qnan_b', 0)], ['assigns', ['=', 'fclass_exponent', ['subbus', 'operand_a_i', [30, 23]]]], ['assigns', ['=', 'fclass_mantiassa', ['subbus', 'operand_a_i', [22, 0]]]], ['assigns', ['=', 'fclass_is_negative', ['subbit', 'operand_a_i', 31]]], ['assigns', ['=', 'fclass_ninf', ['==', 'operand_a_i', ['hex', '32', 'FF800000']]]], ['assigns', ['=', 'fclass_pinf', ['==', 'operand_a_i', ['hex', '32', '7F800000']]]], ['assigns', ['=', 'fclass_normal', ['&&', ['!=', 'fclass_exponent', 0], ['!=', 'fclass_exponent', 255]]]], ['assigns', ['=', 'fclass_subnormal', ['&&', ['~', 'fclass_exponent'], ['!=', 'fclass_mantiassa', 0]]]], ['assigns', ['=', 'fclass_nzero', ['==', 'operand_a_i', ['hex', '32', '80000000']]]], ['assigns', ['=', 'fclass_pzero', ['==', 'operand_a_i', ['hex', '32', '00000000']]]], ['assigns', ['=', 'fclass_snan_a', ['==', ['subbus', 'operand_a_i', [30, 0]], ['hex', '32', '7fa00000']]]], ['assigns', ['=', 'fclass_qnan_a', ['==', ['subbus', 'operand_a_i', [30, 0]], ['hex', '32', '7fc00000']]]], ['assigns', ['=', 'fclass_snan_b', ['==', ['subbus', 'operand_b_i', [30, 0]], ['hex', '32', '7fa00000']]]], ['assigns', ['=', 'fclass_qnan_b', ['==', ['subbus', 'operand_b_i', [30, 0]], ['hex', '32', '7fc00000']]]], ['assigns', ['=', ['subbus', 'fclass_result', (31, 0)], ['curly', ['curly', 'repeat', 22, ['curly', ['bin', '1', '0']]], 'fclass_qnan_a', 'fclass_snan_a', 'fclass_pinf', ['&&', 'fclass_normal', ['!', 'fclass_is_negative']], ['&&', 'fclass_subnormal', ['!', 'fclass_is_negative']], 'fclass_pzero', 'fclass_nzero', ['&&', 'fclass_subnormal', 'fclass_is_negative'], ['&&', 'fclass_normal', 'fclass_is_negative'], 'fclass_ninf']]], ['assigns', ['=', 'f_is_qnan', ['|', 'fclass_qnan_a', 'fclass_qnan_b']]], ['assigns', ['=', 'f_is_snan', ['|', 'fclass_snan_a', 'fclass_snan_b']]], ['assigns', ['=', 'minmax_is_fp_special', ['&', ['||', ['==', 'operator_i', 'ALU_FMIN'], ['==', 'operator_i', 'ALU_FMAX']], ['|', 'f_is_snan', 'f_is_qnan']]]], ['assigns', ['=', 'fp_canonical_nan', ['hex', '32', '7fc00000']]]], ['list', ['assigns', ['=', 'minmax_is_fp_special', ['dig', 32, '0']]], ['assigns', ['=', 'f_is_qnan', ['dig', 32, '0']]], ['assigns', ['=', 'f_is_snan', ['dig', 32, '0']]], ['assigns', ['=', 'fclass_result', ['dig', 32, '0']]], ['assigns', ['=', 'fp_canonical_nan', ['dig', 32, '0']]]]]]
    generate [['ifelse', ['==', 'SHARED_INT_DIV', 1], ['list', ['assigns', ['=', 'result_div', ['dig', 32, '0']]], ['assigns', ['=', 'div_ready', ['dig', 32, '1']]], ['assigns', ['=', 'div_valid', ['dig', 32, '0']]]], ['list', [('declare', 'wire', 'div_signed', 0)], [('declare', 'wire', 'div_op_a_signed', 0)], [('declare', 'wire', 'div_op_b_signed', 0)], [('declare', 'wire', 'div_shift_int', (5, 0))], ['assigns', ['=', 'div_signed', ['subbit', 'operator_i', 0]]], ['assigns', ['=', 'div_op_a_signed', ['&', ['subbit', 'operand_a_i', 31], 'div_signed']]], ['assigns', ['=', 'div_op_b_signed', ['&', ['subbit', 'operand_b_i', 31], 'div_signed']]], ['assigns', ['=', 'div_shift_int', ['question', 'ff_no_one', ['dig', '6', '31'], 'clb_result']]], ['assigns', ['=', 'div_shift', ['+', 'div_shift_int', ['question', 'div_op_a_signed', ['dig', '6', '0'], ['dig', '6', '1']]]]], ['assigns', ['=', 'div_valid', ['&', 'enable_i', ['||', ['||', ['||', ['==', 'operator_i', 'ALU_DIV'], ['==', 'operator_i', 'ALU_DIVU']], ['==', 'operator_i', 'ALU_REM']], ['==', 'operator_i', 'ALU_REMU']]]]], ['instance', 'riscv_alu_div', 'div_i', {}, [['Clk_CI', 'clk'], ['Rst_RBI', 'rst_n'], ['OpA_DI', 'operand_b_i'], ['OpB_DI', 'shift_left_result'], ['OpBShift_DI', 'div_shift'], ['OpBIsZero_SI', ['==', 'cnt_result', 0]], ['OpBSign_SI', 'div_op_a_signed'], ['OpCode_SI', ['subbus', 'operator_i', (1, 0)]], ['Res_DO', 'result_div'], ['InVld_SI', 'div_valid'], ['OutRdy_SI', 'ex_ready_i'], ['OutVld_SO', 'div_ready']]]]]]
instance alu_popcnt alu_popcnt_i
      conn pin=in_i sig=operand_a_i
      conn pin=result_o sig=cnt_result
instance alu_ff alu_ff_i
      conn pin=no_ones_o sig=ff_no_one
      conn pin=in_i sig=ff_input
      conn pin=first_one_o sig=ff1_result
endmodule
