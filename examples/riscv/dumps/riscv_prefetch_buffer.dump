module riscv_prefetch_buffer
    net hwlp_NS ('reg', (2, 0))
    net unaligned_is_compressed ('wire', 0)
    net valid_stored ('wire', 0)
    net hwlp_branch ('reg', 0)
    net addr_i ('input', (31, 0))
    net addr_o ('output', (31, 0))
    net fifo_clear ('reg', 0)
    net instr_gnt_i ('input', 0)
    net clk ('input', 0)
    net hwlp_branch_o ('output', 0)
    net is_hwlp_o ('output', 0)
    net fifo_ready ('wire', 0)
    net ready_i ('input', 0)
    net NS ('reg', (1, 0))
    net rst_n ('input', 0)
    net hwloop_i ('input', 0)
    net addr_valid ('reg', 0)
    net instr_addr_q ('reg', (31, 0))
    net branch_i ('input', 0)
    net instr_req_o ('output reg', 0)
    net hwloop_target_i ('input', (31, 0))
    net instr_addr_o ('output reg', (31, 0))
    net rdata_o ('output', (31, 0))
    net fetch_is_hwlp ('reg', 0)
    net busy_o ('output', 0)
    net CS ('reg', (1, 0))
    net req_i ('input', 0)
    net valid_o ('output', 0)
    net instr_rdata_i ('input', (31, 0))
    net fifo_valid ('reg', 0)
    net hwlp_CS ('reg', (2, 0))
    net fetch_addr ('wire', (31, 0))
    net hwlp_masked ('reg', 0)
    net instr_rvalid_i ('input', 0)
    net fifo_hwlp ('reg', 0)
    net hwloop_speculative ('reg', 0)
    assign ('busy_o', ['||', ['!=', 'CS', 'IDLE'], 'instr_req_o'], '', '')
    assign ('fetch_addr', ['+', ['curly', ['subbus', 'instr_addr_q', [31, 2]], ['bin', '2', '00']], ['dig', '32', '4']], '', '')
    assign ('hwlp_branch_o', 'hwlp_branch', '', '')
    always ['*', ['list', ['=', 'hwlp_NS', 'hwlp_CS'], ['=', 'fifo_hwlp', ['bin', '1', '0']], ['=', 'fifo_clear', ['bin', '1', '0']], ['=', 'hwlp_branch', ['bin', '1', '0']], ['=', 'hwloop_speculative', ['bin', '1', '0']], ['=', 'hwlp_masked', ['bin', '1', '0']], ['case', 'hwlp_CS', [[['HWLP_NONE'], ['list', ['ifelse', 'hwloop_i', ['list', ['=', 'hwlp_masked', ['~', ['subbit', 'instr_addr_q', 1]]], ['ifelse', ['&', ['&', 'valid_o', 'unaligned_is_compressed'], ['subbit', 'instr_addr_q', 1]], ['list', ['=', 'hwlp_NS', 'HWLP_UNALIGNED_COMPRESSED'], ['=', 'hwloop_speculative', ['bin', '1', '1']]], ['list', ['ifelse', 'fetch_is_hwlp', ['=', 'hwlp_NS', 'HWLP_FETCHING'], ['=', 'hwlp_NS', 'HWLP_IN']]]], ['if', 'ready_i', ['=', 'fifo_clear', ['bin', '1', '1']]]], ['list', ['=', 'hwlp_masked', ['bin', '1', '0']]]]]], [['HWLP_UNALIGNED_COMPRESSED'], ['list', ['=', 'hwlp_branch', ['bin', '1', '1']], ['=', 'hwlp_NS', 'HWLP_FETCHING'], ['=', 'fifo_clear', ['bin', '1', '1']]]], [['HWLP_IN'], ['list', ['=', 'hwlp_masked', ['bin', '1', '1']], ['if', 'fetch_is_hwlp', ['=', 'hwlp_NS', 'HWLP_FETCHING']], ['if', 'ready_i', ['=', 'fifo_clear', ['bin', '1', '1']]]]], [['HWLP_FETCHING'], ['list', ['=', 'hwlp_masked', ['bin', '1', '0']], ['=', 'fifo_hwlp', ['bin', '1', '1']], ['ifelse', ['&', 'instr_rvalid_i', ['!=', 'CS', 'WAIT_ABORTED']], ['list', ['ifelse', ['&', 'valid_o', 'is_hwlp_o'], ['=', 'hwlp_NS', 'HWLP_NONE'], ['=', 'hwlp_NS', 'HWLP_DONE']]], ['list', ['if', 'ready_i', ['=', 'fifo_clear', ['bin', '1', '1']]]]]]], [['HWLP_DONE'], ['list', ['=', 'hwlp_masked', ['bin', '1', '0']], ['if', ['&', 'valid_o', 'is_hwlp_o'], ['=', 'hwlp_NS', 'HWLP_NONE']]]], ['default', ['list', ['=', 'hwlp_masked', ['bin', '1', '0']], ['=', 'hwlp_NS', 'HWLP_NONE']]]]], ['if', 'branch_i', ['list', ['=', 'hwlp_NS', 'HWLP_NONE'], ['=', 'fifo_clear', ['bin', '1', '1']]]]], 'always']
    always ['*', ['list', ['=', 'instr_req_o', ['bin', '1', '0']], ['=', 'instr_addr_o', 'fetch_addr'], ['=', 'fifo_valid', ['bin', '1', '0']], ['=', 'addr_valid', ['bin', '1', '0']], ['=', 'fetch_is_hwlp', ['bin', '1', '0']], ['=', 'NS', 'CS'], ['case', 'CS', [[['IDLE'], ['list', ['=', 'instr_addr_o', 'fetch_addr'], ['=', 'instr_req_o', ['bin', '1', '0']], ['ifelse', ['|', 'branch_i', 'hwlp_branch'], ['=', 'instr_addr_o', ['question', 'branch_i', 'addr_i', 'instr_addr_q']], ['if', ['&', 'hwlp_masked', 'valid_stored'], ['=', 'instr_addr_o', 'hwloop_target_i']]], ['if', ['&', 'req_i', ['|', ['|', ['|', 'fifo_ready', 'branch_i'], 'hwlp_branch'], ['&', 'hwlp_masked', 'valid_stored']]], ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'addr_valid', ['bin', '1', '1']], ['if', ['&', 'hwlp_masked', 'valid_stored'], ['list', ['=', 'fetch_is_hwlp', ['bin', '1', '1']]]], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['list', ['=', 'NS', 'WAIT_GNT']]]]]]], [['WAIT_GNT'], ['list', ['=', 'instr_addr_o', 'instr_addr_q'], ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', ['|', 'branch_i', 'hwlp_branch'], ['list', ['=', 'instr_addr_o', ['question', 'branch_i', 'addr_i', 'instr_addr_q']], ['=', 'addr_valid', ['bin', '1', '1']]], ['if', ['&', 'hwlp_masked', 'valid_stored'], ['list', ['=', 'instr_addr_o', 'hwloop_target_i'], ['=', 'addr_valid', ['bin', '1', '1']], ['=', 'fetch_is_hwlp', ['bin', '1', '1']]]]], ['ifelse', 'instr_gnt_i', ['=', 'NS', 'WAIT_RVALID'], ['=', 'NS', 'WAIT_GNT']]]], [['WAIT_RVALID'], ['list', ['=', 'instr_addr_o', 'fetch_addr'], ['ifelse', ['|', 'branch_i', 'hwlp_branch'], ['=', 'instr_addr_o', ['question', 'branch_i', 'addr_i', 'instr_addr_q']], ['if', 'hwlp_masked', ['=', 'instr_addr_o', 'hwloop_target_i']]], ['ifelse', ['&', 'req_i', ['|', ['|', ['|', 'fifo_ready', 'branch_i'], 'hwlp_branch'], 'hwlp_masked']], ['list', ['ifelse', 'instr_rvalid_i', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['=', 'fifo_valid', ['bin', '1', '1']], ['=', 'addr_valid', ['bin', '1', '1']], ['if', 'hwlp_masked', ['list', ['=', 'fetch_is_hwlp', ['bin', '1', '1']]]], ['ifelse', 'instr_gnt_i', ['list', ['=', 'NS', 'WAIT_RVALID']], ['list', ['=', 'NS', 'WAIT_GNT']]]], ['list', ['ifelse', ['|', 'branch_i', 'hwlp_branch'], ['list', ['=', 'addr_valid', ['bin', '1', '1']], ['=', 'NS', 'WAIT_ABORTED']], ['if', ['&', 'hwlp_masked', 'valid_o'], ['list', ['=', 'addr_valid', ['bin', '1', '1']], ['=', 'fetch_is_hwlp', ['bin', '1', '1']], ['=', 'NS', 'WAIT_ABORTED']]]]]]], ['list', ['if', 'instr_rvalid_i', ['list', ['=', 'fifo_valid', ['bin', '1', '1']], ['=', 'NS', 'IDLE']]]]]]], [['WAIT_ABORTED'], ['list', ['=', 'instr_addr_o', 'instr_addr_q'], ['if', ['|', 'branch_i', 'hwlp_branch'], ['list', ['=', 'instr_addr_o', ['question', 'branch_i', 'addr_i', 'instr_addr_q']], ['=', 'addr_valid', ['bin', '1', '1']]]], ['if', 'instr_rvalid_i', ['list', ['=', 'instr_req_o', ['bin', '1', '1']], ['ifelse', 'instr_gnt_i', ['list', ['=', 'NS', 'WAIT_RVALID']], ['list', ['=', 'NS', 'WAIT_GNT']]]]]]], ['default', ['list', ['=', 'NS', 'IDLE'], ['=', 'instr_req_o', ['bin', '1', '0']]]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'CS', 'IDLE'], ['<=', 'hwlp_CS', 'HWLP_NONE'], ['<=', 'instr_addr_q', ['dig', 32, '0']]], ['list', ['<=', 'CS', 'NS'], ['<=', 'hwlp_CS', 'hwlp_NS'], ['if', 'addr_valid', ['list', ['<=', 'instr_addr_q', ['question', ['&', 'hwloop_speculative', ['~', 'branch_i']], 'hwloop_target_i', 'instr_addr_o']]]]]]], 'always']
instance riscv_fetch_fifo fifo_i
      conn pin=rst_n sig=rst_n
      conn pin=out_valid_o sig=valid_o
      conn pin=out_addr_o sig=addr_o
      conn pin=out_rdata_o sig=rdata_o
      conn pin=clk sig=clk
      conn pin=in_replace2_i sig=fifo_hwlp
      conn pin=in_is_hwlp_i sig=fifo_hwlp
      conn pin=in_rdata_i sig=instr_rdata_i
      conn pin=in_addr_i sig=instr_addr_q
      conn pin=out_ready_i sig=ready_i
      conn pin=clear_i sig=fifo_clear
      conn pin=in_valid_i sig=fifo_valid
      conn pin=out_is_hwlp_o sig=is_hwlp_o
      conn pin=out_valid_stored_o sig=valid_stored
      conn pin=in_ready_o sig=fifo_ready
      conn pin=unaligned_is_compressed_o sig=unaligned_is_compressed
endmodule
