module riscv_if_stage
    parameter N_HWLP 2
    parameter FPU 0
    parameter RDATA_WIDTH 32
    net trap_addr_mux_i ('input', 0)
    net instr_valid_id_o ('output reg', 0)
    net jump_target_id_i ('input', (31, 0))
    net offset_fsm_ns ('reg', (0, 0))
    net hwlp_dec_cnt_if ('reg', (['-', 'N_HWLP', 1], 0))
    net illegal_c_insn_id_o ('output reg', 0)
    net fetch_valid ('wire', 0)
    net boot_addr_i ('input', (23, 0))
    net is_compressed_id_o ('output reg', 0)
    net hwlp_start_i ('input', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net if_busy_o ('output', 0)
    net instr_gnt_i ('input', 0)
    net halt_if_i ('input', 0)
    net pc_if_o ('output', (31, 0))
    net clk ('input', 0)
    net pc_mux_i ('input', (2, 0))
    net dbg_jump_req_i ('input', 0)
    net id_ready_i ('input', 0)
    net instr_compressed_int ('wire', 0)
    net prefetch_busy ('wire', 0)
    net valid ('reg', 0)
    net hwlp_dec_cnt_id_o ('output reg', (['-', 'N_HWLP', 1], 0))
    net offset_fsm_cs ('reg', (0, 0))
    net perf_imiss_o ('output', 0)
    net exc_pc_mux_i ('input', (1, 0))
    net hwlp_target ('wire', (31, 0))
    net fetch_rdata ('wire', (31, 0))
    net instr_decompressed ('wire', (31, 0))
    net exc_pc ('reg', (31, 0))
    net rst_n ('input', 0)
    net is_hwlp_id_q ('reg', 0)
    net hwlp_cnt_i ('input', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net pc_id_o ('output reg', (31, 0))
    net exception_pc_reg_i ('input', (31, 0))
    net clear_instr_valid_i ('input', 0)
    net instr_req_o ('output', 0)
    net instr_addr_o ('output', (31, 0))
    net hwlp_end_i ('input', ('packed', (['-', 'N_HWLP', 1], 0), (31, 0)))
    net fetch_is_hwlp ('wire', 0)
    net hwlp_dec_cnt ('wire', (['-', 'N_HWLP', 1], 0))
    net hwlp_jump ('wire', 0)
    net jump_target_ex_i ('input', (31, 0))
    net req_i ('input', 0)
    net is_hwlp_id_o ('output', 0)
    net instr_rdata_id_o ('output reg', (31, 0))
    net fetch_addr_n ('reg', (31, 0))
    net instr_rdata_i ('input', (['-', 'RDATA_WIDTH', 1], 0))
    net m_trap_base_addr_i ('input', (23, 0))
    net if_valid ('wire', 0)
    net pc_set_i ('input', 0)
    net u_trap_base_addr_i ('input', (23, 0))
    net fetch_addr ('wire', (31, 0))
    net if_ready ('wire', 0)
    net instr_rvalid_i ('input', 0)
    net exc_vec_pc_mux_i ('input', (4, 0))
    net branch_req ('reg', 0)
    net hwlp_branch ('wire', 0)
    net fetch_ready ('reg', 0)
    net illegal_c_insn ('wire', 0)
    net trap_base_addr ('reg', (23, 0))
    net dbg_jump_addr_i ('input', (31, 0))
    assign ('pc_if_o', 'fetch_addr', '', '')
    assign ('if_busy_o', 'prefetch_busy', '', '')
    assign ('perf_imiss_o', ['|', ['~', 'fetch_valid'], 'branch_req'], '', '')
    assign ('is_hwlp_id_o', ['&', 'is_hwlp_id_q', 'instr_valid_id_o'], '', '')
    assign ('if_ready', ['&', 'valid', 'id_ready_i'], '', '')
    assign ('if_valid', ['&', ['~', 'halt_if_i'], 'if_ready'], '', '')
    always ['*', ['named_begin', 'EXC_PC_MUX', ['list', ['=', 'exc_pc', ['dig', 32, '0']], ['case', 'trap_addr_mux_i', [[['TRAP_MACHINE'], ['=', 'trap_base_addr', 'm_trap_base_addr_i']], [['TRAP_USER'], ['=', 'trap_base_addr', 'u_trap_base_addr_i']], ['default', ['empty_begin_end']]]], ['case', 'exc_pc_mux_i', [[['EXC_PC_ILLINSN'], ['=', 'exc_pc', ['curly', 'trap_base_addr', 'EXC_OFF_ILLINSN']]], [['EXC_PC_ECALL'], ['=', 'exc_pc', ['curly', 'trap_base_addr', 'EXC_OFF_ECALL']]], [['EXC_PC_IRQ'], ['=', 'exc_pc', ['curly', 'trap_base_addr', ['bin', '1', '0'], ['subbus', 'exc_vec_pc_mux_i', [4, 0]], ['bin', '2', '0']]]], ['default', ['empty_begin_end']]]]]], 'always']
    always ['*', ['list', ['=', 'fetch_addr_n', ['dig', 32, '0']], ['case', 'pc_mux_i', [[['PC_BOOT'], ['=', 'fetch_addr_n', ['curly', 'boot_addr_i', 'EXC_OFF_RST']]], [['PC_JUMP'], ['=', 'fetch_addr_n', 'jump_target_id_i']], [['PC_BRANCH'], ['=', 'fetch_addr_n', 'jump_target_ex_i']], [['PC_EXCEPTION'], ['=', 'fetch_addr_n', 'exc_pc']], [['PC_ERET'], ['=', 'fetch_addr_n', 'exception_pc_reg_i']], [['PC_DBG_NPC'], ['=', 'fetch_addr_n', 'dbg_jump_addr_i']], ['default', ['empty_begin_end']]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'offset_fsm_cs', 'IDLE']], ['list', ['<=', 'offset_fsm_cs', 'offset_fsm_ns']]]], 'always']
    always ['*', ['list', ['=', 'offset_fsm_ns', 'offset_fsm_cs'], ['=', 'fetch_ready', ['bin', '1', '0']], ['=', 'branch_req', ['bin', '1', '0']], ['=', 'valid', ['bin', '1', '0']], ['case', 'offset_fsm_cs', [[['IDLE'], ['list', ['if', 'req_i', ['list', ['=', 'branch_req', ['bin', '1', '1']], ['=', 'offset_fsm_ns', 'WAIT']]]]], [['WAIT'], ['list', ['if', 'fetch_valid', ['list', ['=', 'valid', ['bin', '1', '1']], ['if', ['&&', 'req_i', 'if_valid'], ['list', ['=', 'fetch_ready', ['bin', '1', '1']], ['=', 'offset_fsm_ns', 'WAIT']]]]]]], ['default', ['list', ['=', 'offset_fsm_ns', 'IDLE']]]]], ['ifelse', 'pc_set_i', ['list', ['=', 'valid', ['bin', '1', '0']], ['=', 'branch_req', ['bin', '1', '1']], ['=', 'offset_fsm_ns', 'WAIT']], ['list', ['if', 'hwlp_branch', ['=', 'valid', ['bin', '1', '0']]]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'hwlp_dec_cnt_if', ['dig', 32, '0']]], ['list', ['if', 'hwlp_jump', ['<=', 'hwlp_dec_cnt_if', 'hwlp_dec_cnt']]]]], 'always']
    always [['list', ['edge', 'posedge', 'clk'], ['edge', 'negedge', 'rst_n']], ['named_begin', 'IF_ID_PIPE_REGISTERS', ['list', ['ifelse', ['~', 'rst_n'], ['list', ['<=', 'instr_valid_id_o', ['bin', '1', '0']], ['<=', 'instr_rdata_id_o', ['dig', 32, '0']], ['<=', 'illegal_c_insn_id_o', ['bin', '1', '0']], ['<=', 'is_compressed_id_o', ['bin', '1', '0']], ['<=', 'pc_id_o', ['dig', 32, '0']], ['<=', 'is_hwlp_id_q', ['bin', '1', '0']], ['<=', 'hwlp_dec_cnt_id_o', ['dig', 32, '0']]], ['list', ['ifelse', 'if_valid', ['list', ['<=', 'instr_valid_id_o', ['bin', '1', '1']], ['<=', 'instr_rdata_id_o', 'instr_decompressed'], ['<=', 'illegal_c_insn_id_o', 'illegal_c_insn'], ['<=', 'is_compressed_id_o', 'instr_compressed_int'], ['<=', 'pc_id_o', 'pc_if_o'], ['<=', 'is_hwlp_id_q', 'fetch_is_hwlp'], ['if', 'fetch_is_hwlp', ['<=', 'hwlp_dec_cnt_id_o', 'hwlp_dec_cnt_if']]], ['if', 'clear_instr_valid_i', ['list', ['<=', 'instr_valid_id_o', ['bin', '1', '0']]]]]]]]], 'always']
    generate ['ifelse', ['==', 'RDATA_WIDTH', 32], ['named_begin', 'prefetch_32', ['list', ['instance', 'riscv_prefetch_buffer', 'prefetch_buffer_i', {}, [['clk', 'clk'], ['rst_n', 'rst_n'], ['req_i', 'req_i'], ['branch_i', 'branch_req'], ['addr_i', ['curly', ['subbus', 'fetch_addr_n', (31, 1)], ['bin', '1', '0']]], ['hwloop_i', 'hwlp_jump'], ['hwloop_target_i', 'hwlp_target'], ['hwlp_branch_o', 'hwlp_branch'], ['ready_i', 'fetch_ready'], ['valid_o', 'fetch_valid'], ['rdata_o', 'fetch_rdata'], ['addr_o', 'fetch_addr'], ['is_hwlp_o', 'fetch_is_hwlp'], ['instr_req_o', 'instr_req_o'], ['instr_addr_o', 'instr_addr_o'], ['instr_gnt_i', 'instr_gnt_i'], ['instr_rvalid_i', 'instr_rvalid_i'], ['instr_rdata_i', 'instr_rdata_i'], ['busy_o', 'prefetch_busy']]]]], ['if', ['==', 'RDATA_WIDTH', 128], ['named_begin', 'prefetch_128', ['list', ['instance', 'riscv_prefetch_L0_buffer', 'prefetch_buffer_i', {}, [['clk', 'clk'], ['rst_n', 'rst_n'], ['req_i', ['bin', '1', '1']], ['branch_i', 'branch_req'], ['addr_i', ['curly', ['subbus', 'fetch_addr_n', (31, 1)], ['bin', '1', '0']]], ['hwloop_i', 'hwlp_jump'], ['hwloop_target_i', 'hwlp_target'], ['ready_i', 'fetch_ready'], ['valid_o', 'fetch_valid'], ['rdata_o', 'fetch_rdata'], ['addr_o', 'fetch_addr'], ['is_hwlp_o', 'fetch_is_hwlp'], ['instr_req_o', 'instr_req_o'], ['instr_addr_o', 'instr_addr_o'], ['instr_gnt_i', 'instr_gnt_i'], ['instr_rvalid_i', 'instr_rvalid_i'], ['instr_rdata_i', 'instr_rdata_i'], ['busy_o', 'prefetch_busy']]]]]]]
instance riscv_hwloop_controller hwloop_controller_i
      conn pin=hwlp_counter_i sig=hwlp_cnt_i
      conn pin=hwlp_targ_addr_o sig=hwlp_target
      conn pin=hwlp_dec_cnt_o sig=hwlp_dec_cnt
      conn pin=hwlp_jump_o sig=hwlp_jump
      conn pin=hwlp_start_addr_i sig=hwlp_start_i
      conn pin=hwlp_dec_cnt_id_i sig=['&', 'hwlp_dec_cnt_id_o', ['curly', 'repeat', 'N_HWLP', ['curly', 'is_hwlp_id_o']]]
      conn pin=current_pc_i sig=fetch_addr
      conn pin=hwlp_end_addr_i sig=hwlp_end_i
instance riscv_compressed_decoder compressed_decoder_i
      conn pin=is_compressed_o sig=instr_compressed_int
      conn pin=instr_o sig=instr_decompressed
      conn pin=illegal_instr_o sig=illegal_c_insn
      conn pin=instr_i sig=fetch_rdata
endmodule
